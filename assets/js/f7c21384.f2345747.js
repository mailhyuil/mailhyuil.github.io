"use strict";(globalThis.webpackChunkmy_blog=globalThis.webpackChunkmy_blog||[]).push([[936065],{529087:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>a});var t=r(596363);const c={},o=t.createContext(c);function l(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:l(e.components),t.createElement(o.Provider,{value:n},e.children)}},735538:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>l,metadata:()=>t,toc:()=>i});const t=JSON.parse('{"id":"c++/c++ base memory malloc & free","title":"c++ memory malloc & free","description":"heap \uc601\uc5ed\uc5d0 \uba54\ubaa8\ub9ac\ub97c \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ud558\uace0 \ud574\uc81c\ud558\ub294 \ubc29\ubc95","source":"@site/docs/c++/c++ base memory malloc & free.md","sourceDirName":"c++","slug":"/c++/c++ base memory malloc & free","permalink":"/docs/c++/c++ base memory malloc & free","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"c++ \ub78c\ub2e4","permalink":"/docs/c++/c++ base lambda \ub78c\ub2e4"},"next":{"title":"c++ memory new & delete","permalink":"/docs/c++/c++ base memory new & delete"}}');var c=r(447259),o=r(529087);const l={},a="c++ memory malloc & free",s={},i=[];function m(e){const n={blockquote:"blockquote",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(n.header,{children:(0,c.jsx)(n.h1,{id:"c-memory-malloc--free",children:"c++ memory malloc & free"})}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsx)(n.p,{children:"heap \uc601\uc5ed\uc5d0 \uba54\ubaa8\ub9ac\ub97c \ub3d9\uc801\uc73c\ub85c \ud560\ub2f9\ud558\uace0 \ud574\uc81c\ud558\ub294 \ubc29\ubc95"}),"\n",(0,c.jsxs)(n.blockquote,{children:["\n",(0,c.jsx)(n.p,{children:"malloc (memory allocation \uc5e0\uc5bc\ub85d / \ub9d0\ub85d)"}),"\n",(0,c.jsx)(n.p,{children:"calloc (clear memory allocation \uce98\ub85d)"}),"\n",(0,c.jsx)(n.p,{children:"realloc (reallocate memory \ub9ac\uc5bc\ub85d)"}),"\n",(0,c.jsx)(n.p,{children:"free \ud568\uc218\ub97c \uc0ac\uc6a9\ud55c\ub2e4."}),"\n"]}),"\n"]}),"\n",(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{className:"language-cpp",children:"#include <iostream>\r\n\r\nint main() {\r\n    int* ptr = (int*)malloc(sizeof(int)); // int \ud06c\uae30\ub9cc\ud07c heap \uc601\uc5ed\uc5d0 \uba54\ubaa8\ub9ac\ub97c \ud560\ub2f9\ud55c\ub2e4.\r\n    // int* ptr = (int*)malloc(sizeof(int) * 10); // int 10\uac1c \ud06c\uae30\ub9cc\ud07c heap \uc601\uc5ed\uc5d0 \uba54\ubaa8\ub9ac\ub97c \ud560\ub2f9\ud55c\ub2e4. (\ubc30\uc5f4)\r\n\r\n    *ptr = 10; // heap \uc601\uc5ed\uc5d0 \ud560\ub2f9\ub41c \uba54\ubaa8\ub9ac\uc5d0 \uac12\uc744 \uc800\uc7a5\ud55c\ub2e4.\r\n\r\n    std::cout << *ptr << std::endl; // 10\r\n\r\n    free(ptr); // heap \uc601\uc5ed\uc5d0 \ud560\ub2f9\ub41c \uba54\ubaa8\ub9ac\ub97c \ud574\uc81c\ud55c\ub2e4.\r\n\r\n    return 0;\r\n}\n"})})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(m,{...e})}):m(e)}}}]);