"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([["717550"],{608807:function(r,n,e){e.r(n),e.d(n,{frontMatter:()=>o,toc:()=>c,default:()=>u,metadata:()=>t,assets:()=>s,contentTitle:()=>l});var t=JSON.parse('{"id":"flutter & dart/flutter Animation CustomPainter","title":"flutter Animation CustomPainter","description":"canvas \uC5ED\uD560","source":"@site/docs/flutter & dart/flutter Animation CustomPainter.md","sourceDirName":"flutter & dart","slug":"/flutter & dart/flutter Animation CustomPainter","permalink":"/docs/flutter & dart/flutter Animation CustomPainter","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"flutter Action","permalink":"/docs/flutter & dart/flutter Action"},"next":{"title":"flutter Animation Explicit AnimatedBuilder","permalink":"/docs/flutter & dart/flutter Animation Explicit AnimatedBuilder"}}'),i=e(447259),a=e(255511);let o={},l="flutter Animation CustomPainter",s={},c=[];function d(r){let n={blockquote:"blockquote",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,a.R)(),...r.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"flutter-animation-custompainter",children:"flutter Animation CustomPainter"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"canvas \uC5ED\uD560"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"paint() \uBA54\uC11C\uB4DC\uC5D0\uC11C \uADF8\uB9BC\uC744 \uADF8\uB9BC"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"shouldRepaint()\uB294 \uC774\uC804\uC758 \uAC12\uACFC \uD604\uC7AC\uC758 \uAC12\uC744 \uBE44\uAD50\uD574\uC11C \uAC12\uC774 \uB2E4\uB974\uBA74 \uB2E4\uC2DC \uADF8\uB9AC\uB3C4\uB85D"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"import 'dart:math';\r\n\r\nimport 'package:flutter/material.dart';\r\n\r\nclass AppleWatchScreen extends StatefulWidget {\r\n  const AppleWatchScreen({super.key});\r\n\r\n  @override\r\n  State<AppleWatchScreen> createState() => _AppleWatchScreenState();\r\n}\r\n\r\nclass _AppleWatchScreenState extends State<AppleWatchScreen>\r\n    with SingleTickerProviderStateMixin {\r\n  late final AnimationController _animationController = AnimationController(\r\n    vsync: this,\r\n    duration: const Duration(seconds: 2),\r\n  )..forward();\r\n\r\n  late final CurvedAnimation _curve = CurvedAnimation(\r\n    parent: _animationController,\r\n    curve: Curves.bounceOut,\r\n  );\r\n\r\n  late Animation<double> _progress = Tween(\r\n    begin: 0.005,\r\n    end: 1.5,\r\n  ).animate(_curve);\r\n\r\n  void _animateValues() {\r\n    final newBegin = _progress.value;\r\n    final random = Random();\r\n    final newEnd = random.nextDouble() * 2.0;\r\n    setState(() {\r\n      _progress = Tween(\r\n        begin: newBegin,\r\n        end: newEnd,\r\n      ).animate(_curve);\r\n    });\r\n    _animationController.forward(from: 0);\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _animationController.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      backgroundColor: Colors.black,\r\n      appBar: AppBar(\r\n        backgroundColor: Colors.black,\r\n        foregroundColor: Colors.white,\r\n        title: const Text(\"Apple Watch\"),\r\n      ),\r\n      body: Center(\r\n        child: AnimatedBuilder(\r\n          animation: _progress,\r\n          builder: (context, child) {\r\n            return CustomPaint(\r\n              painter: AppleWatchPainter(\r\n                progress: _progress.value,\r\n              ),\r\n              size: const Size(400, 400),\r\n            );\r\n          },\r\n        ),\r\n      ),\r\n      floatingActionButton: FloatingActionButton(\r\n        onPressed: _animateValues,\r\n        child: const Icon(Icons.refresh),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass AppleWatchPainter extends CustomPainter {\r\n  final double progress;\r\n\r\n  AppleWatchPainter({\r\n    required this.progress,\r\n  });\r\n\r\n  @override\r\n  void paint(Canvas canvas, Size size) {\r\n    final center = Offset(\r\n      size.width / 2,\r\n      size.height / 2,\r\n    );\r\n\r\n    const startingAngle = -0.5 * pi;\r\n\r\n    // draw red\r\n    final redCirclePaint = Paint()\r\n      ..color = Colors.red.shade400.withOpacity(0.3)\r\n      ..style = PaintingStyle.stroke\r\n      ..strokeWidth = 25;\r\n\r\n    final redCircleRadius = (size.width / 2) * 0.9;\r\n\r\n    canvas.drawCircle(\r\n      center,\r\n      redCircleRadius,\r\n      redCirclePaint,\r\n    );\r\n    // draw green\r\n\r\n    final greenCircleRadius = (size.width / 2) * 0.76;\r\n\r\n    final greenCircle = Paint()\r\n      ..color = Colors.green.shade400.withOpacity(0.3)\r\n      ..style = PaintingStyle.stroke\r\n      ..strokeWidth = 25;\r\n    canvas.drawCircle(\r\n      center,\r\n      greenCircleRadius,\r\n      greenCircle,\r\n    );\r\n    // draw blue\r\n    final blueCircle = Paint()\r\n      ..color = Colors.cyan.shade400.withOpacity(0.3)\r\n      ..style = PaintingStyle.stroke\r\n      ..strokeWidth = 25;\r\n\r\n    final blueCircleRadius = (size.width / 2) * 0.62;\r\n\r\n    canvas.drawCircle(\r\n      center,\r\n      blueCircleRadius,\r\n      blueCircle,\r\n    );\r\n\r\n    // red arc\r\n\r\n    final redArcRect = Rect.fromCircle(\r\n      center: center,\r\n      radius: redCircleRadius,\r\n    );\r\n\r\n    final redArcPaint = Paint()\r\n      ..color = Colors.red.shade400\r\n      ..style = PaintingStyle.stroke\r\n      ..strokeCap = StrokeCap.round\r\n      ..strokeWidth = 25;\r\n\r\n    canvas.drawArc(\r\n      redArcRect,\r\n      startingAngle,\r\n      progress * pi,\r\n      false,\r\n      redArcPaint,\r\n    );\r\n\r\n    // green arc\r\n\r\n    final greenArcRect = Rect.fromCircle(\r\n      center: center,\r\n      radius: greenCircleRadius,\r\n    );\r\n\r\n    final greenArcPaint = Paint()\r\n      ..color = Colors.green.shade400\r\n      ..style = PaintingStyle.stroke\r\n      ..strokeCap = StrokeCap.round\r\n      ..strokeWidth = 25;\r\n\r\n    canvas.drawArc(\r\n      greenArcRect,\r\n      startingAngle,\r\n      progress * pi,\r\n      false,\r\n      greenArcPaint,\r\n    );\r\n\r\n    // blue arc\r\n\r\n    final blueArcRect = Rect.fromCircle(\r\n      center: center,\r\n      radius: blueCircleRadius,\r\n    );\r\n\r\n    final blueArcPaint = Paint()\r\n      ..color = Colors.cyan.shade400\r\n      ..style = PaintingStyle.stroke\r\n      ..strokeCap = StrokeCap.round\r\n      ..strokeWidth = 25;\r\n\r\n    canvas.drawArc(\r\n      blueArcRect,\r\n      startingAngle,\r\n      progress * pi,\r\n      false,\r\n      blueArcPaint,\r\n    );\r\n  }\r\n\r\n  @override\r\n  bool shouldRepaint(covariant AppleWatchPainter oldDelegate) {\r\n    return oldDelegate.progress != progress;\r\n  }\r\n}\n"})})]})}function u(r={}){let{wrapper:n}={...(0,a.R)(),...r.components};return n?(0,i.jsx)(n,{...r,children:(0,i.jsx)(d,{...r})}):d(r)}},255511:function(r,n,e){e.d(n,{R:()=>o,x:()=>l});var t=e(596363);let i={},a=t.createContext(i);function o(r){let n=t.useContext(a);return t.useMemo(function(){return"function"==typeof r?r(n):{...n,...r}},[n,r])}function l(r){let n;return n=r.disableParentContext?"function"==typeof r.components?r.components(i):r.components||i:o(r.components),t.createElement(a.Provider,{value:n},r.children)}}}]);