"use strict";(globalThis.webpackChunkmy_blog=globalThis.webpackChunkmy_blog||[]).push([[606923],{274992:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>d,default:()=>b,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"x design pattern/x Blackboard Pattern","title":"design pattern blackboard pattern","description":"","source":"@site/docs/x design pattern/x Blackboard Pattern.md","sourceDirName":"x design pattern","slug":"/x design pattern/x Blackboard Pattern","permalink":"/docs/x design pattern/x Blackboard Pattern","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Actor Model Pattern","permalink":"/docs/x design pattern/x Actor Model Pattern"},"next":{"title":"Change Data Capture (CDC)","permalink":"/docs/x design pattern/x CDC - Change Data Capture"}}');var t=a(447259),o=a(529087);const i={},d="design pattern blackboard pattern",s={},c=[];function l(e){const n={code:"code",h1:"h1",header:"header",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"design-pattern-blackboard-pattern",children:"design pattern blackboard pattern"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'// This is the blackboard class that will hold all of the information\r\n// that the different AI agents will use to make decisions.\r\nclass Blackboard {\r\n  public currentTask: string = "";\r\n  public hasFood: boolean = false;\r\n  public hasWater: boolean = false;\r\n\r\n  // This is the list of agents that will use the blackboard to\r\n  // make decisions.\r\n  public agents: IAgent[] = [];\r\n\r\n  // This method will be called by each agent to make a decision\r\n  // based on the current state of the blackboard.\r\n  public makeDecision(): void {\r\n    for (const agent of this.agents) {\r\n      agent.decide(this);\r\n    }\r\n  }\r\n}\r\n\r\n// This is an interface that defines the methods that each AI agent\r\n// must implement.\r\ninterface IAgent {\r\n  decide(blackboard: Blackboard): void;\r\n}\r\n\r\n// This is an example of an AI agent that will prioritize finding food\r\n// if it doesn\'t have any, and finding water if it doesn\'t have any of that.\r\nclass PrioritizeFoodAndWaterAgent implements IAgent {\r\n  public decide(blackboard: Blackboard): void {\r\n    if (!blackboard.hasFood) {\r\n      // If we don\'t have food, prioritize finding food.\r\n      blackboard.currentTask = "FindFood";\r\n    } else if (!blackboard.hasWater) {\r\n      // If we have food but not water, prioritize finding water.\r\n      blackboard.currentTask = "FindWater";\r\n    } else {\r\n      // If we have both food and water, we can do other tasks.\r\n      blackboard.currentTask = "DoOtherTasks";\r\n    }\r\n  }\r\n}\r\n\r\n// This is an example of an AI agent that will prioritize finding water\r\n// if it doesn\'t have any, and finding food if it doesn\'t have any of that.\r\nclass PrioritizeWaterAndFoodAgent implements IAgent {\r\n  public decide(blackboard: Blackboard): void {\r\n    if (!blackboard.hasWater) {\r\n      // If we don\'t have water, prioritize finding water.\r\n      blackboard.currentTask = "FindWater";\r\n    } else if (!blackboard.hasFood) {\r\n      // If we have water but not food, prioritize finding food.\r\n      blackboard.currentTask = "FindFood";\r\n    } else {\r\n      // If we have both water and food, we can do other tasks.\r\n      blackboard.currentTask = "DoOtherTasks";\r\n    }\r\n  }\r\n}\r\n\r\n// This is an example of how the blackboard and agents can be used.\r\nconst blackboard = new Blackboard();\r\nblackboard.hasFood = false;\r\nblackboard.hasWater = false;\r\nblackboard.agents = [new PrioritizeFoodAndWaterAgent(), new PrioritizeWaterAndFoodAgent()];\r\n\r\n// Make the initial decision with the current state of the blackboard.\r\nblackboard.makeDecision();\r\n\r\n// Output the current task.\r\nconsole.log(blackboard.currentTask);\r\n\r\n// Update the state of the blackboard.\r\nblackboard.hasFood = true;\r\nblackboard.hasWater = true;\r\n\r\n// Make a new decision with the updated state of the blackboard.\r\nblackboard.makeDecision();\r\n\r\n// Output the current task.\r\nconsole.log(blackboard.currentTask);\n'})})]})}function b(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},529087:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>d});var r=a(596363);const t={},o=r.createContext(t);function i(e){const n=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);