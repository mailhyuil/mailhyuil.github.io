"use strict";(globalThis.webpackChunkmy_blog=globalThis.webpackChunkmy_blog||[]).push([[195459],{201855:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>n,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"db-prisma/prisma Promise lazy evaluation","title":"prisma Promise lazy evaluation","description":"prisma\uc758 create, update\ub294 Lazy Evaluation\uc744 \uc0ac\uc6a9\ud55c\ub2e4.","source":"@site/docs/db-prisma/prisma Promise lazy evaluation.md","sourceDirName":"db-prisma","slug":"/db-prisma/prisma Promise lazy evaluation","permalink":"/docs/db-prisma/prisma Promise lazy evaluation","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"prisma ERD","permalink":"/docs/db-prisma/prisma ERD"},"next":{"title":"prisma accelerate cache","permalink":"/docs/db-prisma/prisma accelerate cache"}}');var i=t(447259),s=t(529087);const n={},o="prisma Promise lazy evaluation",c={},l=[];function m(e){const a={blockquote:"blockquote",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(a.header,{children:(0,i.jsx)(a.h1,{id:"prisma-promise-lazy-evaluation",children:"prisma Promise lazy evaluation"})}),"\n",(0,i.jsxs)(a.blockquote,{children:["\n",(0,i.jsx)(a.p,{children:"prisma\uc758 create, update\ub294 Lazy Evaluation\uc744 \uc0ac\uc6a9\ud55c\ub2e4."}),"\n",(0,i.jsxs)(a.blockquote,{children:["\n",(0,i.jsx)(a.p,{children:"\uc989 await, then, catch\ub97c \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc73c\uba74 \uc2e4\ud589\ub418\uc9c0 \uc54a\ub294\ub2e4."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-sh",children:"This happens because Prisma queries are then-ables, meaning they only execute when you call await or .then() or .catch(). This is called lazy evaluation. This is different than a regular promise which starts executing immediately. There's an issue in the Prisma docs repository about this which you can check out for more information.\r\n\r\nHow to implement: Check out this library: https://github.com/sindresorhus/p-lazy\n"})})]})}function u(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,i.jsx)(a,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}},529087:(e,a,t)=>{t.d(a,{R:()=>n,x:()=>o});var r=t(596363);const i={},s=r.createContext(i);function n(e){const a=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function o(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:n(e.components),r.createElement(s.Provider,{value:a},e.children)}}}]);