"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([["141167"],{575506:function(e,t,n){n.r(t),n.d(t,{frontMatter:()=>i,toc:()=>l,default:()=>u,metadata:()=>s,assets:()=>c,contentTitle:()=>o});var s=JSON.parse('{"id":"testing/testing nestjs automock lib","title":"testing automock","description":"install","source":"@site/docs/testing/testing nestjs automock lib.md","sourceDirName":"testing","slug":"/testing/testing nestjs automock lib","permalink":"/docs/testing/testing nestjs automock lib","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"nest testing TestBed","permalink":"/docs/testing/testing nestjs TestBed"},"next":{"title":"testing nestjs guard","permalink":"/docs/testing/testing nestjs guard"}}'),a=n(447259),r=n(255511);let i={},o="testing automock",c={},l=[{value:"install",id:"install",level:2},{value:"usage",id:"usage",level:2}];function d(e){let t={code:"code",h1:"h1",h2:"h2",header:"header",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"testing-automock",children:"testing automock"})}),"\n",(0,a.jsx)(t.h2,{id:"install",children:"install"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-sh",children:"# jest\r\nnpm i -D @automock/jest\r\nnpm i -D @automock/adapters.nestjs\r\n\r\n# sinon\r\nnpm i -D @automock/sinon\r\nnpm i -D @automock/adapters.nestjs\n"})}),"\n",(0,a.jsx)(t.h2,{id:"usage",children:"usage"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'import { TestBed } from "@automock/jest";\r\n\r\ndescribe("Cats Service Unit Test", () => {\r\n  let catsService: CatsService;\r\n  let database: jest.Mocked<Database>;\r\n\r\n  beforeAll(() => {\r\n    const { unit, unitRef } = TestBed.create(CatsService).compile();\r\n\r\n    catsService = unit;\r\n    database = unitRef.get(Database);\r\n  });\r\n\r\n  it("should retrieve cats from the database", async () => {\r\n    const mockCats: Cat[] = [\r\n      { id: 1, name: "Catty" },\r\n      { id: 2, name: "Mitzy" },\r\n    ];\r\n    database.getCats.mockResolvedValue(mockCats);\r\n\r\n    const cats = await catsService.getAllCats();\r\n\r\n    expect(database.getCats).toHaveBeenCalled();\r\n    expect(cats).toEqual(mockCats);\r\n  });\r\n});\n'})})]})}function u(e={}){let{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},255511:function(e,t,n){n.d(t,{R:()=>i,x:()=>o});var s=n(596363);let a={},r=s.createContext(a);function i(e){let t=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);