"use strict";(globalThis.webpackChunkmy_blog=globalThis.webpackChunkmy_blog||[]).push([[601129],{529087:(e,t,a)=>{a.d(t,{R:()=>s,x:()=>i});var n=a(596363);const r={},c=n.createContext(r);function s(e){const t=n.useContext(c);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),n.createElement(c.Provider,{value:t},e.children)}},589755:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"c++/c++ base template variadic template - \uac00\ubcc0 \uae38\uc774 \ud15c\ud50c\ub9bf","title":"c++ base template variadic template (\uac00\ubcc0 \uae38\uc774 \ud15c\ud50c\ub9bf)","description":"typename... \ub97c \uc0ac\uc6a9\ud558\uc5ec \uac00\ubcc0 \uae38\uc774 \ud15c\ud50c\ub9bf\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4.","source":"@site/docs/c++/c++ base template variadic template - \uac00\ubcc0 \uae38\uc774 \ud15c\ud50c\ub9bf.md","sourceDirName":"c++","slug":"/c++/c++ base template variadic template - \uac00\ubcc0 \uae38\uc774 \ud15c\ud50c\ub9bf","permalink":"/docs/c++/c++ base template variadic template - \uac00\ubcc0 \uae38\uc774 \ud15c\ud50c\ub9bf","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"c++ generic template meta programming (\uba54\ud0c0 \ud504\ub85c\uadf8\ub798\ubc0d)","permalink":"/docs/c++/c++ base template TMP - template meta programming"},"next":{"title":"c++ base template variadic template fold expression","permalink":"/docs/c++/c++ base template variadic template fold expression"}}');var r=a(447259),c=a(529087);const s={},i="c++ base template variadic template (\uac00\ubcc0 \uae38\uc774 \ud15c\ud50c\ub9bf)",o={},l=[];function p(e){const t={blockquote:"blockquote",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"c-base-template-variadic-template-\uac00\ubcc0-\uae38\uc774-\ud15c\ud50c\ub9bf",children:"c++ base template variadic template (\uac00\ubcc0 \uae38\uc774 \ud15c\ud50c\ub9bf)"})}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsx)(t.p,{children:"typename... \ub97c \uc0ac\uc6a9\ud558\uc5ec \uac00\ubcc0 \uae38\uc774 \ud15c\ud50c\ub9bf\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4."}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsx)(t.p,{children:"Types... \ub85c \uc0ac\uc6a9\ud55c\ub2e4."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cpp",children:'template <typename T, typename... Types>\r\nvoid print(T arg, Types... args) {\r\n  std::cout << arg << ", ";\r\n  print(args...);\r\n}\r\n\r\n// Fold expression\r\ntemplate <typename... Ints>\r\nint sum_all(Ints... nums) {\r\n  return (... + nums);\r\n}\n'})})]})}function m(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}}}]);