"use strict";(globalThis.webpackChunkmy_blog=globalThis.webpackChunkmy_blog||[]).push([[836809],{529087:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var r=t(596363);const i={},a=r.createContext(i);function o(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(a.Provider,{value:n},e.children)}},840658:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"db-prisma/prisma relation many to many","title":"prisma relation many to many junction table","description":"explicit","source":"@site/docs/db-prisma/prisma relation many to many.md","sourceDirName":"db-prisma","slug":"/db-prisma/prisma relation many to many","permalink":"/docs/db-prisma/prisma relation many to many","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"prisma inheritance \uc0c1\uc18d","permalink":"/docs/db-prisma/prisma relation inheritance \uc0c1\uc18d"},"next":{"title":"prisma relation name","permalink":"/docs/db-prisma/prisma relation name"}}');var i=t(447259),a=t(529087);const o={},s="prisma relation many to many junction table",l={},c=[{value:"explicit",id:"explicit",level:2},{value:"implicit",id:"implicit",level:2}];function d(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"prisma-relation-many-to-many-junction-table",children:"prisma relation many to many junction table"})}),"\n",(0,i.jsx)(n.h2,{id:"explicit",children:"explicit"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-prisma",children:"model Post {\r\n  id         Int                 @id @default(autoincrement())\r\n  title      String\r\n  categories CategoriesOnPosts[]\r\n}\r\n\r\nmodel Category {\r\n  id    Int                 @id @default(autoincrement())\r\n  name  String\r\n  posts CategoriesOnPosts[]\r\n}\r\n\r\nmodel CategoriesOnPosts {\r\n  post       Post     @relation(fields: [postId], references: [id])\r\n  postId     Int // relation scalar field (used in the `@relation` attribute above)\r\n  category   Category @relation(fields: [categoryId], references: [id])\r\n  categoryId Int // relation scalar field (used in the `@relation` attribute above)\r\n  assignedAt DateTime @default(now())\r\n  assignedBy String\r\n\r\n  @@id([postId, categoryId])\r\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"implicit",children:"implicit"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"join \ud14c\uc774\ube14\uc740 _PostToCategory \ub77c\ub294 \uc774\ub984\uc73c\ub85c \uc0dd\uc131\ub41c\ub2e4."}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-prisma",children:"model Post {\r\n  id         Int        @id @default(autoincrement())\r\n  title      String\r\n  categories Category[]\r\n}\r\n\r\nmodel Category {\r\n  id    Int    @id @default(autoincrement())\r\n  name  String\r\n  posts Post[]\r\n}\n"})})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);