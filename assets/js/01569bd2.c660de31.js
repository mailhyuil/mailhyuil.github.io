"use strict";(globalThis.webpackChunkmy_blog=globalThis.webpackChunkmy_blog||[]).push([[55260],{119449:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"docker/docker-compose yaml letsencrypt certbot","title":"Docker image letsencrypt certbot","description":"\ucd5c\ucd08 \ud55c\ubc88\uc740 init-letsencrypt.sh\ub85c \uc2e4\ud589\uc2dc\ucf1c\uc8fc\uae30","source":"@site/docs/docker/docker-compose yaml letsencrypt certbot.md","sourceDirName":"docker","slug":"/docker/docker-compose yaml letsencrypt certbot","permalink":"/docs/docker/docker-compose yaml letsencrypt certbot","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"docker-compose kafka","permalink":"/docs/docker/docker-compose yaml kafka"},"next":{"title":"docker compose openvpn","permalink":"/docs/docker/docker-compose yaml openvpn"}}');var o=r(447259),c=r(529087);const i={},s="Docker image letsencrypt certbot",a={},l=[{value:"docker-compose.yaml",id:"docker-composeyaml",level:2},{value:"nginx.conf",id:"nginxconf",level:2},{value:"init-letsencrypt.sh",id:"init-letsencryptsh",level:2}];function d(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"docker-image-letsencrypt-certbot",children:"Docker image letsencrypt certbot"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"\ucd5c\ucd08 \ud55c\ubc88\uc740 init-letsencrypt.sh\ub85c \uc2e4\ud589\uc2dc\ucf1c\uc8fc\uae30"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"docker-composeyaml",children:"docker-compose.yaml"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:'services:\r\n  nginx:\r\n    container_name: nginx\r\n    image: nginx\r\n    volumes:\r\n      - ./certbot/www:/var/www/certbot\r\n      - ./certbot/conf:/etc/letsencrypt\r\n    ports:\r\n      - "80:80"\r\n      - "443:443"\r\n    restart: always\r\n    networks:\r\n      - public\r\n\r\n  certbot:\r\n    container_name: certbot\r\n    image: certbot/certbot\r\n    restart: unless-stopped\r\n    volumes:\r\n      - ./certbot/conf:/etc/letsencrypt\r\n      - ./certbot/www:/var/www/certbot\r\n    entrypoint: "/bin/sh -c \'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;\'"\r\n\r\nnetworks:\r\n  public:\r\n    driver: bridge\n'})}),"\n",(0,o.jsx)(n.h2,{id:"nginxconf",children:"nginx.conf"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-conf",children:"server {\r\n    server_name example.com;\r\n    listen 80;\r\n    listen [::]:80;\r\n\r\n    location /.well-known/acme-challenge/ {\r\n        allow all;\r\n        root /var/www/certbot;\r\n    }\r\n\r\n    # \ucd5c\ucd08 certbot \uc2e4\ud589\uc2dc\uc5d0\ub9cc \uc0ac\uc6a9 \ud6c4 \uc81c\uac70\r\n    location / {\r\n        root /usr/share/nginx/html;\r\n        index index.html;\r\n        try_files $uri $uri/ /index.html =404;\r\n    }\r\n\r\n    return 301 https://$host$request_uri;\r\n}\r\n\r\nserver {\r\n    listen 443 ssl;\r\n    listen [::]:443 ssl;\r\n    server_name example.com;\r\n    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;\r\n    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;\r\n    ssl_trusted_certificate /etc/letsencrypt/live/example.com/chain.pem;\r\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\r\n\r\n    location / {\r\n        root /usr/share/nginx/html;\r\n        index index.html;\r\n        try_files $uri $uri/ /index.html =404;\r\n    }\r\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"init-letsencryptsh",children:"init-letsencrypt.sh"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:'#!/bin/bash\r\n\r\nif ! [ -x "$(command -v docker)" ]; then\r\n  echo \'Error: docker is not installed.\' >&2\r\n  exit 1\r\nfi\r\n\r\ndomains="example.com"\r\nemail="mailhyuil@gmail.com" # Adding a valid address is strongly recommended\r\ndata_path="./certbot"\r\nrsa_key_size=4096\r\nstaging=0 # Set to 1 if you\'re testing your setup to avoid hitting request limits\r\n\r\nif [ -d "$data_path" ]; then\r\n  read -p "Existing data found for $domains. Continue and replace existing certificate? (y/N) " decision\r\n  if [ "$decision" != "Y" ] && [ "$decision" != "y" ]; then\r\n    exit\r\n  fi\r\nfi\r\n\r\n\r\nif [ ! -e "$data_path/conf/options-ssl-nginx.conf" ] || [ ! -e "$data_path/conf/ssl-dhparams.pem" ]; then\r\n  echo "### Downloading recommended TLS parameters ..."\r\n  mkdir -p "$data_path/conf"\r\n  curl -s https://raw.githubusercontent.com/certbot/certbot/master/certbot-nginx/certbot_nginx/_internal/tls_configs/options-ssl-nginx.conf > "$data_path/conf/options-ssl-nginx.conf"\r\n  curl -s https://raw.githubusercontent.com/certbot/certbot/master/certbot/certbot/ssl-dhparams.pem > "$data_path/conf/ssl-dhparams.pem"\r\n  echo\r\nfi\r\n\r\necho "### Creating dummy certificate for $domains ..."\r\npath="/etc/letsencrypt/live/$domains"\r\nmkdir -p "$data_path/conf/live/$domains"\r\ndocker compose run --rm --entrypoint "\\\r\n  openssl req -x509 -nodes -newkey rsa:$rsa_key_size -days 1\\\r\n    -keyout \'$path/privkey.pem\' \\\r\n    -out \'$path/fullchain.pem\' \\\r\n    -subj \'/CN=localhost\'" certbot\r\necho\r\n\r\n\r\necho "### Starting nginx ..."\r\ndocker compose up --force-recreate -d nginx\r\necho\r\n\r\necho "### Deleting dummy certificate for $domains ..."\r\ndocker compose run --rm --entrypoint "\\\r\n  rm -Rf /etc/letsencrypt/live/$domains && \\\r\n  rm -Rf /etc/letsencrypt/archive/$domains && \\\r\n  rm -Rf /etc/letsencrypt/renewal/$domains.conf" certbot\r\necho\r\n\r\n\r\necho "### Requesting Let\'s Encrypt certificate for $domains ..."\r\n#Join $domains to -d args\r\ndomain_args=""\r\nfor domain in "${domains[@]}"; do\r\n  domain_args="$domain_args -d $domain"\r\ndone\r\n\r\n# Select appropriate email arg\r\ncase "$email" in\r\n  "") email_arg="--register-unsafely-without-email" ;;\r\n  *) email_arg="--email $email" ;;\r\nesac\r\n\r\n# Enable staging mode if needed\r\nif [ $staging != "0" ]; then staging_arg="--staging"; fi\r\n\r\ndocker compose run --rm --entrypoint "\\\r\n  certbot certonly --webroot -w /var/www/certbot \\\r\n    $staging_arg \\\r\n    $email_arg \\\r\n    $domain_args \\\r\n    --rsa-key-size $rsa_key_size \\\r\n    --agree-tos \\\r\n    --force-renewal" certbot\r\necho\r\n\r\necho "### Reloading nginx ..."\r\ndocker compose exec nginx nginx -s reload\n'})})]})}function m(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},529087:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>s});var t=r(596363);const o={},c=t.createContext(o);function i(e){const n=t.useContext(c);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(c.Provider,{value:n},e.children)}}}]);