"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([["966659"],{538311:function(r,t,e){e.r(t),e.d(t,{frontMatter:()=>s,toc:()=>c,default:()=>g,metadata:()=>n,assets:()=>l,contentTitle:()=>a});var n=JSON.parse('{"id":"go/go http2","title":"go http2","description":"","source":"@site/docs/go/go http2.md","sourceDirName":"go","slug":"/go/go http2","permalink":"/docs/go/go http2","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"go http","permalink":"/docs/go/go http"},"next":{"title":"go http3 quic-go","permalink":"/docs/go/go http3 quic-go"}}'),o=e(447259),i=e(255511);let s={},a="go http2",l={},c=[];function p(r){let t={code:"code",h1:"h1",header:"header",pre:"pre",...(0,i.R)(),...r.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"go-http2",children:"go http2"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-go",children:'package main\r\n\r\nimport (\r\n	"crypto/tls"\r\n	"crypto/x509"\r\n	"flag"\r\n	"fmt"\r\n	"io/ioutil"\r\n	"log"\r\n	"net/http"\r\n\r\n	"golang.org/x/net/http2"\r\n)\r\n\r\nconst url = "https://localhost:8000"\r\n\r\nvar httpVersion = flag.Int("version", 2, "HTTP version")\r\n\r\nfunc main() {\r\n	flag.Parse()\r\n	client := &http.Client{}\r\n\r\n	// Create a pool with the server certificate since it is not signed\r\n	// by a known CA\r\n	caCert, err := ioutil.ReadFile("server.crt")\r\n	if err != nil {\r\n		log.Fatalf("Reading server certificate: %s", err)\r\n	}\r\n	caCertPool := x509.NewCertPool()\r\n	caCertPool.AppendCertsFromPEM(caCert)\r\n\r\n	// Create TLS configuration with the certificate of the server\r\n	tlsConfig := &tls.Config{\r\n		RootCAs: caCertPool,\r\n	}\r\n\r\n	// Use the proper transport in the client\r\n	switch *httpVersion {\r\n	case 1:\r\n		client.Transport = &http.Transport{\r\n			TLSClientConfig: tlsConfig,\r\n		}\r\n	case 2:\r\n		client.Transport = &http2.Transport{\r\n			TLSClientConfig: tlsConfig,\r\n		}\r\n	}\r\n\r\n	// Perform the request\r\n	resp, err := client.Get(url)\r\n	if err != nil {\r\n		log.Fatalf("Failed get: %s", err)\r\n	}\r\n	defer resp.Body.Close()\r\n	body, err := ioutil.ReadAll(resp.Body)\r\n	if err != nil {\r\n		log.Fatalf("Failed reading response body: %s", err)\r\n	}\r\n	fmt.Printf(\r\n		"Got response %d: %s %s\\n",\r\n		resp.StatusCode, resp.Proto, string(body))\r\n}\n'})})]})}function g(r={}){let{wrapper:t}={...(0,i.R)(),...r.components};return t?(0,o.jsx)(t,{...r,children:(0,o.jsx)(p,{...r})}):p(r)}},255511:function(r,t,e){e.d(t,{R:()=>s,x:()=>a});var n=e(596363);let o={},i=n.createContext(o);function s(r){let t=n.useContext(i);return n.useMemo(function(){return"function"==typeof r?r(t):{...t,...r}},[t,r])}function a(r){let t;return t=r.disableParentContext?"function"==typeof r.components?r.components(o):r.components||o:s(r.components),n.createElement(i.Provider,{value:t},r.children)}}}]);