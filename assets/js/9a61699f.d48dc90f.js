"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([["933265"],{181836:function(n,e,a){a.r(e),a.d(e,{frontMatter:()=>o,toc:()=>i,default:()=>u,metadata:()=>l,assets:()=>c,contentTitle:()=>s});var l=JSON.parse('{"id":"nodejs/nodejs race condition","title":"nodejs race condition","description":"nodejs\uB294 \uC790\uBC14\uC2A4\uD06C\uB9BD\uD2B8(cpu)\uB97C \uC2F1\uAE00 \uC2A4\uB808\uB4DC\uC5D0\uC11C \uB3CC\uB9AC\uAE30 \uB54C\uBB38\uC5D0 \uC5F0\uC0B0\uC73C\uB85C \uC778\uD55C race condition \uBC84\uADF8\uB294 \uBC1C\uC0DD\uD558\uC9C0 \uC54A\uB294\uB2E4.","source":"@site/docs/nodejs/nodejs race condition.md","sourceDirName":"nodejs","slug":"/nodejs/nodejs race condition","permalink":"/docs/nodejs/nodejs race condition","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"mutex vs distributed-lock","permalink":"/docs/nodejs/nodejs race condition mutex vs distributed-lock"},"next":{"title":"nodejs redis","permalink":"/docs/nodejs/nodejs redis"}}'),r=a(447259),t=a(255511);let o={},s="nodejs race condition",c={},i=[{value:"problem",id:"problem",level:2},{value:"solution",id:"solution",level:2},{value:"install",id:"install",level:3}];function d(n){let e={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,t.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"nodejs-race-condition",children:"nodejs race condition"})}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"nodejs\uB294 \uC790\uBC14\uC2A4\uD06C\uB9BD\uD2B8(cpu)\uB97C \uC2F1\uAE00 \uC2A4\uB808\uB4DC\uC5D0\uC11C \uB3CC\uB9AC\uAE30 \uB54C\uBB38\uC5D0 \uC5F0\uC0B0\uC73C\uB85C \uC778\uD55C race condition \uBC84\uADF8\uB294 \uBC1C\uC0DD\uD558\uC9C0 \uC54A\uB294\uB2E4."}),"\n",(0,r.jsxs)(e.blockquote,{children:["\n",(0,r.jsx)(e.p,{children:"\uD558\uC9C0\uB9CC \uBE44\uB3D9\uAE30 task(I/O)\uB97C \uBC31\uADF8\uB77C\uC6B4\uB4DC \uBA40\uD2F0 \uC2A4\uB808\uB4DC\uC5D0\uC11C \uB3CC\uB9AC\uAE30 \uB54C\uBB38\uC5D0 \uC21C\uC11C\uB85C \uC778\uD55C race condition \uBC84\uADF8\uAC00 \uBC1C\uC0DD\uD560 \uC218 \uC788\uB2E4."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"problem",children:"problem"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"// Utility function to simulate some delay (e.g. reading from or writing to a database).\r\n// It will take from 0 to 50ms in a random fashion.\r\nconst randomDelay = () => new Promise((resolve) => setTimeout(resolve, Math.random() * 100));\r\n\r\n// Our global balance.\r\n// In a more complete implementation, this will live in the persistent data storage.\r\nlet balance = 0;\r\n\r\nasync function loadBalance() {\r\n  // simulates random delay to retrieve data from data storage\r\n  await randomDelay();\r\n  return balance;\r\n}\r\n\r\nasync function saveBalance(value) {\r\n  // simulates random delay to write the data to the data storage\r\n  await randomDelay();\r\n  balance = value;\r\n}\r\n\r\nasync function sellGrapes() {\r\n  const balance = await loadBalance();\r\n  console.log(`sellGrapes - balance loaded: ${balance}`);\r\n  const newBalance = balance + 50;\r\n  await saveBalance(newBalance);\r\n  console.log(`sellGrapes - balance updated: ${newBalance}`);\r\n}\r\n\r\nasync function sellOlives() {\r\n  const balance = await loadBalance();\r\n  console.log(`sellOlives - balance loaded: ${balance}`);\r\n  const newBalance = balance + 50;\r\n  await saveBalance(newBalance);\r\n  console.log(`sellOlives - balance updated: ${newBalance}`);\r\n}\r\n\r\nasync function main() {\r\n  const transaction1 = sellGrapes(); // NOTE: no `await`\r\n  const transaction2 = sellOlives(); // NOTE: no `await`\r\n  await transaction1; // NOTE: awaiting here does not stop `transaction2`\r\n  // from being scheduled before transaction 1 is completed\r\n  await transaction2;\r\n  const balance = await loadBalance();\r\n  console.log(`Final balance: ${balance}`);\r\n}\r\n\r\nmain();\n"})}),"\n",(0,r.jsx)(e.h2,{id:"solution",children:"solution"}),"\n",(0,r.jsx)(e.h3,{id:"install",children:"install"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-sh",children:"npm i async-mutex\n"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:'import { Mutex } from "async-mutex";\r\n\r\nconst randomDelay = () => {\r\n  /* ... */\r\n};\r\n\r\nlet balance = 0;\r\nconst mutex = new Mutex(); // global mutex instance\r\n\r\nasync function loadBalance() {\r\n  /* ... */\r\n}\r\nasync function saveBalance(value) {\r\n  /* ... */\r\n}\r\n\r\nasync function sellGrapes() {\r\n  // this code will need exclusive access to the balance\r\n  // so we consider this to be a critical path\r\n  const release = await mutex.acquire(); // get access to the critical path (or wait in line)\r\n  try {\r\n    const balance = await loadBalance();\r\n    console.log(`sellGrapes - balance loaded: ${balance}`);\r\n    const newBalance = balance + 50;\r\n    await saveBalance(newBalance);\r\n    console.log(`sellGrapes - balance updated: ${newBalance}`);\r\n  } finally {\r\n    release(); // completes work on the critical path\r\n  }\r\n}\r\n\r\nasync function sellOlives() {\r\n  // similar to `sellGrapes` this is a critical path because\r\n  // it needs exclusive access to balance\r\n  const release = await mutex.acquire();\r\n  try {\r\n    const balance = await loadBalance();\r\n    console.log(`sellOlives - balance loaded: ${balance}`);\r\n    const newBalance = balance + 50;\r\n    await saveBalance(newBalance);\r\n    console.log(`sellOlives - balance updated: ${newBalance}`);\r\n  } finally {\r\n    release();\r\n  }\r\n}\r\n\r\nasync function main() {\r\n  // Here we can call many events safely, the mutex will guarantee that the\r\n  // competing events are executed in the right order!\r\n  await Promise.all([sellGrapes(), sellOlives(), sellGrapes(), sellOlives(), sellGrapes(), sellOlives()]);\r\n  const balance = await loadBalance();\r\n  console.log(`Final balance: ${balance}`);\r\n}\r\n\r\nmain();\n'})})]})}function u(n={}){let{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(d,{...n})}):d(n)}},255511:function(n,e,a){a.d(e,{R:()=>o,x:()=>s});var l=a(596363);let r={},t=l.createContext(r);function o(n){let e=l.useContext(t);return l.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:o(n.components),l.createElement(t.Provider,{value:e},n.children)}}}]);