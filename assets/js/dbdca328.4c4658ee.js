"use strict";(globalThis.webpackChunkmy_blog=globalThis.webpackChunkmy_blog||[]).push([[350492],{529087:(t,n,e)=>{e.d(n,{R:()=>o,x:()=>d});var r=e(596363);const a={},s=r.createContext(a);function o(t){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof t?t(n):{...n,...t}},[n,t])}function d(t){let n;return n=t.disableParentContext?"function"==typeof t.components?t.components(a):t.components||a:o(t.components),r.createElement(s.Provider,{value:n},t.children)}},963207:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>i,contentTitle:()=>d,default:()=>m,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"db/db base snapshot table","title":"db base snapshot","description":"\uc545\uc131\uc720\uc800\ub4f1\uc758 \uc774\uc720\ub85c \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud574\uc57c\ud558\ub294 \uacbd\uc6b0\uac00 \uc788\uc744 \uc218 \uc788\ub2e4. \uc774\ub54c \uc2a4\ub0c5\uc0f7 \ud14c\uc774\ube14\uc744 \uc0ac\uc6a9\ud558\uba74 \uc774\uc804 \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud560 \uc218 \uc788\ub2e4.","source":"@site/docs/db/db base snapshot table.md","sourceDirName":"db","slug":"/db/db base snapshot table","permalink":"/docs/db/db base snapshot table","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"shadow database","permalink":"/docs/db/db base shadow database"},"next":{"title":"db base storage concepts","permalink":"/docs/db/db base storage concepts"}}');var a=e(447259),s=e(529087);const o={},d="db base snapshot",i={},c=[{value:"service",id:"service",level:2}];function p(t){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...t.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"db-base-snapshot",children:"db base snapshot"})}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"\uc545\uc131\uc720\uc800\ub4f1\uc758 \uc774\uc720\ub85c \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud574\uc57c\ud558\ub294 \uacbd\uc6b0\uac00 \uc788\uc744 \uc218 \uc788\ub2e4. \uc774\ub54c \uc2a4\ub0c5\uc0f7 \ud14c\uc774\ube14\uc744 \uc0ac\uc6a9\ud558\uba74 \uc774\uc804 \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud560 \uc218 \uc788\ub2e4."}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"\uc720\uc800\uac00 update, delete\ud560 \uc218 \uc788\ub294 \ub370\uc774\ud130\uc5d0 \ub300\ud574\uc11c \uc2a4\ub0c5\uc0f7 \ud14c\uc774\ube14\uc744 \uc0dd\uc131\ud55c\ub2e4."}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"\uc720\uc800\uac00 update, delete \uc2dc \ud604\uc7ac \ub370\uc774\ud130\ub97c \uc2a4\ub0c5\uc0f7 \ud14c\uc774\ube14\uc5d0 \uc800\uc7a5\ud55c\ub2e4."}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsx)(n.p,{children:"soft delete\ub97c \ub300\uc2e0\ud560 \uc218 \uc788\ub2e4."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-prisma",children:'model Post {\r\n    id    String      @id @default(cuid())\r\n    title String\r\n    content String\r\n    createdAt DateTime @default(now()) @map("created_at")\r\n    updatedAt DateTime @updatedAt @map("updated_at")\r\n    comments Comment[]\r\n    snapshots PostSnapshot[]\r\n    @@map("posts")\r\n}\r\n\r\nmodel PostSnapshot {\r\n    id    String      @id @default(cuid())\r\n    title String\r\n    content String\r\n    createdAt DateTime @map("created_at")\r\n    postId String\r\n    post Post @relation(fields: [postId], references: [id])\r\n    attachments AttachmentSnapshot[]\r\n    @@map("post_snapshots")\r\n}\r\n\r\nmodel Comment {\r\n    id    String      @id @default(cuid())\r\n    content String\r\n    createdAt DateTime @default(now()) @map("created_at")\r\n    updatedAt DateTime @updatedAt @map("updated_at")\r\n    postId String\r\n    post Post @relation(fields: [postId], references: [id])\r\n    snapshots CommentSnapshot[]\r\n    @@map("comments")\r\n}\r\n\r\nmodel CommentSnapshot {\r\n    id    String      @id @default(cuid())\r\n    content String\r\n    createdAt DateTime @default(now()) @map("created_at")\r\n    commentId String\r\n    comment Comment @relation(fields: [commentId], references: [id])\r\n    attachments AttachmentSnapshot[]\r\n    @@map("comment_snapshots")\r\n}\r\n\r\nmodel Attachment {\r\n    id    String      @id @default(cuid())\r\n    name  String\r\n    url   String\r\n    extension String?\r\n    createdAt DateTime @default(now()) @map("created_at")\r\n    snapshots AttachmentSnapshot[]\r\n    @@map("attachments")\r\n}\r\n\r\nmodel AttachmentSnapshot {\r\n    id    String      @id @default(cuid())\r\n    name  String\r\n    url   String\r\n    extension String?\r\n    createdAt DateTime @default(now()) @map("created_at")\r\n    attachmentId String\r\n    attachment Attachment @relation(fields: [attachmentId], references: [id])\r\n    postSnapshots PostSnapshot[]\r\n    commentSnapshots CommentSnapshot[]\r\n    @@map("attachment_snapshots")\r\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"service",children:"service"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'import { Injectable } from "@nestjs/common";\r\nimport { plainToInstance } from "class-transformer";\r\nimport { PrismaService } from "../../prisma/prisma.service";\r\nimport { CreatePostDto, PostDto, UpdatePostDto } from "./post.dto";\r\n\r\n@Injectable()\r\nexport class PostService {\r\n  constructor(private readonly prisma: PrismaService) {}\r\n  // update \uc2dc\r\n  async update(id: string, data: UpdatePostDto) {\r\n    const updated = await this.prisma.$transaction(async tx => {\r\n      // snapshot table\uc5d0 \uc800\uc7a5\r\n      const found = await tx.post.findUnique({\r\n        where: { id },\r\n      });\r\n      if (!found) {\r\n        throw new Error("not found");\r\n      }\r\n      await tx.postSnapshot.create({\r\n        data: {\r\n          postId: found.id,\r\n          ...found,\r\n        },\r\n      });\r\n      // update\r\n      const updated = await tx.post.update({\r\n        where: { id },\r\n        data,\r\n      });\r\n      return updated;\r\n    });\r\n    return plainToInstance(PostDto, updated);\r\n  }\r\n\r\n  async remove(id: string) {\r\n    await this.prisma.$transaction(async tx => {\r\n      // snapshot table\uc5d0 \uc800\uc7a5\r\n      const found = await tx.post.findUnique({\r\n        where: { id },\r\n      });\r\n      if (!found) {\r\n        throw new Error("not found");\r\n      }\r\n      await tx.postSnapshot.create({\r\n        data: {\r\n          postId: found.id,\r\n          ...found,\r\n        },\r\n      });\r\n      // delete\r\n      await tx.post.delete({\r\n        where: { id },\r\n      });\r\n    });\r\n  }\r\n}\n'})})]})}function m(t={}){const{wrapper:n}={...(0,s.R)(),...t.components};return n?(0,a.jsx)(n,{...t,children:(0,a.jsx)(p,{...t})}):p(t)}}}]);