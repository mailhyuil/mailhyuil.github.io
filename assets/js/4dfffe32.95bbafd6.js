"use strict";(globalThis.webpackChunkmy_blog=globalThis.webpackChunkmy_blog||[]).push([[447895],{529087:(r,e,t)=>{t.d(e,{R:()=>a,x:()=>l});var n=t(596363);const o={},s=n.createContext(o);function a(r){const e=n.useContext(s);return n.useMemo(function(){return"function"==typeof r?r(e):{...e,...r}},[e,r])}function l(r){let e;return e=r.disableParentContext?"function"==typeof r.components?r.components(o):r.components||o:a(r.components),n.createElement(s.Provider,{value:e},r.children)}},618725:(r,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>n,toc:()=>i});const n=JSON.parse('{"id":"react & nextjs/next base error global-error.tsx","title":"next base error global-error.tsx","description":"app/global-error.tsx","source":"@site/docs/react & nextjs/next base error global-error.tsx.md","sourceDirName":"react & nextjs","slug":"/react & nextjs/next base error global-error.tsx","permalink":"/docs/react & nextjs/next base error global-error.tsx","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"next base error comp/error.tsx","permalink":"/docs/react & nextjs/next base error error.tsx"},"next":{"title":"next base loading","permalink":"/docs/react & nextjs/next base loading.ts"}}');var o=t(447259),s=t(529087);const a={},l="next base error global-error.tsx",c={},i=[{value:"app/global-error.tsx",id:"appglobal-errortsx",level:2}];function x(r){const e={code:"code",h1:"h1",h2:"h2",header:"header",pre:"pre",...(0,s.R)(),...r.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"next-base-error-global-errortsx",children:"next base error global-error.tsx"})}),"\n",(0,o.jsx)(e.h2,{id:"appglobal-errortsx",children:"app/global-error.tsx"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-tsx",children:'"use client"; // Error boundaries must be Client Components\r\n\r\nexport default function GlobalError({ error, reset }: { error: Error & { digest?: string }; reset: () => void }) {\r\n  return (\r\n    // global-error must include html and body tags\r\n    <html>\r\n      <body>\r\n        <h2>Something went wrong!</h2>\r\n        <button onClick={() => reset()}>Try again</button>\r\n      </body>\r\n    </html>\r\n  );\r\n}\n'})})]})}function d(r={}){const{wrapper:e}={...(0,s.R)(),...r.components};return e?(0,o.jsx)(e,{...r,children:(0,o.jsx)(x,{...r})}):x(r)}}}]);