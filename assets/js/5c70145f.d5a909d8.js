"use strict";(globalThis.webpackChunkmy_blog=globalThis.webpackChunkmy_blog||[]).push([[856556],{529087:(n,e,t)=>{t.d(e,{R:()=>i,x:()=>s});var r=t(596363);const o={},c=r.createContext(o);function i(n){const e=r.useContext(c);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:i(n.components),r.createElement(c.Provider,{value:e},n.children)}},621908:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>u,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"nuxtjs/v-count-increment","title":"v-count-increment","description":"plugins","source":"@site/docs/nuxtjs/v-count-increment.md","sourceDirName":"nuxtjs","slug":"/nuxtjs/v-count-increment","permalink":"/docs/nuxtjs/v-count-increment","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"ohmyfetch","permalink":"/docs/nuxtjs/ohmyfetch"},"next":{"title":"vee-validate resetForm","permalink":"/docs/nuxtjs/vee-validate resetForm"}}');var o=t(447259),c=t(529087);const i={},s="v-count-increment",u={},l=[{value:"plugins",id:"plugins",level:2},{value:"usage",id:"usage",level:2}];function a(n){const e={code:"code",h1:"h1",h2:"h2",header:"header",pre:"pre",...(0,c.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"v-count-increment",children:"v-count-increment"})}),"\n",(0,o.jsx)(e.h2,{id:"plugins",children:"plugins"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"import { Directive } from \"nuxt/dist/app/compat/capi\"\r\n\r\nexport default defineNuxtPlugin((nuxtapp) => {\r\n    nuxtapp.vueApp.directive('count-increment', <Directive<HTMLElement, number>>{\r\n        mounted(el, { value }) {\r\n\r\n            value = Math.round(value);\r\n\r\n            if (!value) {\r\n                el.innerHTML = '0';\r\n                return;\r\n            }\r\n\r\n            let now = value;\r\n            const count = setInterval(() => {\r\n                el.innerHTML = Math.ceil(value - now).toString();\r\n\r\n                if (now < 1) {\r\n                    clearInterval(count);\r\n                }\r\n\r\n                const step = now / 10;\r\n\r\n                now -= step;\r\n            }, 25);\r\n        }\r\n    })\r\n})\n"})}),"\n",(0,o.jsx)(e.h2,{id:"usage",children:"usage"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:'<h1 v-count-increment="after.total">0</h1>\n'})})]})}function d(n={}){const{wrapper:e}={...(0,c.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(a,{...n})}):a(n)}}}]);