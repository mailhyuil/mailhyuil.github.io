"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([["698570"],{6506:function(e,t,r){r.r(t),r.d(t,{frontMatter:()=>o,toc:()=>c,default:()=>d,metadata:()=>n,assets:()=>a,contentTitle:()=>i});var n=JSON.parse('{"id":"nestjs/nest file upload multer-s3","title":"nest multer-s3","description":"\uADF8\uB0E5 @aws-sdk/client-s3\uB97C \uC0AC\uC6A9\uD558\uC790","source":"@site/docs/nestjs/nest file upload multer-s3.md","sourceDirName":"nestjs","slug":"/nestjs/nest file upload multer-s3","permalink":"/docs/nestjs/nest file upload multer-s3","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"nest file upload Image","permalink":"/docs/nestjs/nest file upload Image - aws s3"},"next":{"title":"nest file upload (multer)","permalink":"/docs/nestjs/nest file upload multer"}}'),s=r(447259),l=r(255511);let o={},i="nest multer-s3",a={},c=[{value:"install",id:"install",level:2},{value:"multer-s3.factory.ts",id:"multer-s3factoryts",level:2},{value:"multer-s3.type.ts",id:"multer-s3typets",level:2},{value:"aws-s3.module.ts",id:"aws-s3modulets",level:2},{value:"file.controller.ts",id:"filecontrollerts",level:2}];function u(e){let t={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"nest-multer-s3",children:"nest multer-s3"})}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsx)(t.p,{children:"\uADF8\uB0E5 @aws-sdk/client-s3\uB97C \uC0AC\uC6A9\uD558\uC790"}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"install",children:"install"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"npm i multer-s3\n"})}),"\n",(0,s.jsx)(t.h2,{id:"multer-s3factoryts",children:"multer-s3.factory.ts"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:'import { S3Client } from "@aws-sdk/client-s3";\r\nimport { MulterOptions } from "@nestjs/platform-express/multer/interfaces/multer-options.interface";\r\nimport multerS3 from "multer-s3";\r\nimport path from "path";\r\n\r\nexport const multerOptionsFactory = (): MulterOptions => {\r\n  const s3 = new S3Client({\r\n    region: process.env["AWS_REGION"],\r\n    credentials: {\r\n      accessKeyId: process.env["AWS_ACCESS_KEY_ID"],\r\n      secretAccessKey: process.env["AWS_SECRET_ACCESS_KEY"],\r\n    },\r\n  });\r\n\r\n  return {\r\n    storage: multerS3({\r\n      s3,\r\n      acl: "public-read",\r\n      contentType: multerS3.AUTO_CONTENT_TYPE,\r\n      bucket: process.env["AWS_S3_BUCKET_NAME"],\r\n      key(_req, file, done) {\r\n        const ext = path.extname(file.originalname);\r\n        const basename = path.basename(file.originalname, ext);\r\n        done(null, `${basename}_${Date.now()}${ext}`);\r\n      },\r\n    }),\r\n    // limits: { fileSize: 10 * 1024 * 1024 },\r\n  };\r\n};\n'})}),"\n",(0,s.jsx)(t.h2,{id:"multer-s3typets",children:"multer-s3.type.ts"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:"export type MulterS3File = {\r\n  size: number; // Size of the file in bytes\r\n  bucket: string; // The bucket used to store the file (S3Storage)\r\n  key: string; // The name of the file (S3Storage)\r\n  acl: string; // Access control for the file (S3Storage)\r\n  contentType: string; // The mimetype used to upload the file (S3Storage)\r\n  metadata?: Record<string, any>; // The metadata object to be sent to S3 (S3Storage)\r\n  location: string; // The S3 URL to access the file (S3Storage)\r\n  etag: string; // The etag of the uploaded file in S3 (S3Storage)\r\n  contentDisposition?: string | null; // The contentDisposition used to upload the file (S3Storage)\r\n  storageClass: string; // The storageClass to be used for the uploaded file in S3 (S3Storage)\r\n  versionId?: string; // The versionId is an optional param returned by S3 for versioned buckets. (S3Storage)\r\n  contentEncoding?: string | null; // The contentEncoding used to upload the file (S3Storage)\r\n};\n"})}),"\n",(0,s.jsx)(t.h2,{id:"aws-s3modulets",children:"aws-s3.module.ts"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:'import { Module } from "@nestjs/common";\r\nimport { MulterModule } from "@nestjs/platform-express";\r\nimport { multerS3Factory } from "./multer-s3.factory";\r\n\r\n@Module({\r\n  imports: [\r\n    MulterModule.registerAsync({\r\n      useFactory: multerS3Factory,\r\n    }),\r\n  ],\r\n  controllers: [],\r\n  providers: [],\r\n  exports: [MulterModule],\r\n})\r\nexport class AwsS3Module {}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"filecontrollerts",children:"file.controller.ts"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:'@Controller("files")\r\nexport class FileController {\r\n  @Post()\r\n  @UseInterceptors(FileInterceptor("file"))\r\n  upload(@UploadedFile() file: MulterS3File): Promise<string> {\r\n    return this.fileService.upload(file);\r\n  }\r\n}\n'})})]})}function d(e={}){let{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},255511:function(e,t,r){r.d(t,{R:()=>o,x:()=>i});var n=r(596363);let s={},l=n.createContext(s);function o(e){let t=n.useContext(l);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(l.Provider,{value:t},e.children)}}}]);