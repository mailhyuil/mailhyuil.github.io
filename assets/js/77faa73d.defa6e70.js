"use strict";(globalThis.webpackChunkmy_blog=globalThis.webpackChunkmy_blog||[]).push([[787903],{529087:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>d});var t=n(596363);const s={},a=t.createContext(s);function i(e){const r=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(a.Provider,{value:r},e.children)}},692821:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>u,contentTitle:()=>d,default:()=>l,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"x design pattern/x event sourcing postgresql","title":"event sourcing with postgresql","description":"user table\uacfc user_event table\uc744 \ub9cc\ub4e4\uc5b4\uc11c event sourcing\uc744 \uad6c\ud604","source":"@site/docs/x design pattern/x event sourcing postgresql.md","sourceDirName":"x design pattern","slug":"/x design pattern/x event sourcing postgresql","permalink":"/docs/x design pattern/x event sourcing postgresql","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"event emitter pattern","permalink":"/docs/x design pattern/x event emitter pattern"},"next":{"title":"event sourcing quill-delta","permalink":"/docs/x design pattern/x event sourcing quill-delta"}}');var s=n(447259),a=n(529087);const i={},d="event sourcing with postgresql",u={},c=[{value:"schema.prisma",id:"schemaprisma",level:2},{value:"prisma",id:"prisma",level:2}];function o(e){const r={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"event-sourcing-with-postgresql",children:"event sourcing with postgresql"})}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsx)(r.p,{children:"user table\uacfc user_event table\uc744 \ub9cc\ub4e4\uc5b4\uc11c event sourcing\uc744 \uad6c\ud604"}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"schemaprisma",children:"schema.prisma"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-prisma",children:"model User {\r\n  id        String      @id @default(uuid())\r\n  name      String\r\n  email     String\r\n  password  String\r\n  createdAt DateTime @default(now())\r\n  updatedAt DateTime @updatedAt\r\n\r\n  posts     Post[]\r\n}\r\n\r\nmodel UserEvent {\r\n  id        String      @id @default(uuid())\r\n  userId    Int\r\n  type String\r\n  data Json\r\n  createdAt DateTime @default(now())\r\n\r\n  postEvents PostEvent[]\r\n}\r\n\r\nmodel Post {\r\n  id        Int      @id @default(uuid())\r\n  title     String\r\n  content   String\r\n  createdAt DateTime @default(now())\r\n  updatedAt DateTime @updatedAt\r\n\r\n  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)\r\n  userId    String\r\n}\r\n\r\nmodel PostEvent {\r\n  id        Int      @id @default(uuid())\r\n  postId    Int\r\n  type String\r\n  data Json\r\n  createdAt DateTime @default(now())\r\n\r\n  userEvent UserEvent @relation(fields: [userEventId], references: [id], onDelete: Cascade, onUpdate: Cascade)\r\n  userEventId String\r\n}\n"})}),"\n",(0,s.jsx)(r.h2,{id:"prisma",children:"prisma"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:'@Injectable()\r\nexport class UserService {\r\n  constructor(private readonly prisma: PrismaService) {}\r\n  async findById(id: string) {\r\n    const events = await this.prisma.userEvent.findMany({\r\n      where: {\r\n        userId: id,\r\n      },\r\n    });\r\n    const user = events.reduce((acc, cur) => {\r\n      switch (cur.type) {\r\n        case "user:create":\r\n        case "user:update":\r\n          return cur.data;\r\n        case "user:delete":\r\n          return null;\r\n      }\r\n    }, null);\r\n    return user;\r\n  }\r\n\r\n  async create(user: Prisma.UserCreateInput) {\r\n    const created = await this.prisma.user.create({\r\n      data: user,\r\n    });\r\n    await this.prisma.userEvent.create({\r\n      data: {\r\n        userId: created.id,\r\n        type: "user:create",\r\n        data: created,\r\n      },\r\n    });\r\n  }\r\n\r\n  async update(id: string, data: Prisma.UserUpdateInput) {\r\n    await this.prisma.userEvent.create({\r\n      data: {\r\n        userId: id,\r\n        type: "user:update",\r\n        data: data,\r\n      },\r\n    });\r\n  }\r\n\r\n  async delete(id: string) {\r\n    await this.prisma.userEvent.create({\r\n      data: {\r\n        userId: id,\r\n        type: "user:delete",\r\n        data: {},\r\n      },\r\n    });\r\n  }\r\n\r\n  async snapshot(id: string) {\r\n    await this.prisma.$transaction(async (tx) => {\r\n      const events = await tx.userEvent.findMany({\r\n        where: {\r\n          userId: id,\r\n        },\r\n      });\r\n\r\n      const user = events.reduce((acc, cur) => {\r\n        switch (cur.type) {\r\n          case "user:create":\r\n          case "user:update":\r\n            return cur.data;\r\n          case "user:delete":\r\n            return null;\r\n        }\r\n      }, null);\r\n\r\n      await tx.user.update({\r\n        where: {\r\n          id,\r\n        },\r\n        data: user,\r\n      });\r\n\r\n      await tx.userEvent.deleteMany({\r\n        where: {\r\n          userId: id,\r\n        },\r\n      });\r\n    });\r\n  }\r\n}\n'})})]})}function l(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}}}]);