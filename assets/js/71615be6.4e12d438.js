"use strict";(globalThis.webpackChunkmy_blog=globalThis.webpackChunkmy_blog||[]).push([[255176],{522045:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>l,frontMatter:()=>i,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"nestjs/nest prisma Generic CrudService","title":"nest prisma Generic Service","description":"abstract","source":"@site/docs/nestjs/nest prisma Generic CrudService.md","sourceDirName":"nestjs","slug":"/nestjs/nest prisma Generic CrudService","permalink":"/docs/nestjs/nest prisma Generic CrudService","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"nest polling & long polling","permalink":"/docs/nestjs/nest polling & long polling"},"next":{"title":"nest redirect decorator","permalink":"/docs/nestjs/nest redirect"}}');var a=r(447259),s=r(529087);const i={},d="nest prisma Generic Service",c={},u=[{value:"abstract",id:"abstract",level:2},{value:"delegate.ts",id:"delegatets",level:2},{value:"crud.type.ts",id:"crudtypets",level:2},{value:"user.type.ts",id:"usertypets",level:2},{value:"service",id:"service",level:2}];function o(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"nest-prisma-generic-service",children:"nest prisma Generic Service"})}),"\n",(0,a.jsx)(n.h2,{id:"abstract",children:"abstract"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'import { Injectable } from "@nestjs/common";\r\nimport { CrudTypeMap } from "./crud.type";\r\nimport { Delegate } from "./delegate";\r\n\r\n@Injectable()\r\nexport abstract class CrudService<D extends Delegate, T extends CrudTypeMap> {\r\n  constructor(protected delegate: D) {}\r\n\r\n  public getDelegate(): D {\r\n    return this.delegate;\r\n  }\r\n\r\n  public async aggregate(data: T["aggregate"]) {\r\n    const result = await this.delegate.aggregate(data);\r\n    return result;\r\n  }\r\n\r\n  public async count(data: T["count"]) {\r\n    const result = await this.delegate.count(data);\r\n    return result;\r\n  }\r\n\r\n  public async findAll(data: T["findMany"]) {\r\n    const result = await this.delegate.findMany(data);\r\n    return result;\r\n  }\r\n\r\n  public async findById(data: T["findUnique"]) {\r\n    const result = await this.delegate.findUnique(data);\r\n    return result;\r\n  }\r\n\r\n  public async create(data: T["create"]) {\r\n    const result = await this.delegate.create(data);\r\n    return result;\r\n  }\r\n\r\n  public async update(data: T["update"]) {\r\n    const result = await this.delegate.update(data);\r\n    return result;\r\n  }\r\n\r\n  public async delete(data: T["delete"]) {\r\n    const result = await this.delegate.delete(data);\r\n    return result;\r\n  }\r\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"delegatets",children:"delegate.ts"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"export interface Delegate {\r\n  aggregate(data: unknown): unknown;\r\n  count(data: unknown): unknown;\r\n  create(data: unknown): unknown;\r\n  delete(data: unknown): unknown;\r\n  deleteMany(data: unknown): unknown;\r\n  findFirst(data: unknown): unknown;\r\n  findMany(data: unknown): unknown;\r\n  findUnique(data: unknown): unknown;\r\n  update(data: unknown): unknown;\r\n  updateMany(data: unknown): unknown;\r\n  upsert(data: unknown): unknown;\r\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"crudtypets",children:"crud.type.ts"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"export interface CrudTypeMap {\r\n  aggregate: unknown;\r\n  count: unknown;\r\n  create: unknown;\r\n  delete: unknown;\r\n  deleteMany: unknown;\r\n  findFirst: unknown;\r\n  findMany: unknown;\r\n  findUnique: unknown;\r\n  update: unknown;\r\n  updateMany: unknown;\r\n  upsert: unknown;\r\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"usertypets",children:"user.type.ts"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'import { Prisma } from "@prisma/client";\r\nimport { CrudTypeMap } from "./crud.type";\r\n\r\nexport class UserTypeMap implements CrudTypeMap {\r\n  aggregate: Prisma.UserAggregateArgs;\r\n  count: Prisma.UserCountArgs;\r\n  create: Prisma.UserCreateArgs;\r\n  delete: Prisma.UserDeleteArgs;\r\n  deleteMany: Prisma.UserDeleteManyArgs;\r\n  findFirst: Prisma.UserFindFirstArgs;\r\n  findMany: Prisma.UserFindManyArgs;\r\n  findUnique: Prisma.UserFindUniqueArgs;\r\n  update: Prisma.UserUpdateArgs;\r\n  updateMany: Prisma.UserUpdateManyArgs;\r\n  upsert: Prisma.UserUpsertArgs;\r\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"service",children:"service"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'import { Injectable } from "@nestjs/common";\r\nimport { Prisma } from "@prisma/client";\r\nimport { CrudService } from "../../crud/crud.service";\r\nimport { UserTypeMap } from "../../crud/user.type";\r\nimport { PrismaService } from "../../prisma/prisma.service";\r\n\r\n@Injectable()\r\nexport class UserService extends CrudService<Prisma.UserDelegate, UserTypeMap> {\r\n  constructor(private readonly prisma: PrismaService) {\r\n    super(prisma.user);\r\n  }\r\n}\n'})})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(o,{...e})}):o(e)}},529087:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>d});var t=r(596363);const a={},s=t.createContext(a);function i(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);