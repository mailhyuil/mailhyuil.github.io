"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([["751412"],{218334:function(e,t,n){n.r(t),n.d(t,{frontMatter:()=>s,toc:()=>p,default:()=>l,metadata:()=>r,assets:()=>a,contentTitle:()=>c});var r=JSON.parse('{"id":"rxjs/rxjs join with combineLatestWith","title":"rxjs operator combineLatestWith","description":"combineLatest\uC640 \uB3D9\uC791\uC740 \uAC19\uC9C0\uB9CC pipe\uC548\uC5D0\uC11C \uC0AC\uC6A9\uD560 \uC218 \uC788\uC2B5\uB2C8\uB2E4.","source":"@site/docs/rxjs/rxjs join with combineLatestWith.md","sourceDirName":"rxjs","slug":"/rxjs/rxjs join with combineLatestWith","permalink":"/docs/rxjs/rxjs join with combineLatestWith","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"rxjs switchAll","permalink":"/docs/rxjs/rxjs join switchAll"},"next":{"title":"rxjs operator concatWith","permalink":"/docs/rxjs/rxjs join with concatWith"}}'),o=n(447259),i=n(255511);let s={},c="rxjs operator combineLatestWith",a={},p=[];function u(e){let t={blockquote:"blockquote",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"rxjs-operator-combinelatestwith",children:"rxjs operator combineLatestWith"})}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsx)(t.p,{children:"combineLatest\uC640 \uB3D9\uC791\uC740 \uAC19\uC9C0\uB9CC pipe\uC548\uC5D0\uC11C \uC0AC\uC6A9\uD560 \uC218 \uC788\uC2B5\uB2C8\uB2E4."}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",children:"import { fromEvent, combineLatestWith, map } from 'rxjs';\r\n\r\n// Setup: Add two inputs to the page\r\nconst input1 = document.createElement('input');\r\ndocument.body.appendChild(input1);\r\nconst input2 = document.createElement('input');\r\ndocument.body.appendChild(input2);\r\n\r\n// Get streams of changes\r\nconst input1Changes$ = fromEvent(input1, 'change');\r\nconst input2Changes$ = fromEvent(input2, 'change');\r\n\r\n// Combine the changes by adding them together\r\ninput1Changes$.pipe(\r\n  combineLatestWith(input2Changes$),\r\n  map(([e1, e2]) => (<HTMLInputElement>e1.target).value + ' - ' + (<HTMLInputElement>e2.target).value)\r\n)\r\n.subscribe(x => console.log(x));\n"})})]})}function l(e={}){let{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},255511:function(e,t,n){n.d(t,{R:()=>s,x:()=>c});var r=n(596363);let o={},i=r.createContext(o);function s(e){let t=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);