"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([["936514"],{303374:function(e,n,r){r.r(n),r.d(n,{frontMatter:()=>p,toc:()=>c,default:()=>d,metadata:()=>o,assets:()=>a,contentTitle:()=>s});var o=JSON.parse('{"id":"nestjs/nest swagger openapi codegen angular","title":"Swagger Codegen angular","description":"document.yaml or document.json\uC744 \uC77D\uACE0 \uCF54\uB4DC\uB85C \uC0DD\uC131\uD574\uC900\uB2E4.","source":"@site/docs/nestjs/nest swagger openapi codegen angular.md","sourceDirName":"nestjs","slug":"/nestjs/nest swagger openapi codegen angular","permalink":"/docs/nestjs/nest swagger openapi codegen angular","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"nest static assets","permalink":"/docs/nestjs/nest static assets"},"next":{"title":"nest swagger plugin","permalink":"/docs/nestjs/nest swagger plugin"}}'),t=r(447259),i=r(255511);let p={},s="Swagger Codegen angular",a={},c=[{value:"server/open-api/init-openapi.ts",id:"serveropen-apiinit-openapits",level:2},{value:"tsconfig.base.json",id:"tsconfigbasejson",level:2},{value:"angular appConfig.ts",id:"angular-appconfigts",level:2}];function l(e){let n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"swagger-codegen-angular",children:"Swagger Codegen angular"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"document.yaml or document.json\uC744 \uC77D\uACE0 \uCF54\uB4DC\uB85C \uC0DD\uC131\uD574\uC900\uB2E4."}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"@ApiTags, @ApiBody, @ApiResponse, @ApiProperty \uD544\uC694"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"controller\uB97C \uC77D\uC74C"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"npm i ng-openapi-gen\r\nnpm i @apidevtools/json-schema-ref-parser\r\n\r\nng-openapi-gen --input my-api.yaml --output my-app/src/app/api\n"})}),"\n",(0,t.jsx)(n.h2,{id:"serveropen-apiinit-openapits",children:"server/open-api/init-openapi.ts"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"swagger \uBB38\uC11C\uB97C code\uB85C \uC0DD\uC131"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import { INestApplication, Logger } from "@nestjs/common";\r\nimport { NestFactory } from "@nestjs/core";\r\nimport { DocumentBuilder, SwaggerModule } from "@nestjs/swagger";\r\nimport { writeFile } from "fs";\r\nimport $RefParser from "@apidevtools/json-schema-ref-parser";\r\nimport { NgOpenApiGen } from "ng-openapi-gen";\r\nimport { resolve } from "path";\r\nimport { AppModule } from "../src/app/app.module";\r\n\r\nexport async function initOpenApi(app?: INestApplication, port?: number | string) {\r\n  if (!app) {\r\n    app = await NestFactory.create(AppModule);\r\n  }\r\n  if (!port) {\r\n    port = process.env.SERVER_PORT || 3000;\r\n  }\r\n  /** OpenAPI */\r\n  const swaggerConfig = new DocumentBuilder()\r\n    .setTitle("API")\r\n    .addServer(`http://localhost:${port}`)\r\n    .setVersion("1.0")\r\n    .addCookieAuth("id-token", {\r\n      type: "apiKey",\r\n      in: "cookie",\r\n      description: "JWT Id Token",\r\n      name: "Id Token",\r\n      bearerFormat: "JWT",\r\n    })\r\n    .addCookieAuth("refresh-token", {\r\n      type: "apiKey",\r\n      in: "cookie",\r\n      description: "JWT Refresh Token",\r\n      name: "Refresh Token",\r\n      bearerFormat: "JWT",\r\n    })\r\n    .build();\r\n\r\n  const document = SwaggerModule.createDocument(app, swaggerConfig);\r\n  SwaggerModule.setup("api/v1/document", app, document);\r\n\r\n  const openApiPath = resolve(__dirname, "openapi.json");\r\n  writeFile(openApiPath, JSON.stringify(document), () => {\r\n    Logger.log(`\u2705 openapi.json \uD30C\uC77C\uC744 \uC0DD\uC131\uD588\uC2B5\uB2C8\uB2E4. ${openApiPath}`);\r\n  });\r\n\r\n  const openApiOptions = {\r\n    input: openApiPath,\r\n    output: "api/src/lib",\r\n    indexFile: true,\r\n  };\r\n\r\n  const RefParser = new $RefParser();\r\n  const openApi = await RefParser.bundle(openApiOptions.input, {\r\n    dereference: { circular: false },\r\n  });\r\n\r\n  try {\r\n    const ngOpenGen = new NgOpenApiGen(openApi, openApiOptions);\r\n    ngOpenGen.generate();\r\n  } catch (error) {\r\n    Logger.error(error);\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"tsconfigbasejson",children:"tsconfig.base.json"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'"paths": {\r\n  "@api": ["api/src/lib/index.ts"],\r\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"angular-appconfigts",children:"angular appConfig.ts"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import { HttpClientModule } from "@angular/common/http";\r\nimport { ApplicationConfig, importProvidersFrom } from "@angular/core";\r\nimport { provideRouter } from "@angular/router";\r\nimport { ApiConfiguration } from "api/src/lib/api-configuration";\r\nimport { ApiModule } from "./../../../../api/src/lib/api.module";\r\nimport { appRoutes } from "./app.routes";\r\n\r\nexport const appConfig: ApplicationConfig = {\r\n  providers: [provideRouter(appRoutes), importProvidersFrom([ApiModule, ApiConfiguration, HttpClientModule])],\r\n};\n'})})]})}function d(e={}){let{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},255511:function(e,n,r){r.d(n,{R:()=>p,x:()=>s});var o=r(596363);let t={},i=o.createContext(t);function p(e){let n=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:p(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);