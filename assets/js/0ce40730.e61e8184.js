"use strict";(globalThis.webpackChunkmy_blog=globalThis.webpackChunkmy_blog||[]).push([[390697],{529087:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>i});var r=n(596363);const o={},s=r.createContext(o);function c(e){const t=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),r.createElement(s.Provider,{value:t},e.children)}},682259:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>d,frontMatter:()=>c,metadata:()=>r,toc:()=>p});const r=JSON.parse('{"id":"nestjs/nest base interceptor LogInterceptor","title":"nest interceptor LoggingInterceptor","description":"\uad6c\ud604","source":"@site/docs/nestjs/nest base interceptor LogInterceptor.md","sourceDirName":"nestjs","slug":"/nestjs/nest base interceptor LogInterceptor","permalink":"/docs/nestjs/nest base interceptor LogInterceptor","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"nest forbidden interceptor","permalink":"/docs/nestjs/nest base interceptor ForbiddenResourceInterceptor"},"next":{"title":"nestjs base interceptor Serialize","permalink":"/docs/nestjs/nest base interceptor Serialize"}}');var o=n(447259),s=n(529087);const c={},i="nest interceptor LoggingInterceptor",a={},p=[{value:"\uad6c\ud604",id:"\uad6c\ud604",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"nest-interceptor-logginginterceptor",children:"nest interceptor LoggingInterceptor"})}),"\n",(0,o.jsx)(t.h2,{id:"\uad6c\ud604",children:"\uad6c\ud604"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-ts",children:'@Injectable()\r\nexport class LogInterceptor implements NestInterceptor {\r\n  constructor(private readonly logger: MyLogger, private readonly logService: LogService) {}\r\n  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\r\n    const req = context.switchToHttp().getRequest();\r\n    const res = context.switchToHttp().getResponse();\r\n\r\n    return next.handle().pipe(\r\n      tap(data => {\r\n        if (req.method === "GET") return;\r\n        const logData = {\r\n          timestamp: new Date().toISOString(),\r\n          message: data.message,\r\n          method: req.method,\r\n          path: req.url,\r\n          statusCode: res.statusCode,\r\n          // Add more relevant information as needed\r\n        };\r\n        this.logService.create(logData);\r\n      }),\r\n    );\r\n  }\r\n}\n'})})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);