"use strict";(globalThis.webpackChunkmy_blog=globalThis.webpackChunkmy_blog||[]).push([[756439],{529087:(e,r,t)=>{t.d(r,{R:()=>o,x:()=>i});var n=t(596363);const s={},a=n.createContext(s);function o(e){const r=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(a.Provider,{value:r},e.children)}},663578:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"nestjs/nest base DiscoveryModule ExplorerService - DiscoveryService","title":"nest DiscoveryModule ExplorerService","description":"app.module.ts","source":"@site/docs/nestjs/nest base DiscoveryModule ExplorerService - DiscoveryService.md","sourceDirName":"nestjs","slug":"/nestjs/nest base DiscoveryModule ExplorerService - DiscoveryService","permalink":"/docs/nestjs/nest base DiscoveryModule ExplorerService - DiscoveryService","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"nest session","permalink":"/docs/nestjs/nest auth session"},"next":{"title":"nest decorator DiscoveryModule DiscoveryService & MetadataScanner","permalink":"/docs/nestjs/nest base DiscoveryModule MetadataScanner"}}');var s=t(447259),a=t(529087);const o={},i="nest DiscoveryModule ExplorerService",c={},d=[{value:"app.module.ts",id:"appmodulets",level:2},{value:"explorer.service.ts",id:"explorerservicets",level:2},{value:"usage",id:"usage",level:2}];function l(e){const r={code:"code",h1:"h1",h2:"h2",header:"header",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"nest-discoverymodule-explorerservice",children:"nest DiscoveryModule ExplorerService"})}),"\n",(0,s.jsx)(r.h2,{id:"appmodulets",children:"app.module.ts"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:'import { Module } from "@nestjs/common";\r\nimport { DiscoveryModule } from "@nestjs/core";\r\n\r\n@Module({\r\n  imports: [DiscoveryModule],\r\n  controllers: [AppController],\r\n  providers: [AppService],\r\n})\r\nexport class AppModule {}\n'})}),"\n",(0,s.jsx)(r.h2,{id:"explorerservicets",children:"explorer.service.ts"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:'import { Injectable } from "@nestjs/common";\r\nimport { DiscoveryService, MetadataScanner, Reflector } from "@nestjs/core";\r\n\r\n@Injectable()\r\nexport class ExplorerService {\r\n  constructor(private readonly discoveryService: DiscoveryService) {}\r\n\r\n  find(metadataKey: string | symbol) {\r\n    const providers = this.discoveryService.getProviders();\r\n\r\n    return providers\r\n      .filter((wrapper) => wrapper.isDependencyTreeStatic())\r\n      .filter(({ metatype, instance }) => {\r\n        if (!instance || !metatype) {\r\n          return false;\r\n        }\r\n        return Reflect.getMetadata(metadataKey, metatype);\r\n      })\r\n      .map(({ instance }) => instance);\r\n  }\r\n}\n'})}),"\n",(0,s.jsx)(r.h2,{id:"usage",children:"usage"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:'export interface UserStrategy {\r\n  update(data: UpdateUserDTO): Promise<string>;\r\n}\r\n\r\n@Injectable()\r\n@SetMetadata("strategy:user", "ADMIN")\r\nexport class AdminStrategy implements UserStrategy {\r\n  constructor(private readonly prismService: PrismService) {}\r\n  async update(data: UpdateUserDTO) {\r\n    const updated = await this.prismService.update(data);\r\n    return plainToClass(UserDTO, updated);\r\n  }\r\n}\r\n\r\n@Injectable()\r\n@SetMetadata("strategy:user", "MEMBER")\r\nexport class MemberStrategy implements UserStrategy {\r\n  constructor(private readonly prismService: PrismService) {}\r\n  async update(data: UpdateUserDTO) {\r\n    const updated = await this.prismService.update(data);\r\n    return plainToClass(UserDTO, updated);\r\n  }\r\n}\n'})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:'@Injectable()\r\nexport class UserService {\r\n  private readonly userStrategy: Record<Role, UserStrategy>;\r\n\r\n  constructor(\r\n    private readonly explorerService: ExplorerService,\r\n    private readonly metadataScanner: MetadataScanner,\r\n    private readonly reflector: Reflector\r\n  ) {\r\n    const providers = this.explorerService.find("strategy:user");\r\n    providers.forEach((provider) => {\r\n      this.metadataScanner.scanFromPrototype(provider, Object.getPrototypeOf(provider), (methodName) => {\r\n        const role = this.reflector.get("strategy:user", provider);\r\n        this.userStrategy[role] = provider;\r\n      });\r\n    });\r\n  }\r\n\r\n  async update(data: UpdateUserDTO, role: Role = "MEMBER") {\r\n    return await this.userStrategy[role].update(data);\r\n  }\r\n}\n'})})]})}function p(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);