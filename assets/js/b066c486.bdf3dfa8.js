"use strict";(globalThis.webpackChunkmy_blog=globalThis.webpackChunkmy_blog||[]).push([[97174],{454334:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"go/go package prisma","title":"go package prisma","description":"install","source":"@site/docs/go/go package prisma.md","sourceDirName":"go","slug":"/go/go package prisma","permalink":"/docs/go/go package prisma","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"go package pgx","permalink":"/docs/go/go package postgres - pgx"},"next":{"title":"go package go-redis","permalink":"/docs/go/go package redis - go-redis"}}');var s=n(447259),o=n(529087);const a={},i="go package prisma",c={},l=[{value:"install",id:"install",level:2},{value:"usage",id:"usage",level:2}];function d(e){const r={code:"code",h1:"h1",h2:"h2",header:"header",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"go-package-prisma",children:"go package prisma"})}),"\n",(0,s.jsx)(r.h2,{id:"install",children:"install"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-sh",children:"go get github.com/steebchen/prisma-client-go\r\n\r\ngo run github.com/steebchen/prisma-client-go db push\n"})}),"\n",(0,s.jsx)(r.h2,{id:"usage",children:"usage"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-go",children:'package main\r\n\r\nimport (\r\n  "context"\r\n  "encoding/json"\r\n  "fmt"\r\n\r\n  // adapt "demo" to your module name if it differs\r\n  "demo/db"\r\n)\r\n\r\nfunc main() {\r\n  if err := run(); err != nil {\r\n    panic(err)\r\n  }\r\n}\r\n\r\nfunc run() error {\r\n  client := db.NewClient()\r\n  if err := client.Prisma.Connect(); err != nil {\r\n    return err\r\n  }\r\n\r\n  defer func() {\r\n    if err := client.Prisma.Disconnect(); err != nil {\r\n      panic(err)\r\n    }\r\n  }()\r\n\r\n  ctx := context.Background()\r\n\r\n  // create a post\r\n  createdPost, err := client.Post.CreateOne(\r\n    db.Post.Title.Set("Hi from Prisma!"),\r\n    db.Post.Published.Set(true),\r\n    db.Post.Desc.Set("Prisma is a database toolkit and makes databases easy."),\r\n  ).Exec(ctx)\r\n  if err != nil {\r\n    return err\r\n  }\r\n\r\n  result, _ := json.MarshalIndent(createdPost, "", "  ")\r\n  fmt.Printf("created post: %s\\n", result)\r\n\r\n  // find a single post\r\n  post, err := client.Post.FindUnique(\r\n    db.Post.ID.Equals(createdPost.ID),\r\n  ).Exec(ctx)\r\n  if err != nil {\r\n    return err\r\n  }\r\n\r\n  result, _ = json.MarshalIndent(post, "", "  ")\r\n  fmt.Printf("post: %s\\n", result)\r\n\r\n  // for optional/nullable values, you need to check the function and create two return values\r\n  // `desc` is a string, and `ok` is a bool whether the record is null or not. If it\'s null,\r\n  // `ok` is false, and `desc` will default to Go\'s default values; in this case an empty string (""). Otherwise,\r\n  // `ok` is true and `desc` will be "my description".\r\n  desc, ok := post.Desc()\r\n  if !ok {\r\n    return fmt.Errorf("post\'s description is null")\r\n  }\r\n\r\n  fmt.Printf("The posts\'s description is: %s\\n", desc)\r\n\r\n  return nil\r\n}\n'})})]})}function u(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},529087:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>i});var t=n(596363);const s={},o=t.createContext(s);function a(e){const r=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(o.Provider,{value:r},e.children)}}}]);