"use strict";(globalThis.webpackChunkmy_blog=globalThis.webpackChunkmy_blog||[]).push([[195462],{529087:(n,e,r)=>{r.d(e,{R:()=>s,x:()=>a});var t=r(596363);const o={},i=t.createContext(o);function s(n){const e=t.useContext(i);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:s(n.components),t.createElement(i.Provider,{value:e},n.children)}},810683:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>g,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"ai langchain/langchain Vector Stores pgvector","title":"langchain Vector Stores pgvector","description":"install","source":"@site/docs/ai langchain/langchain Vector Stores pgvector.md","sourceDirName":"ai langchain","slug":"/ai langchain/langchain Vector Stores pgvector","permalink":"/docs/ai langchain/langchain Vector Stores pgvector","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"langchain Vector Stores","permalink":"/docs/ai langchain/langchain Vector Stores MemoryVectorStore"},"next":{"title":"langchain Text Splitters","permalink":"/docs/ai langchain/langchain Vector Text Spliters"}}');var o=r(447259),i=r(529087);const s={},a="langchain Vector Stores pgvector",c={},l=[{value:"install",id:"install",level:2},{value:"postgres settings",id:"postgres-settings",level:2},{value:"init.sql",id:"initsql",level:2},{value:"VectorStore",id:"vectorstore",level:2}];function d(n){const e={code:"code",h1:"h1",h2:"h2",header:"header",pre:"pre",...(0,i.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"langchain-vector-stores-pgvector",children:"langchain Vector Stores pgvector"})}),"\n",(0,o.jsx)(e.h2,{id:"install",children:"install"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-sh",children:"npm i @langchain/community @langchain/openai @langchain/core pg uuid\n"})}),"\n",(0,o.jsx)(e.h2,{id:"postgres-settings",children:"postgres settings"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-sh",children:"services:\r\n  db:\r\n    image: pgvector/pgvector:pg16\r\n    container_name: postgres\r\n    ports:\r\n      - 5432:5432\r\n    restart: always\r\n    environment:\r\n      - POSTGRES_DB=mydb\r\n      - POSTGRES_USER=postgres\r\n      - POSTGRES_PASSWORD=postgres\r\n    volumes:\r\n      - pgdata:/var/lib/postgresql/data\r\n      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql\n"})}),"\n",(0,o.jsx)(e.h2,{id:"initsql",children:"init.sql"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-sql",children:"CREATE TABLE chatbot_vector (\r\n    id SERIAL PRIMARY KEY,\r\n    content TEXT, -- \ud14d\uc2a4\ud2b8 \ub370\uc774\ud130 \uc800\uc7a5\r\n    metadata JSONB, -- \uba54\ud0c0\ub370\uc774\ud130 \uc800\uc7a5\r\n    embedding vector(1536)  -- vector \ub370\uc774\ud130 \uc800\uc7a5, OpenAI\uc758 text-embedding-ada-002 \ubaa8\ub378 \uae30\uc900\r\n    --------------------------------\r\n    -- \ucd94\uac00\uc801\uc778 \ub370\uc774\ud130 \uc800\uc7a5 (RDBMS \uc6a9)\r\n    -- username TEXT,\r\n    -- created_at TIMESTAMP DEFAULT NOW()\r\n);\n"})}),"\n",(0,o.jsx)(e.h2,{id:"vectorstore",children:"VectorStore"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-ts",children:'import { DistanceStrategy, PGVectorStore } from "@langchain/community/vectorstores/pgvector";\r\nimport type { Document } from "@langchain/core/documents";\r\nimport { OpenAIEmbeddings } from "@langchain/openai";\r\nimport { Injectable, OnApplicationShutdown, OnModuleInit } from "@nestjs/common";\r\nimport { PoolConfig } from "pg";\r\nimport { v4 as uuid } from "uuid";\r\n\r\n@Injectable()\r\nexport class VectorStore implements OnModuleInit, OnApplicationShutdown {\r\n  embeddings: OpenAIEmbeddings;\r\n  vectorStore: PGVectorStore;\r\n  onModuleInit() {\r\n    this.init();\r\n  }\r\n  onApplicationShutdown(signal?: string) {\r\n    this.vectorStore.end();\r\n  }\r\n\r\n  async init() {\r\n    this.embeddings = new OpenAIEmbeddings({\r\n      model: "text-embedding-3-small",\r\n    });\r\n\r\n    const config = {\r\n      postgresConnectionOptions: {\r\n        type: "postgres",\r\n        host: process.env.PG_VECTOR_HOST,\r\n        port: process.env.PG_VECTOR_PORT,\r\n        user: process.env.PG_VECTOR_USER,\r\n        password: process.env.PG_VECTOR_PASSWORD,\r\n        database: process.env.PG_VECTOR_DATABASE,\r\n      } as PoolConfig,\r\n      tableName: process.env.PG_VECTOR_TABLE,\r\n      columns: {\r\n        idColumnName: "id",\r\n        vectorColumnName: "embedding",\r\n        contentColumnName: "content",\r\n        metadataColumnName: "metadata",\r\n      },\r\n      // supported distance strategies: cosine (default), innerProduct, or euclidean\r\n      distanceStrategy: "cosine" as DistanceStrategy,\r\n    };\r\n\r\n    this.vectorStore = await PGVectorStore.initialize(this.embeddings, config);\r\n  }\r\n\r\n  async add(docs: Document[]) {\r\n    const docsWithIds = docs.map(doc => {\r\n      return {\r\n        ...doc,\r\n        id: uuid(),\r\n      };\r\n    });\r\n    return await this.vectorStore.addDocuments(docsWithIds);\r\n  }\r\n\r\n  async delete(ids: string[], filter?: Record<string, unknown>) {\r\n    await this.vectorStore.delete({\r\n      ids,\r\n      filter,\r\n    });\r\n  }\r\n\r\n  async get(query: string, k: number, filter?: Record<string, unknown>) {\r\n    // query: \uac80\uc0c9\ud560 \ubb38\uc7a5, k: \ubc18\ud658\ud560 \ubb38\uc11c \uc218, filter: \ud544\ud130 \ud568\uc218\r\n    // \ubca1\ud130 \uc800\uc7a5\uc18c\ub97c \uc9c1\uc811 \uac80\uc0c9\r\n    // \uc0ac\uc6a9\uc774 \uac04\ub2e8\ud558\ub2e4.\r\n    return await this.vectorStore.similaritySearch(query, k, filter);\r\n  }\r\n\r\n  async retrieve(query: string, k?: number, filter?: Record<string, unknown>) {\r\n    // query: \uac80\uc0c9\ud560 \ubb38\uc7a5, k: \ubc18\ud658\ud560 \ubb38\uc11c \uc218, filter: \ud544\ud130 \ud568\uc218, searchType: \uac80\uc0c9 \ubc29\ubc95, searchKwargs: \uac80\uc0c9 \uc635\uc158\r\n    // retriever\ub97c \uc0ac\uc6a9\ud558\uc5ec \uac80\uc0c9\r\n    // \ud65c\uc6a9 \ubc94\uc704\uac00 \ub354 \ub113\uace0 \ub2e4\uc591\ud55c \uc635\uc158\uc744 \uc81c\uacf5\ud55c\ub2e4.\r\n    const retriever = this.vectorStore.asRetriever({\r\n      searchType: "mmr",\r\n      searchKwargs: {\r\n        fetchK: 10,\r\n      },\r\n      filter,\r\n      k,\r\n    });\r\n    return await retriever.invoke(query);\r\n  }\r\n}\n'})})]})}function g(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}}}]);