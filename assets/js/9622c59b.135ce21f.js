"use strict";(globalThis.webpackChunkmy_blog=globalThis.webpackChunkmy_blog||[]).push([[614147],{357046:(r,o,n)=>{n.r(o),n.d(o,{assets:()=>s,contentTitle:()=>l,default:()=>f,frontMatter:()=>m,metadata:()=>a,toc:()=>u});const a=JSON.parse('{"id":"angular/angular form FormGroup to FormData","title":"angular form FormGroup to FormData","description":"","source":"@site/docs/angular/angular form FormGroup to FormData.md","sourceDirName":"angular","slug":"/angular/angular form FormGroup to FormData","permalink":"/docs/angular/angular form FormGroup to FormData","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"angular form FormArray","permalink":"/docs/angular/angular form FormArray"},"next":{"title":"angular form async validator","permalink":"/docs/angular/angular form Validator AsyncValidatorFn"}}');var t=n(447259),e=n(529087);const m={},l="angular form FormGroup to FormData",s={},u=[];function c(r){const o={code:"code",h1:"h1",header:"header",pre:"pre",...(0,e.R)(),...r.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.header,{children:(0,t.jsx)(o.h1,{id:"angular-form-formgroup-to-formdata",children:"angular form FormGroup to FormData"})}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-ts",children:'import { Injectable } from "@angular/core";\r\nimport { FormArray, FormControl, FormGroup } from "@angular/forms";\r\n\r\n@Injectable({\r\n  providedIn: "root",\r\n})\r\nexport class ConvertService {\r\n  formGroupToFormData(formData: FormData, formGroup: FormGroup) {\r\n    for (let key in formGroup.controls) {\r\n      if (formGroup.controls[key] instanceof FormGroup) {\r\n        this.formGroupToFormData(formData, formGroup.controls[key] as FormGroup);\r\n      } else if (formGroup.controls[key] instanceof FormArray) {\r\n        if ((formGroup.controls[key] as FormArray).controls[0] instanceof FormControl) {\r\n          formData.append(key, (formGroup.controls[key] as FormArray).value);\r\n        } else {\r\n          for (let formControl of (formGroup.controls[key] as FormArray).controls) {\r\n            if (formControl instanceof FormGroup) this.formGroupToFormData(formData, formControl as FormGroup);\r\n            else {\r\n              formData.append(key, formControl.value);\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        formData.append(key, formGroup.controls[key].value);\r\n      }\r\n    }\r\n  }\r\n}\n'})})]})}function f(r={}){const{wrapper:o}={...(0,e.R)(),...r.components};return o?(0,t.jsx)(o,{...r,children:(0,t.jsx)(c,{...r})}):c(r)}},529087:(r,o,n)=>{n.d(o,{R:()=>m,x:()=>l});var a=n(596363);const t={},e=a.createContext(t);function m(r){const o=a.useContext(e);return a.useMemo(function(){return"function"==typeof r?r(o):{...o,...r}},[o,r])}function l(r){let o;return o=r.disableParentContext?"function"==typeof r.components?r.components(t):r.components||t:m(r.components),a.createElement(e.Provider,{value:o},r.children)}}}]);