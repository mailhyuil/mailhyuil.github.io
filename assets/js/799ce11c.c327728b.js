"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([["718902"],{170796:function(e,r,n){n.r(r),n.d(r,{frontMatter:()=>i,toc:()=>c,default:()=>u,metadata:()=>t,assets:()=>l,contentTitle:()=>a});var t=JSON.parse('{"id":"aws/aws-sdk S3 presigned url","title":"aws-sdk s3","description":"install","source":"@site/docs/aws/aws-sdk S3 presigned url.md","sourceDirName":"aws","slug":"/aws/aws-sdk S3 presigned url","permalink":"/docs/aws/aws-sdk S3 presigned url","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"aws-sdk EventBridge Scheduler","permalink":"/docs/aws/aws-sdk EventBridge Scheduler"},"next":{"title":"aws-sdk s3","permalink":"/docs/aws/aws-sdk S3"}}'),s=n(447259),o=n(255511);let i={},a="aws-sdk s3",l={},c=[{value:"install",id:"install",level:2},{value:"usage",id:"usage",level:2}];function d(e){let r={code:"code",h1:"h1",h2:"h2",header:"header",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"aws-sdk-s3",children:"aws-sdk s3"})}),"\n",(0,s.jsx)(r.h2,{id:"install",children:"install"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-sh",children:"npm i @aws-sdk/client-s3\r\nnpm i @aws-sdk/s3-request-presigner\n"})}),"\n",(0,s.jsx)(r.h2,{id:"usage",children:"usage"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:'import https from "https";\r\nimport { PutObjectCommand, S3Client } from "@aws-sdk/client-s3";\r\nimport { fromIni } from "@aws-sdk/credential-providers";\r\nimport { HttpRequest } from "@smithy/protocol-http";\r\nimport { getSignedUrl, S3RequestPresigner } from "@aws-sdk/s3-request-presigner";\r\nimport { parseUrl } from "@smithy/url-parser";\r\nimport { formatUrl } from "@aws-sdk/util-format-url";\r\nimport { Hash } from "@smithy/hash-node";\r\n\r\nconst createPresignedUrlWithoutClient = async ({ region, bucket, key }) => {\r\n  const url = parseUrl(`https://${bucket}.s3.${region}.amazonaws.com/${key}`);\r\n  const presigner = new S3RequestPresigner({\r\n    credentials: fromIni(),\r\n    region,\r\n    sha256: Hash.bind(null, "sha256"),\r\n  });\r\n\r\n  const signedUrlObject = await presigner.presign(new HttpRequest({ ...url, method: "PUT" }));\r\n  return formatUrl(signedUrlObject);\r\n};\r\n\r\nconst createPresignedUrlWithClient = ({ region, bucket, key }) => {\r\n  const client = new S3Client({ region });\r\n  const command = new PutObjectCommand({ Bucket: bucket, Key: key });\r\n  return getSignedUrl(client, command, { expiresIn: 3600 });\r\n};\r\n\r\nfunction put(url, data) {\r\n  return new Promise((resolve, reject) => {\r\n    const req = https.request(url, { method: "PUT", headers: { "Content-Length": new Blob([data]).size } }, res => {\r\n      let responseBody = "";\r\n      res.on("data", chunk => {\r\n        responseBody += chunk;\r\n      });\r\n      res.on("end", () => {\r\n        resolve(responseBody);\r\n      });\r\n    });\r\n    req.on("error", err => {\r\n      reject(err);\r\n    });\r\n    req.write(data);\r\n    req.end();\r\n  });\r\n}\r\n\r\nexport const main = async () => {\r\n  const REGION = "us-east-1";\r\n  const BUCKET = "example_bucket";\r\n  const KEY = "example_file.txt";\r\n\r\n  // There are two ways to generate a presigned URL.\r\n  // 1. Use createPresignedUrl without the S3 client.\r\n  // 2. Use getSignedUrl in conjunction with the S3 client and GetObjectCommand.\r\n  try {\r\n    const noClientUrl = await createPresignedUrlWithoutClient({\r\n      region: REGION,\r\n      bucket: BUCKET,\r\n      key: KEY,\r\n    });\r\n\r\n    const clientUrl = await createPresignedUrlWithClient({\r\n      region: REGION,\r\n      bucket: BUCKET,\r\n      key: KEY,\r\n    });\r\n\r\n    // After you get the presigned URL, you can provide your own file\r\n    // data. Refer to put() above.\r\n    console.log("Calling PUT using presigned URL without client");\r\n    await put(noClientUrl, "Hello World");\r\n\r\n    console.log("Calling PUT using presigned URL with client");\r\n    await put(clientUrl, "Hello World");\r\n\r\n    console.log("\\nDone. Check your S3 console.");\r\n  } catch (err) {\r\n    console.error(err);\r\n  }\r\n};\n'})})]})}function u(e={}){let{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},255511:function(e,r,n){n.d(r,{R:()=>i,x:()=>a});var t=n(596363);let s={},o=t.createContext(s);function i(e){let r=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(o.Provider,{value:r},e.children)}}}]);