"use strict";(globalThis.webpackChunkmy_blog=globalThis.webpackChunkmy_blog||[]).push([[194943],{529087:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>o});var a=n(596363);const t={},s=a.createContext(t);function i(e){const r=a.useContext(s);return a.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),a.createElement(s.Provider,{value:r},e.children)}},560393:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>m});const a=JSON.parse('{"id":"angular/angular state management rxjs normalize","title":"angular state management rxjs normalize","description":"combineLatest\ub97c \uc0ac\uc6a9\ud558\uc5ec \uad6c\ud604\ud55c\ub2e4","source":"@site/docs/angular/angular state management rxjs normalize.md","sourceDirName":"angular","slug":"/angular/angular state management rxjs normalize","permalink":"/docs/angular/angular state management rxjs normalize","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"angular @ngxs/store","permalink":"/docs/angular/angular state management ngxs store"},"next":{"title":"angular state management rxjs","permalink":"/docs/angular/angular state management rxjs"}}');var t=n(447259),s=n(529087);const i={},o="angular state management rxjs normalize",l={},m=[{value:"normalizr \uc0ac\uc6a9",id:"normalizr-\uc0ac\uc6a9",level:2}];function c(e){const r={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"angular-state-management-rxjs-normalize",children:"angular state management rxjs normalize"})}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsx)(r.p,{children:"combineLatest\ub97c \uc0ac\uc6a9\ud558\uc5ec \uad6c\ud604\ud55c\ub2e4"}),"\n"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'import { Observable, of } from "rxjs";\r\nimport { switchMap } from "rxjs/operators";\r\n\r\nexport interface NormalizedData<T> {\r\n  entities: { [id: string]: T };\r\n  ids: string[];\r\n}\r\n\r\nexport class SomeService {\r\n  constructor(private httpService: HttpService) {}\r\n\r\n  getNormalizedData(): Observable<NormalizedData<any>> {\r\n    return this.httpService.get().pipe(switchMap((data) => of(this.normalize(data))));\r\n  }\r\n\r\n  private normalize(data: any[]): NormalizedData<any> {\r\n    const entities: { [id: string]: any } = {};\r\n    const ids: string[] = [];\r\n\r\n    data.forEach((item) => {\r\n      entities[item.id] = item;\r\n      ids.push(item.id);\r\n    });\r\n\r\n    return { entities, ids };\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"normalizr-\uc0ac\uc6a9",children:"normalizr \uc0ac\uc6a9"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'import { schema, normalize } from "normalizr";\r\nimport { Observable, of } from "rxjs";\r\nimport { switchMap } from "rxjs/operators";\r\n\r\nexport class SomeService {\r\n  constructor(private httpService: HttpService) {}\r\n\r\n  getNormalizedData(): Observable<NormalizedData<any>> {\r\n    return this.httpService.get().pipe(\r\n      switchMap((data) => {\r\n        // Define your schema using normalizr\r\n        const itemSchema = new schema.Entity("items");\r\n\r\n        // Use normalizr to normalize the data\r\n        const normalizedData = normalize(data, [itemSchema]);\r\n\r\n        // Extract and return the normalized data\r\n        return of(normalizedData);\r\n      })\r\n    );\r\n  }\r\n}\n'})})]})}function d(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}}}]);