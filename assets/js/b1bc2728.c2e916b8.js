"use strict";(globalThis.webpackChunkmy_blog=globalThis.webpackChunkmy_blog||[]).push([[272650],{529087:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>i});var r=n(596363);const a={},o=r.createContext(a);function s(e){const t=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(o.Provider,{value:t},e.children)}},942949:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"x design pattern/x Fire and Forget Pattern","title":"Fire and Forget Pattern","description":"The Fire and Forget pattern is a design pattern used in software development where a task is initiated and the system does not wait for its completion before proceeding with other operations. This pattern is particularly useful in scenarios where the outcome of the task is not immediately needed, allowing for improved performance and responsiveness.","source":"@site/docs/x design pattern/x Fire and Forget Pattern.md","sourceDirName":"x design pattern","slug":"/x design pattern/x Fire and Forget Pattern","permalink":"/docs/x design pattern/x Fire and Forget Pattern","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Feature Flags Pattern","permalink":"/docs/x design pattern/x Feature Flags Pattern"},"next":{"title":"design pattern Function Object Pattern","permalink":"/docs/x design pattern/x Function Object Pattern"}}');var a=n(447259),o=n(529087);const s={},i="Fire and Forget Pattern",d={},c=[];function l(e){const t={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"fire-and-forget-pattern",children:"Fire and Forget Pattern"})}),"\n",(0,a.jsx)(t.p,{children:"The Fire and Forget pattern is a design pattern used in software development where a task is initiated and the system does not wait for its completion before proceeding with other operations. This pattern is particularly useful in scenarios where the outcome of the task is not immediately needed, allowing for improved performance and responsiveness."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'async function schedule() {}\r\nasync function main() {\r\n  try {\r\n    await schedule(); // await\ub97c \ubc18\ub4dc\uc2dc \ubd99\uc5ec\uc57c \ud55c\ub2e4.\r\n    scheduleAsync();\r\n  } catch (error) {\r\n    console.error("Error scheduling task:", error);\r\n  }\r\n}\n'})})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);