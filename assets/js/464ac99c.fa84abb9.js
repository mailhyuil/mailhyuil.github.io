"use strict";(globalThis.webpackChunkmy_blog=globalThis.webpackChunkmy_blog||[]).push([[809608],{529087:(e,r,l)=>{l.d(r,{R:()=>t,x:()=>a});var n=l(596363);const o={},s=n.createContext(o);function t(e){const r=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),n.createElement(s.Provider,{value:r},e.children)}},715947:(e,r,l)=>{l.r(r),l.d(r,{assets:()=>p,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>n,toc:()=>i});const n=JSON.parse('{"id":"graphQL/graphql apollo-server","title":"graphql apollo-server","description":"graphql apollo-server","source":"@site/docs/graphQL/graphql apollo-server.md","sourceDirName":"graphQL","slug":"/graphQL/graphql apollo-server","permalink":"/docs/graphQL/graphql apollo-server","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"graphql apollo-client","permalink":"/docs/graphQL/graphql apollo-client"},"next":{"title":"graphql base fragment","permalink":"/docs/graphQL/graphql base fragment"}}');var o=l(447259),s=l(529087);const t={},a=void 0,p={},i=[{value:"graphql apollo-server",id:"graphql-apollo-server",level:2},{value:"install",id:"install",level:3},{value:"server.js",id:"serverjs",level:3}];function c(e){const r={code:"code",h2:"h2",h3:"h3",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.h2,{id:"graphql-apollo-server",children:"graphql apollo-server"}),"\n",(0,o.jsx)(r.h3,{id:"install",children:"install"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-sh",children:"npm i apollo-server graphql\n"})}),"\n",(0,o.jsx)(r.h3,{id:"serverjs",children:"server.js"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-js",children:'import { ApolloServer, gql } from "apollo-server";\r\n\r\nconst typeDefs = gql`\r\n  type Query {\r\n    text: String\r\n  }\r\n`;\r\n\r\nconst server = new ApolloServer({ typeDefs });\r\n\r\nserver.listen().then(({ url }) => {\r\n  console.log(`running on ${url}`);\r\n});\n'})})]})}function h(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}}}]);