"use strict";(globalThis.webpackChunkmy_blog=globalThis.webpackChunkmy_blog||[]).push([[735155],{155503:(r,e,n)=>{n.r(e),n.d(e,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>i});const o=JSON.parse('{"id":"nestjs/nest advanced batch","title":"nest advanced batch","description":"\ub108\ubb34 \ub9ce\uc740 \ub370\uc774\ud130\ub97c \uac00\uc838\uc624\uba74 \uba54\ubaa8\ub9ac \ubd80\uc871\uc774 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub2e4.","source":"@site/docs/nestjs/nest advanced batch.md","sourceDirName":"nestjs","slug":"/nestjs/nest advanced batch","permalink":"/docs/nestjs/nest advanced batch","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"nest advanced SSE \uc7ac\uc5f0\uacb0 (Last-Event-Id)","permalink":"/docs/nestjs/nest advanced SSE \uc7ac\uc5f0\uacb0 - Last-Event-ID"},"next":{"title":"nest cqrs AggregateRoot","permalink":"/docs/nestjs/nest advanced cqrs AggregateRoot"}}');var t=n(447259),s=n(529087);const l={},c="nest advanced batch",a={},i=[{value:"install",id:"install",level:2},{value:"main.ts",id:"maints",level:2},{value:"app.module.ts",id:"appmodulets",level:2},{value:"batch.module.ts",id:"batchmodulets",level:2},{value:"batch.processor.ts (postgres \ub370\uc774\ud130\ub97c stream\uc73c\ub85c \uc77d\uc5b4\uc11c \ucc98\ub9ac\ud558\uae30) (io-bound)",id:"batchprocessorts-postgres-\ub370\uc774\ud130\ub97c-stream\uc73c\ub85c-\uc77d\uc5b4\uc11c-\ucc98\ub9ac\ud558\uae30-io-bound",level:2},{value:"batch.processor.ts (worker_threads\ub85c \ubcd1\ub82c\ucc98\ub9ac\ud558\uae30) (cpu-bound)",id:"batchprocessorts-worker_threads\ub85c-\ubcd1\ub82c\ucc98\ub9ac\ud558\uae30-cpu-bound",level:2},{value:"task.controller.ts",id:"taskcontrollerts",level:2}];function d(r){const e={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...r.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"nest-advanced-batch",children:"nest advanced batch"})}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsx)(e.p,{children:"\ub108\ubb34 \ub9ce\uc740 \ub370\uc774\ud130\ub97c \uac00\uc838\uc624\uba74 \uba54\ubaa8\ub9ac \ubd80\uc871\uc774 \ubc1c\uc0dd\ud560 \uc218 \uc788\ub2e4."}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsx)(e.p,{children:"pg-query-stream, JSONStream\uc744 \uc0ac\uc6a9\ud558\uc5ec \ub370\uc774\ud130\ub97c \uc2a4\ud2b8\ub9bc\uc73c\ub85c \uac00\uc838\uc640 \uba54\ubaa8\ub9ac \ubd80\uc871\uc744 \ubc29\uc9c0\ud55c\ub2e4."}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsx)(e.p,{children:"cpu bound \uc791\uc5c5\uc77c \uacbd\uc6b0 bull \uac19\uc740 \ud050\ub97c \uc0ac\uc6a9\ud558\uc5ec \ucc98\ub9ac\ud560 \uc218\ub3c4 \uc788\ub2e4."}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsx)(e.p,{children:'\ubc30\uce58\uc791\uc5c5\uc758 \uc6d0\uc790\uc131\uc774 \uc911\uc694\ud558\ub2e4\uba74 \ud558\ub098\uc758 \ud2b8\ub79c\uc7ad\uc158\uc73c\ub85c \ucc98\ub9ac\ud558\uc9c0\ub9cc "\uc77c\ubc18\uc801\uc73c\ub85c \uc5ec\ub7ec\uac1c\uc758 \ud2b8\ub79c\uc7ad\uc158\uc73c\ub85c \ucc98\ub9ac\ud55c\ub2e4."'}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsx)(e.p,{children:"bullmq\ub294 \uba54\uc778 \ud504\ub85c\uc138\uc2a4\uc640 \ubd84\ub9ac\uc2dc\ud0a4\uc9c0 \uc54a\ub294\ub2e4 \ub530\ub77c\uc11c \uc0c8\ub85c\uc6b4 \uc571\uc73c\ub85c \ub744\uc6cc\uc57c \ud55c\ub2e4."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"install",children:"install"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sh",children:"# \uc2a4\ucf00\uc974\ub9c1\r\nnpm i @nestjs/schedule\r\n\r\n# cpu-bound (\uba40\ud2f0\uc4f0\ub808\ub529), \uc5d0\ub7ec \ud578\ub4e4\ub9c1\r\ndocker run --name redis -d -p 6379:6379 redis:latest\r\nnpm i @nestjs/bull\r\nnpm i bull\r\n\r\n# \ub370\uc774\ud130 \uc2a4\ud2b8\ub9bc\r\nnpm i pg\r\nnpm i pg-query-stream\n"})}),"\n",(0,t.jsx)(e.h2,{id:"maints",children:"main.ts"}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsx)(e.p,{children:"standalone"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:'import { NestFactory } from "@nestjs/core";\r\nimport { AppModule } from "./app.module";\r\n\r\nasync function bootstrap() {\r\n  const app = await NestFactory.createApplicationContext(AppModule);\r\n}\r\nbootstrap();\n'})}),"\n",(0,t.jsx)(e.h2,{id:"appmodulets",children:"app.module.ts"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:'import { BullModule } from "@nestjs/bull";\r\nimport { Module } from "@nestjs/common";\r\nimport { ScheduleModule } from "@nestjs/schedule";\r\nimport { AppController } from "./app.controller";\r\nimport { AppService } from "./app.service";\r\nimport { BatchModule } from "./batch/batch.module";\r\n\r\n@Module({\r\n  imports: [\r\n    BatchModule,\r\n    BullModule.forRoot({\r\n      redis: {\r\n        host: "localhost",\r\n        port: 6379,\r\n      },\r\n    }),\r\n    ScheduleModule.forRoot(),\r\n  ],\r\n  controllers: [AppController],\r\n  providers: [AppService],\r\n})\r\nexport class AppModule {}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"batchmodulets",children:"batch.module.ts"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:'import { BullModule } from "@nestjs/bull";\r\nimport { Module } from "@nestjs/common";\r\nimport { BatchProcessor } from "./batch.prcessor";\r\nimport { TaskController } from "./task.controller";\r\n\r\n@Module({\r\n  imports: [\r\n    BullModule.registerQueue({\r\n      name: "batch",\r\n    }),\r\n  ],\r\n  controllers: [TaskController],\r\n  providers: [BatchProcessor],\r\n})\r\nexport class BatchModule {}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"batchprocessorts-postgres-\ub370\uc774\ud130\ub97c-stream\uc73c\ub85c-\uc77d\uc5b4\uc11c-\ucc98\ub9ac\ud558\uae30-io-bound",children:"batch.processor.ts (postgres \ub370\uc774\ud130\ub97c stream\uc73c\ub85c \uc77d\uc5b4\uc11c \ucc98\ub9ac\ud558\uae30) (io-bound)"}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsx)(e.p,{children:"concurrency\ub97c \ub192\uc774\uba74 job\uc744 \ub3d9\uc2dc\ucc98\ub9ac\ud560 \uc218 \uc788\ub2e4. (\ubcd1\ub82c\ucc98\ub9ac\uac00 \uc544\ub2d8)"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:'import { OnQueueActive, OnQueueCompleted, OnQueueFailed, Process, Processor } from "@nestjs/bull";\r\nimport { Logger, OnModuleDestroy } from "@nestjs/common";\r\nimport { Job } from "bull";\r\nimport { Pool } from "pg";\r\nimport QueryStream from "pg-query-stream";\r\n@Processor("batch")\r\nexport class BatchProcessor implements OnModuleDestroy {\r\n  private readonly logger = new Logger(BatchProcessor.name);\r\n  private readonly pgPool: Pool;\r\n\r\n  constructor() {\r\n    this.pgPool = new Pool({\r\n      host: "localhost",\r\n      user: "postgres",\r\n      password: "1234",\r\n      database: "mydb",\r\n      port: 5432,\r\n    });\r\n  }\r\n\r\n  onModuleDestroy() {\r\n    this.logger.log("Closing PostgreSQL pool...");\r\n    this.pgPool.end();\r\n  }\r\n\r\n  async queryAsStream(\r\n    query: QueryStream,\r\n    callback: (...args: any[]) => void,\r\n    error: (err: Error) => void,\r\n    complete: () => void,\r\n  ) {\r\n    this.pgPool.connect((err, client, done) => {\r\n      if (!client) {\r\n        throw new Error("DB Connection Error");\r\n      }\r\n\r\n      if (err) {\r\n        throw err;\r\n      }\r\n\r\n      const stream = client.query(query);\r\n\r\n      stream.once("error", err => {\r\n        done(); // \u2705 DB \uc5f0\uacb0 \ubc18\ud658\r\n        error(err);\r\n        stream.removeAllListeners(); // \u2705 \uc2a4\ud2b8\ub9bc \ub9ac\uc2a4\ub108 \uc81c\uac70\r\n      });\r\n\r\n      stream.on("data", callback);\r\n\r\n      stream.once("end", () => {\r\n        done(); // \u2705 DB \uc5f0\uacb0 \ubc18\ud658\r\n        complete();\r\n        stream.removeAllListeners(); // \u2705 \uc2a4\ud2b8\ub9bc \ub9ac\uc2a4\ub108 \uc81c\uac70\r\n      });\r\n    });\r\n  }\r\n\r\n  @Process({ concurrency: 1 })\r\n  async handleCron(job: Job) {\r\n    return new Promise<number>((resolve, reject) => {\r\n      const query = new QueryStream("SELECT * FROM generate_series(0, $1) num", [job.data.count]);\r\n      let sum = 0;\r\n      this.queryAsStream(\r\n        query,\r\n        ({ num }) => {\r\n          try {\r\n            sum += num;\r\n          } catch (error) {\r\n            this.logger.error(`Worker failed: ${error}`);\r\n            reject(error);\r\n          }\r\n        },\r\n        err => reject(err),\r\n        () => {\r\n          this.logger.debug("Stream completed");\r\n          resolve(sum);\r\n        },\r\n      );\r\n    });\r\n  }\r\n\r\n  @OnQueueActive()\r\n  onActive(job: Job) {\r\n    this.logger.debug(`\ud83d\udd35 Job Started: ${job.id}`);\r\n    if (job.id) console.time(`Job ${job.id}`);\r\n  }\r\n\r\n  @OnQueueCompleted()\r\n  onCompleted(job: Job, result: any) {\r\n    this.logger.debug(`\u2705 Job Completed: ${job.id}, Result: ${result}`);\r\n    if (job.id) console.timeEnd(`Job ${job.id}`);\r\n  }\r\n\r\n  @OnQueueFailed()\r\n  onFailed(job: Job, err: Error) {\r\n    this.logger.error(`\u274c Job Failed: ${job.id} - ${err.message}`);\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"batchprocessorts-worker_threads\ub85c-\ubcd1\ub82c\ucc98\ub9ac\ud558\uae30-cpu-bound",children:"batch.processor.ts (worker_threads\ub85c \ubcd1\ub82c\ucc98\ub9ac\ud558\uae30) (cpu-bound)"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:'import { OnQueueActive, OnQueueCompleted, OnQueueFailed, Process, Processor } from "@nestjs/bull";\r\nimport { Logger, OnModuleDestroy } from "@nestjs/common";\r\nimport { Job } from "bull";\r\nimport { pool, Pool, Promise } from "workerpool";\r\n\r\n@Processor("batch")\r\nexport class BatchProcessor implements OnModuleDestroy {\r\n  private readonly logger = new Logger(BatchProcessor.name);\r\n  private readonly workerPool: Pool;\r\n\r\n  constructor() {\r\n    this.workerPool = pool();\r\n  }\r\n\r\n  onModuleDestroy() {\r\n    this.logger.log("Closing PostgreSQL pool...");\r\n    this.workerPool.terminate();\r\n  }\r\n\r\n  @Process({ concurrency: 1 })\r\n  async handleCron(job: Job) {\r\n    const count = job.data.count;\r\n    /// \uac12\uc744 \ub098\ub220\uc11c \ub354\ud558\uae30\r\n    const chunkSize = 100;\r\n    let sum = 0;\r\n    const promises: Promise<number, Error>[] = [];\r\n    for (let start = 0; start < count; start += chunkSize) {\r\n      const end = Math.min(i + chunkSize, count);\r\n      const promise = this.workerPool\r\n        .exec(\r\n          (start, end) => {\r\n            let sum = 0;\r\n            for (let i = start; i < end; i++) {\r\n              sum += i;\r\n            }\r\n            return sum;\r\n          },\r\n          [start, end],\r\n        )\r\n        .catch(err => {\r\n          this.logger.error(err);\r\n          throw err;\r\n        });\r\n      promises.push(promise);\r\n    }\r\n    const results = await Promise.all(promises);\r\n    for (const result of results) {\r\n      sum += result;\r\n    }\r\n    return sum;\r\n  }\r\n\r\n  @OnQueueActive()\r\n  onActive(job: Job) {\r\n    this.logger.debug(`\ud83d\udd35 Job Started: ${job.id}`);\r\n    if (job.id) console.time(`Job ${job.id}`);\r\n  }\r\n\r\n  @OnQueueCompleted()\r\n  onCompleted(job: Job, result: any) {\r\n    this.logger.debug(`\u2705 Job Completed: ${job.id}, Result: ${result}`);\r\n    if (job.id) console.timeEnd(`Job ${job.id}`);\r\n  }\r\n\r\n  @OnQueueFailed()\r\n  onFailed(job: Job, err: Error) {\r\n    this.logger.error(`\u274c Job Failed: ${job.id} - ${err.message}`);\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"taskcontrollerts",children:"task.controller.ts"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:'import { InjectQueue } from "@nestjs/bull";\r\nimport { Controller } from "@nestjs/common";\r\nimport { Cron } from "@nestjs/schedule";\r\nimport { Queue } from "bull";\r\n\r\n@Controller()\r\nexport class TaskController {\r\n  constructor(@InjectQueue("batch") private readonly batchQueue: Queue) {}\r\n\r\n  @Cron("*/5 * * * * *")\r\n  async handleTask() {\r\n    this.batchQueue.add({ count: 10000 });\r\n  }\r\n}\n'})})]})}function u(r={}){const{wrapper:e}={...(0,s.R)(),...r.components};return e?(0,t.jsx)(e,{...r,children:(0,t.jsx)(d,{...r})}):d(r)}},529087:(r,e,n)=>{n.d(e,{R:()=>l,x:()=>c});var o=n(596363);const t={},s=o.createContext(t);function l(r){const e=o.useContext(s);return o.useMemo(function(){return"function"==typeof r?r(e):{...e,...r}},[e,r])}function c(r){let e;return e=r.disableParentContext?"function"==typeof r.components?r.components(t):r.components||t:l(r.components),o.createElement(s.Provider,{value:e},r.children)}}}]);