"use strict";(globalThis.webpackChunkmy_blog=globalThis.webpackChunkmy_blog||[]).push([[656584],{529087:(e,r,n)=>{n.d(r,{R:()=>c,x:()=>a});var t=n(596363);const o={},s=t.createContext(o);function c(e){const r=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),t.createElement(s.Provider,{value:r},e.children)}},613338:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>i,contentTitle:()=>a,default:()=>u,frontMatter:()=>c,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"redis/node-redis transaction lock","title":"redis base transaction lock","description":"\uc2e4\uc81c\ub85c\ub294 redlock\uc744 \uc0ac\uc6a9\ud574\uc57c\ud55c\ub2e4.","source":"@site/docs/redis/node-redis transaction lock.md","sourceDirName":"redis","slug":"/redis/node-redis transaction lock","permalink":"/docs/redis/node-redis transaction lock","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"node-redis transaction WATCH & MULTI & EXEC","permalink":"/docs/redis/node-redis transaction WATCH & MULTI & EXEC"},"next":{"title":"node-redlock","permalink":"/docs/redis/node-redlock"}}');var o=n(447259),s=n(529087);const c={},a="redis base transaction lock",i={},l=[{value:"withLock",id:"withlock",level:2},{value:"usage",id:"usage",level:2}];function d(e){const r={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.header,{children:(0,o.jsx)(r.h1,{id:"redis-base-transaction-lock",children:"redis base transaction lock"})}),"\n",(0,o.jsxs)(r.blockquote,{children:["\n",(0,o.jsx)(r.p,{children:"\uc2e4\uc81c\ub85c\ub294 redlock\uc744 \uc0ac\uc6a9\ud574\uc57c\ud55c\ub2e4."}),"\n"]}),"\n",(0,o.jsx)(r.h2,{id:"withlock",children:"withLock"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ts",children:'import { randomBytes } from "crypto";\r\n\r\nexport const withLock = async (key: string, cb: () => any) => {\r\n  // Initialize a few variables to control retry behavior\r\n  const retryDelay = 100; // 100ms\r\n  let retries = 20;\r\n\r\n  // Generate a random value to store at the lock key\r\n  const token = randomBytes(6).toString("hex");\r\n  // Create the lock key\r\n  const lockKey = `lock:${key}`;\r\n  // Set up a while loop to implement the retry behavior\r\n  while (retries >= 0) {\r\n    retries--;\r\n    // Try to do a SET NX operation\r\n    const acquired = await client.set(lockKey, token, {\r\n      NX: true,\r\n      PX: 2000, // lock \ub0b4\uc5d0\uc11c \ubc1c\uc0dd\ud558\ub294 crash\ub85c \uc11c\ubc84 \uc804\uccb4\uac00 \uba48\ucd9c \uc218 \uc788\ub2e4. \ud56d\uc0c1 timeout\uc744 \uc124\uc815\ud574\uc11c lock\uc744 \ud574\uc81c\ud560 \uc218 \uc788\ub3c4\ub85d \ud55c\ub2e4.\r\n    });\r\n    // IF brief pause (retryDelay) and then retry\r\n    if (!acquired) {\r\n      await pause(retryDelay);\r\n      continue;\r\n    }\r\n    try {\r\n      // ELSE the set is successful, run the callback\r\n      const result = await cb();\r\n      // and return the result\r\n      return result;\r\n    } finally {\r\n      // and Unset the locked set\r\n      await client.del(lockKey);\r\n    }\r\n  }\r\n};\r\n\r\nconst pause = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));\n'})}),"\n",(0,o.jsx)(r.h2,{id:"usage",children:"usage"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ts",children:'withLock("key", async () => {\r\n  return Promise.all([\r\n    client.rPush("color", "red"),\r\n    client.hSet("key", {\r\n      field: "value",\r\n    }),\r\n  ]);\r\n});\n'})})]})}function u(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);