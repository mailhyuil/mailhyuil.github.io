"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([["173510"],{349134:function(e,r,n){n.r(r),n.d(r,{frontMatter:()=>i,toc:()=>d,default:()=>p,metadata:()=>t,assets:()=>a,contentTitle:()=>c});var t=JSON.parse('{"id":"how to implement/\uBB38\uC790 \uC778\uC99D - SMS \uC778\uC99D","title":"\uBB38\uC790 \uC778\uC99D","description":"\uB85C\uC9C1","source":"@site/docs/how to implement/\uBB38\uC790 \uC778\uC99D - SMS \uC778\uC99D.md","sourceDirName":"how to implement","slug":"/how to implement/\uBB38\uC790 \uC778\uC99D - SMS \uC778\uC99D","permalink":"/docs/how to implement/\uBB38\uC790 \uC778\uC99D - SMS \uC778\uC99D","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\uBA71\uB4F1\uD0A4","permalink":"/docs/how to implement/\uBA71\uB4F1\uD0A4"},"next":{"title":"\uBB38\uC790 \uC778\uC99D AutoComplete","permalink":"/docs/how to implement/\uBB38\uC790 \uC778\uC99D AutoComplete"}}'),s=n(447259),o=n(255511);let i={},c="\uBB38\uC790 \uC778\uC99D",a={},d=[{value:"\uB85C\uC9C1",id:"\uB85C\uC9C1",level:2},{value:"controller",id:"controller",level:2},{value:"service",id:"service",level:2}];function l(e){let r={code:"code",h1:"h1",h2:"h2",header:"header",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"\uBB38\uC790-\uC778\uC99D",children:"\uBB38\uC790 \uC778\uC99D"})}),"\n",(0,s.jsx)(r.h2,{id:"\uB85C\uC9C1",children:"\uB85C\uC9C1"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-txt",children:"1. \uC0AC\uC6A9\uC790\uAC00 \uC11C\uBC84\uB85C \uC804\uD654\uBC88\uD638 \uC804\uC1A1 (\uC778\uC99D\uCF54\uB4DC \uC694\uCCAD)\r\n2. \uC804\uD654\uBC88\uD638\uB85C \uC778\uC99D\uCF54\uB4DC \uC804\uC1A1 (\uC778\uC99D\uCF54\uB4DC\uB294 redis\uC5D0 EX\uC640 \uD568\uAED8 \uC800\uC7A5)\r\n3. \uC0AC\uC6A9\uC790\uAC00 \uC778\uC99D\uCF54\uB4DC\uB97C \uC11C\uBC84\uB85C \uC804\uC1A1\r\n4. redis\uC5D0\uC11C \uC778\uC99D\uCF54\uB4DC \uC870\uD68C\r\n5. \uC778\uC99D\uC644\uB8CC\uC2DC \uC804\uD654\uBC88\uD638\uB97C verified \uC0C1\uD0DC\uB85C \uC5C5\uB370\uC774\uD2B8 \uD6C4 \uC800\uC7A5\r\n6. \uC0AC\uC6A9\uC790\uC758 \uC694\uCCAD \uC2DC \uC804\uD654\uBC88\uD638\uAC00 verified \uC0C1\uD0DC\uC778\uC9C0 \uD655\uC778\n"})}),"\n",(0,s.jsx)(r.h2,{id:"controller",children:"controller"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:'import { Body, Controller, Post } from "@nestjs/common";\r\nimport { ApiTags } from "@nestjs/swagger";\r\nimport { SendVerificationCodeDTO, VerifyCodeDTO } from "./sms.dto";\r\nimport { SmsService } from "./sms.service";\r\n\r\n@ApiTags("SMS")\r\n@Controller({ path: "sms", version: "1" })\r\nexport class SmsController {\r\n  constructor(private readonly smsService: SmsService) {}\r\n\r\n  @Post("send")\r\n  async sendVerificationCode(@Body() body: SendVerificationCodeDTO): Promise<void> {\r\n    const { tel } = body;\r\n    await this.smsService.sendVerificationCode(tel);\r\n  }\r\n\r\n  @Post("verify")\r\n  async verifyCode(@Body() body: VerifyCodeDTO): Promise<void> {\r\n    const { tel, code } = body;\r\n    await this.smsService.verifyCode(tel, code);\r\n  }\r\n}\n'})}),"\n",(0,s.jsx)(r.h2,{id:"service",children:"service"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:'import { RedisKey } from "@/server/redis/redis.key";\r\nimport { REDIS_CLIENT, RedisClient } from "@/server/redis/redis.provider";\r\nimport { HttpService } from "@nestjs/axios";\r\nimport {\r\n  BadRequestException,\r\n  Inject,\r\n  Injectable,\r\n  InternalServerErrorException,\r\n  Logger,\r\n  ServiceUnavailableException,\r\n  UnauthorizedException,\r\n} from "@nestjs/common";\r\nimport { plainToInstance } from "class-transformer";\r\nimport { VerifyResponseDTO } from "./sms.dto";\r\n\r\n@Injectable()\r\nexport class SmsService {\r\n  private logger = new Logger(SmsService.name);\r\n\r\n  constructor(private readonly http: HttpService, @Inject(REDIS_CLIENT) private readonly redis: RedisClient) {}\r\n\r\n  async sendVerificationCode(tel: string): Promise<void> {\r\n    const code = Math.floor(100000 + Math.random() * 900000);\r\n    const message = `\uC6D0\uD30C\uD2B8\uB108\uC2A4 \uBB38\uC758 SMS \uC778\uC99D\r\n\uC778\uC99D\uBC88\uD638: [${code}]\r\n`;\r\n\r\n    try {\r\n      // 1. Redis\uC5D0 \uBA3C\uC800 \uC800\uC7A5 (\uBE60\uB974\uACE0 \uC2E4\uD328 \uD655\uB960 \uB0AE\uC74C)\r\n      await this.redis.set(RedisKey.smsCode(tel), code, {\r\n        EX: 5 * 60, // 5 minutes\r\n      });\r\n\r\n      // 2. SMS \uBC1C\uC1A1 (\uC2E4\uD328 \uD655\uB960 \uB192\uC74C)\r\n      await this.send([tel], message);\r\n\r\n      this.logger.debug(`SMS verification code sent to ${tel}`);\r\n    } catch (error) {\r\n      // SMS \uBC1C\uC1A1 \uC2E4\uD328 \uC2DC Redis\uC5D0\uC11C \uCF54\uB4DC \uC0AD\uC81C\r\n      try {\r\n        await this.redis.del(RedisKey.smsCode(tel));\r\n      } catch {\r\n        this.logger.warn(`Failed to cleanup verification code for ${tel}`);\r\n      }\r\n      this.logger.error(`Failed to send verification code to ${tel}:`, error);\r\n    }\r\n  }\r\n\r\n  async verifyCode(tel: string, code: string) {\r\n    try {\r\n      const storedCode = await this.redis.get(RedisKey.smsCode(tel));\r\n      if (storedCode !== code) {\r\n        return plainToInstance(VerifyResponseDTO, { success: false });\r\n      }\r\n    } catch (error) {\r\n      throw new ServiceUnavailableException("\uC778\uC99D\uBC88\uD638 \uD655\uC778 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4.");\r\n    }\r\n\r\n    try {\r\n      await Promise.all([\r\n        this.redis.del(RedisKey.smsCode(tel)),\r\n        this.redis.set(RedisKey.smsVerified(tel), "true", {\r\n          EX: 5 * 60, // 5 minutes\r\n        }),\r\n      ]);\r\n    } catch (error) {\r\n      throw new ServiceUnavailableException("\uC778\uC99D\uBC88\uD638 \uD655\uC778 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4.");\r\n    }\r\n    return plainToInstance(VerifyResponseDTO, { success: true });\r\n  }\r\n\r\n  async isVerified(tel: string): Promise<boolean> {\r\n    try {\r\n      const verified = await this.redis.get(RedisKey.smsVerified(tel));\r\n      return verified === "true";\r\n    } catch (error) {\r\n      this.logger.error(`\uC778\uC99D \uC0C1\uD0DC \uD655\uC778 \uC2E4\uD328: ${tel}`, error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private async send(tels: string[], message: string): Promise<void> {\r\n    if (tels.length > 1000) {\r\n      throw new BadRequestException("\uD55C\uBC88\uC5D0 1,000\uAC74 \uC774\uC0C1\uC758 \uC804\uD654\uBC88\uD638\uC5D0 \uBB38\uC790\uB97C \uC804\uC1A1\uD560 \uC218 \uC5C6\uC2B5\uB2C8\uB2E4.");\r\n    }\r\n\r\n    const apiEndpoint = process.env.NHN_SMS_API_URL;\r\n    const apiKey = process.env.NHN_SMS_API_KEY;\r\n    const secretKey = process.env.NHN_SMS_API_SECRET;\r\n\r\n    const body = {\r\n      body: message,\r\n      sendNo: "15552571",\r\n      recipientList: tels.map(tel => ({\r\n        recipientNo: tel,\r\n        countryCode: "82",\r\n      })),\r\n    };\r\n\r\n    try {\r\n      const response = await this.http.axiosRef.post(`${apiEndpoint}/sms/v3.0/appKeys/${apiKey}/sender/sms`, body, {\r\n        headers: {\r\n          "Content-Type": "application/json;charset=UTF-8",\r\n          "X-Secret-Key": secretKey,\r\n        },\r\n      });\r\n\r\n      if (!response.data.header.isSuccessful) {\r\n        this.logger.error("SMS API Error:", response.data.header.resultMessage);\r\n        throw new InternalServerErrorException("\uBB38\uC790 \uBC1C\uC1A1 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4. \uC7A0\uC2DC \uD6C4 \uB2E4\uC2DC \uC2DC\uB3C4\uD574 \uC8FC\uC138\uC694.");\r\n      }\r\n\r\n      this.logger.debug(`SMS sent successfully to ${tels.length} recipients`);\r\n    } catch (error) {\r\n      this.logger.error("SMS send failed:", error);\r\n\r\n      if (error.response?.status === 429) {\r\n        throw new BadRequestException("SMS \uBC1C\uC1A1 \uD55C\uB3C4\uAC00 \uCD08\uACFC\uB418\uC5C8\uC2B5\uB2C8\uB2E4.");\r\n      }\r\n      if (error.response?.status === 401) {\r\n        throw new UnauthorizedException("SMS \uC11C\uBE44\uC2A4 \uC778\uC99D\uC5D0 \uC2E4\uD328\uD588\uC2B5\uB2C8\uB2E4.");\r\n      }\r\n\r\n      throw new InternalServerErrorException("\uBB38\uC790 \uBC1C\uC1A1 \uC911 \uC624\uB958\uAC00 \uBC1C\uC0DD\uD588\uC2B5\uB2C8\uB2E4. \uC7A0\uC2DC \uD6C4 \uB2E4\uC2DC \uC2DC\uB3C4\uD574 \uC8FC\uC138\uC694.");\r\n    }\r\n  }\r\n}\n'})})]})}function p(e={}){let{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},255511:function(e,r,n){n.d(r,{R:()=>i,x:()=>c});var t=n(596363);let s={},o=t.createContext(s);function i(e){let r=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(o.Provider,{value:r},e.children)}}}]);