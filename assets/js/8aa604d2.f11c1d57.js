"use strict";(globalThis.webpackChunkmy_blog=globalThis.webpackChunkmy_blog||[]).push([[37437],{529087:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>a});var t=r(596363);const i={},o=t.createContext(i);function s(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(o.Provider,{value:n},e.children)}},728959:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"build/gulp automate release","title":"gulp","description":"install","source":"@site/docs/build/gulp automate release.md","sourceDirName":"build","slug":"/build/gulp automate release","permalink":"/docs/build/gulp automate release","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"tsc plugin","permalink":"/docs/build/compile tsc plugin"},"next":{"title":"gulp","permalink":"/docs/build/gulp"}}');var i=r(447259),o=r(529087);const s={},a="gulp",l={},c=[{value:"install",id:"install",level:2},{value:"gulpfile.js",id:"gulpfilejs",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"gulp",children:"gulp"})}),"\n",(0,i.jsx)(n.h2,{id:"install",children:"install"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"npm i -D conventional-recommended-bump\r\nnpm i -D conventional-changelog-cli\r\nnpm i -D conventional-github-releaser\r\nnpm i -D dotenv\r\nnpm i -D execa\n"})}),"\n",(0,i.jsx)(n.h2,{id:"gulpfilejs",children:"gulpfile.js"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'const gulp = require("gulp");\r\nconst { promisify } = require("util");\r\nconst conventionalRecommendedBump = require("conventional-recommended-bump");\r\nconst conventionalGithubReleaser = require("conventional-github-releaser");\r\nconst execa = require("execa");\r\nconst dotenv = require("dotenv");\r\nconst fs = require("fs");\r\n\r\n// load environment variables\r\nconst result = dotenv.config();\r\n\r\nif (result.error) {\r\n  throw result.error;\r\n}\r\n\r\n// Conventional Changelog preset\r\nconst preset = "angular";\r\n// print output of commands into the terminal\r\nconst stdio = "inherit";\r\n\r\nasync function bumpVersion() {\r\n  // get recommended version bump based on commits\r\n  const { releaseType } = await promisify(conventionalRecommendedBump)({ preset });\r\n  // bump version without committing and tagging\r\n  await execa("npm", ["version", releaseType, "--no-git-tag-version"], {\r\n    stdio,\r\n  });\r\n}\r\n\r\nasync function changelog() {\r\n  await execa("npx", ["conventional-changelog", "--preset", preset, "--infile", "CHANGELOG.md", "--same-file"], {\r\n    stdio,\r\n  });\r\n}\r\n\r\nasync function commitTagPush() {\r\n  // even though we could get away with "require" in this case, we\'re taking the safe route\r\n  // because "require" caches the value, so if we happen to use "require" again somewhere else\r\n  // we wouldn\'t get the current value, but the value of the last time we called "require"\r\n  const { version } = JSON.parse(await promisify(fs.readFile)("package.json"));\r\n  const commitMsg = `chore: release ${version}`;\r\n  await execa("git", ["add", "."], { stdio });\r\n  await execa("git", ["commit", "--message", commitMsg], { stdio });\r\n  await execa("git", ["tag", `v${version}`], { stdio });\r\n  await execa("git", ["push", "--follow-tags"], { stdio });\r\n}\r\n\r\nfunction githubRelease(done) {\r\n  conventionalGithubReleaser({ type: "oauth", token: process.env.GH_TOKEN }, { preset }, done);\r\n}\r\n\r\nexports.release = gulp.series(bumpVersion, changelog, commitTagPush, githubRelease);\n'})})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}}}]);