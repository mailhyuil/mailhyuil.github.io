"use strict";(globalThis.webpackChunkmy_blog=globalThis.webpackChunkmy_blog||[]).push([[207562],{358273:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"nodejs/nodejs glob - shell pattern matching","title":"nodejs glob","description":"Shell Pattern Matching \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud574\uc11c \ud30c\uc77c\uc744 \uc77d\uc5b4\uc62c \uc218 \uc788\ub294 \ubaa8\ub4c8","source":"@site/docs/nodejs/nodejs glob - shell pattern matching.md","sourceDirName":"nodejs","slug":"/nodejs/nodejs glob - shell pattern matching","permalink":"/docs/nodejs/nodejs glob - shell pattern matching","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"nodejs geocoding","permalink":"/docs/nodejs/nodejs geocoding"},"next":{"title":"nodejs helmet","permalink":"/docs/nodejs/nodejs helmet"}}');var o=t(447259),s=t(529087);const l={},a="nodejs glob",i={},c=[{value:"install",id:"install",level:2},{value:"usage",id:"usage",level:2}];function d(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"nodejs-glob",children:"nodejs glob"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"Shell Pattern Matching \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud574\uc11c \ud30c\uc77c\uc744 \uc77d\uc5b4\uc62c \uc218 \uc788\ub294 \ubaa8\ub4c8"}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:["Shell Pattern Matching: ",(0,o.jsx)(n.code,{children:"*"}),", ",(0,o.jsx)(n.code,{children:"?"}),", ",(0,o.jsx)(n.code,{children:"[]"}),", ",(0,o.jsx)(n.code,{children:"{}"})]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"install",children:"install"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:"npm i glob\n"})}),"\n",(0,o.jsx)(n.h2,{id:"usage",children:"usage"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'// load using import\r\nimport { glob, globSync, globStream, globStreamSync, Glob } from "glob";\r\n// or using commonjs, that\'s fine, too\r\nconst { glob, globSync, globStream, globStreamSync, Glob } = require("glob");\r\n\r\n// the main glob() and globSync() resolve/return array of filenames\r\n\r\n// all js files, but don\'t look in node_modules\r\nconst jsfiles = await glob("**/*.js", { ignore: "node_modules/**" });\r\n\r\n// pass in a signal to cancel the glob walk\r\nconst stopAfter100ms = await glob("**/*.css", {\r\n  signal: AbortSignal.timeout(100),\r\n});\r\n\r\n// multiple patterns supported as well\r\nconst images = await glob(["css/*.{png,jpeg}", "public/*.{png,jpeg}"]);\r\n\r\n// but of course you can do that with the glob pattern also\r\n// the sync function is the same, just returns a string[] instead\r\n// of Promise<string[]>\r\nconst imagesAlt = globSync("{css,public}/*.{png,jpeg}");\r\n\r\n// you can also stream them, this is a Minipass stream\r\nconst filesStream = globStream(["**/*.dat", "logs/**/*.log"]);\r\n\r\n// construct a Glob object if you wanna do it that way, which\r\n// allows for much faster walks if you have to look in the same\r\n// folder multiple times.\r\nconst g = new Glob("**/foo", {});\r\n// glob objects are async iterators, can also do globIterate() or\r\n// g.iterate(), same deal\r\nfor await (const file of g) {\r\n  console.log("found a foo file:", file);\r\n}\r\n// pass a glob as the glob options to reuse its settings and caches\r\nconst g2 = new Glob("**/bar", g);\r\n// sync iteration works as well\r\nfor (const file of g2) {\r\n  console.log("found a bar file:", file);\r\n}\r\n\r\n// you can also pass withFileTypes: true to get Path objects\r\n// these are like a Dirent, but with some more added powers\r\n// check out http://npm.im/path-scurry for more info on their API\r\nconst g3 = new Glob("**/baz/**", { withFileTypes: true });\r\ng3.stream().on("data", path => {\r\n  console.log(\r\n    "got a path object",\r\n    path.fullpath(),\r\n    path.isDirectory(),\r\n    path.readdirSync().map(e => e.name),\r\n  );\r\n});\r\n\r\n// if you use stat:true and withFileTypes, you can sort results\r\n// by things like modified time, filter by permission mode, etc.\r\n// All Stats fields will be available in that case. Slightly\r\n// slower, though.\r\n// For example:\r\nconst results = await glob("**", { stat: true, withFileTypes: true });\r\n\r\nconst timeSortedFiles = results.sort((a, b) => a.mtimeMs - b.mtimeMs).map(path => path.fullpath());\r\n\r\nconst groupReadableFiles = results.filter(path => path.mode & 0o040).map(path => path.fullpath());\r\n\r\n// custom ignores can be done like this, for example by saying\r\n// you\'ll ignore all markdown files, and all folders named \'docs\'\r\nconst customIgnoreResults = await glob("**", {\r\n  ignore: {\r\n    ignored: p => /\\.md$/.test(p.name),\r\n    childrenIgnored: p => p.isNamed("docs"),\r\n  },\r\n});\r\n\r\n// another fun use case, only return files with the same name as\r\n// their parent folder, plus either `.ts` or `.js`\r\nconst folderNamedModules = await glob("**/*.{ts,js}", {\r\n  ignore: {\r\n    ignored: p => {\r\n      const pp = p.parent;\r\n      return !(p.isNamed(pp.name + ".ts") || p.isNamed(pp.name + ".js"));\r\n    },\r\n  },\r\n});\r\n\r\n// find all files edited in the last hour, to do this, we ignore\r\n// all of them that are more than an hour old\r\nconst newFiles = await glob("**", {\r\n  // need stat so we have mtime\r\n  stat: true,\r\n  // only want the files, not the dirs\r\n  nodir: true,\r\n  ignore: {\r\n    ignored: p => {\r\n      return new Date() - p.mtime > 60 * 60 * 1000;\r\n    },\r\n    // could add similar childrenIgnored here as well, but\r\n    // directory mtime is inconsistent across platforms, so\r\n    // probably better not to, unless you know the system\r\n    // tracks this reliably.\r\n  },\r\n});\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},529087:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var r=t(596363);const o={},s=r.createContext(o);function l(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);