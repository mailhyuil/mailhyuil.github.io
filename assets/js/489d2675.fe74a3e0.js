"use strict";(globalThis.webpackChunkmy_blog=globalThis.webpackChunkmy_blog||[]).push([[697876],{529087:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var r=n(596363);const s={},o=r.createContext(s);function i(e){const t=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:t},e.children)}},958538:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"nestjs/nest timeout","title":"nest timeout","description":"","source":"@site/docs/nestjs/nest timeout.md","sourceDirName":"nestjs","slug":"/nestjs/nest timeout","permalink":"/docs/nestjs/nest timeout","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"nest throttling & rate-limiting","permalink":"/docs/nestjs/nest throttling & rate-limiting"},"next":{"title":"nest versioning","permalink":"/docs/nestjs/nest versioning"}}');var s=n(447259),o=n(529087);const i={},a="nest timeout",c={},l=[];function m(e){const t={code:"code",h1:"h1",header:"header",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"nest-timeout",children:"nest timeout"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:'import { NestFactory } from "@nestjs/core";\r\n// import { FastifyAdapter  } from \'@nestjs/platform-fastify\'\r\nimport { AppModule } from "./app.module";\r\n\r\nasync function bootstrap() {\r\n  const app = await NestFactory.create(AppModule);\r\n\r\n  const server = app.getHttpServer(); // http.Server\r\n\r\n  // The timeout value for sockets\r\n  server.setTimeout(2 * 60 * 1000);\r\n  // The number of milliseconds of inactivity a server needs to wait for additional incoming data\r\n  server.keepAliveTimeout = 30000;\r\n  // Limit the amount of time the parser will wait to receive the complete HTTP headers\r\n  server.headersTimeout = 31000;\r\n\r\n  await app.listen(3000);\r\n}\r\nbootstrap();\n'})})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}}}]);