"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([["152859"],{502765:function(e,r,o){o.r(r),o.d(r,{frontMatter:()=>c,toc:()=>p,default:()=>d,metadata:()=>n,assets:()=>a,contentTitle:()=>i});var n=JSON.parse('{"id":"docker/docker-compose yaml postgres replication","title":"docker-compose postgres replication","description":"init.sql","source":"@site/docs/docker/docker-compose yaml postgres replication.md","sourceDirName":"docker","slug":"/docker/docker-compose yaml postgres replication","permalink":"/docs/docker/docker-compose yaml postgres replication","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"docker-compose phpMyAdmin","permalink":"/docs/docker/docker-compose yaml phpMyAdmin"},"next":{"title":"docker-compose postgres","permalink":"/docs/docker/docker-compose yaml postgres"}}'),s=o(447259),t=o(255511);let c={},i="docker-compose postgres replication",a={},p=[{value:"init.sql",id:"initsql",level:2},{value:"docker-compose.yml",id:"docker-composeyml",level:2}];function l(e){let r={code:"code",h1:"h1",h2:"h2",header:"header",pre:"pre",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"docker-compose-postgres-replication",children:"docker-compose postgres replication"})}),"\n",(0,s.jsx)(r.h2,{id:"initsql",children:"init.sql"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-sql",children:"CREATE USER replicator WITH REPLICATION ENCRYPTED PASSWORD 'replicator_password';\r\nSELECT pg_create_physical_replication_slot('replication_slot');\n"})}),"\n",(0,s.jsx)(r.h2,{id:"docker-composeyml",children:"docker-compose.yml"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-yaml",children:'version: "3.8"\r\nx-postgres-common: &postgres-common\r\n  image: postgres:14-alpine\r\n  user: postgres\r\n  restart: always\r\n  healthcheck:\r\n    test: "pg_isready -U user --dbname=postgres"\r\n    interval: 10s\r\n    timeout: 5s\r\n    retries: 5\r\n\r\nservices:\r\n  postgres_primary:\r\n    <<: *postgres-common\r\n    ports:\r\n      - 5433:5432\r\n    environment:\r\n      POSTGRES_USER: user\r\n      POSTGRES_PASSWORD: password\r\n      POSTGRES_DB: postgres\r\n      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\\nhost replication all 0.0.0.0/0 md5"\r\n      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"\r\n    command: |\r\n      postgres \r\n      -c wal_level=replica \r\n      -c max_wal_senders=10 \r\n      -c max_replication_slots=10\r\n      -c hot_standby=on \r\n      -c hot_standby_feedback=on\r\n    volumes:\r\n      - ./init.sql:/docker-entrypoint-initdb.d/init.sql\r\n\r\n  postgres_replica:\r\n    <<: *postgres-common\r\n    ports:\r\n      - 5434:5432\r\n    environment:\r\n      PGUSER: replicator\r\n      PGPASSWORD: replicator_password\r\n    command: |\r\n      bash -c "\r\n      until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=postgres_primary --port=5432\r\n      do\r\n      echo \'Waiting for primary to connect...\'\r\n      sleep 1s\r\n      done\r\n      echo \'Backup done, starting replica...\'\r\n      chmod 0700 /var/lib/postgresql/data\r\n      postgres\r\n      "\r\n    depends_on:\r\n      - postgres_primary\n'})})]})}function d(e={}){let{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},255511:function(e,r,o){o.d(r,{R:()=>c,x:()=>i});var n=o(596363);let s={},t=n.createContext(s);function c(e){let r=n.useContext(t);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),n.createElement(t.Provider,{value:r},e.children)}}}]);