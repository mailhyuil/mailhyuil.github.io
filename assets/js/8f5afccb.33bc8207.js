"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([["24170"],{327803:function(e,r,n){n.r(r),n.d(r,{frontMatter:()=>a,toc:()=>l,default:()=>i,metadata:()=>t,assets:()=>c,contentTitle:()=>p});var t=JSON.parse('{"id":"protocol/L7 MCP mcp-framework server","title":"MCP mcp-framework server","description":"install","source":"@site/docs/protocol/L7 MCP mcp-framework server.md","sourceDirName":"protocol","slug":"/protocol/L7 MCP mcp-framework server","permalink":"/docs/protocol/L7 MCP mcp-framework server","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"MCP mcp-framework client","permalink":"/docs/protocol/L7 MCP mcp-framework client - http-stream & sse"},"next":{"title":"MCP method","permalink":"/docs/protocol/L7 MCP method"}}'),o=n(447259),s=n(255511);let a={},p="MCP mcp-framework server",c={},l=[{value:"install",id:"install",level:2},{value:"index.ts",id:"indexts",level:2},{value:"tool",id:"tool",level:2},{value:"resource",id:"resource",level:2},{value:"prompt",id:"prompt",level:2}];function m(e){let r={code:"code",h1:"h1",h2:"h2",header:"header",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.header,{children:(0,o.jsx)(r.h1,{id:"mcp-mcp-framework-server",children:"MCP mcp-framework server"})}),"\n",(0,o.jsx)(r.h2,{id:"install",children:"install"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-sh",children:"npm i mcp-framework # MCP Server Framework\r\nmcp create my-mcp\r\nmcp add tool example\r\nmcp add resource example\r\nmcp add prompt example\r\n\r\n# test\r\nnpx @modelcontextprotocol/inspector node ./dist/index.js # MCP Server\uC758 \uC0C1\uD0DC\uB97C \uC2DC\uAC01\uD654\uD558\uAE30 \uC704\uD55C Inspector\n"})}),"\n",(0,o.jsx)(r.h2,{id:"indexts",children:"index.ts"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ts",children:'import { MCPServer } from "mcp-framework";\r\n\r\nconst server = new MCPServer({\r\n  transport: {\r\n    type: "http-stream", // stdio, http-stream, sse(deprecated)\r\n    options: {\r\n      port: 8080,\r\n      responseMode: "stream", // batch, stream\r\n    },\r\n  },\r\n});\r\n\r\nserver.start();\n'})}),"\n",(0,o.jsx)(r.h2,{id:"tool",children:"tool"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ts",children:'import { MCPTool } from "mcp-framework";\r\nimport { z } from "zod";\r\n\r\ninterface ExampleInput {\r\n  message: string;\r\n}\r\n\r\nclass ExampleTool extends MCPTool<ExampleInput> {\r\n  name = "example_tool";\r\n  description = "An example tool that processes messages";\r\n\r\n  schema = {\r\n    message: {\r\n      type: z.string(),\r\n      description: "Message to process",\r\n    },\r\n  };\r\n\r\n  async execute(input: ExampleInput) {\r\n    return `Processed: ${input.message}`;\r\n  }\r\n}\r\n\r\nexport default ExampleTool;\n'})}),"\n",(0,o.jsx)(r.h2,{id:"resource",children:"resource"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ts",children:'import { MCPResource, ResourceContent } from "mcp-framework";\r\n\r\nclass ExampleResource extends MCPResource {\r\n  uri = "resource://example";\r\n  name = "Example";\r\n  description = "Example resource description";\r\n  mimeType = "application/json";\r\n\r\n  async read(): Promise<ResourceContent[]> {\r\n    return [\r\n      {\r\n        uri: this.uri,\r\n        mimeType: this.mimeType,\r\n        text: JSON.stringify({ message: "Hello from Example resource" }),\r\n      },\r\n    ];\r\n  }\r\n}\r\n\r\nexport default ExampleResource;\n'})}),"\n",(0,o.jsx)(r.h2,{id:"prompt",children:"prompt"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ts",children:'import { MCPPrompt } from "mcp-framework";\r\nimport { z } from "zod";\r\n\r\ninterface ExampleInput {\r\n  message: string;\r\n}\r\n\r\nclass ExamplePrompt extends MCPPrompt<ExampleInput> {\r\n  name = "example";\r\n  description = "Example prompt description";\r\n\r\n  schema = {\r\n    message: {\r\n      type: z.string(),\r\n      description: "Message to process",\r\n      required: true,\r\n    },\r\n  };\r\n\r\n  async generateMessages({ message }: ExampleInput) {\r\n    return [\r\n      {\r\n        role: "user",\r\n        content: {\r\n          type: "text",\r\n          text: message,\r\n        },\r\n      },\r\n    ];\r\n  }\r\n}\r\n\r\nexport default ExamplePrompt;\n'})})]})}function i(e={}){let{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(m,{...e})}):m(e)}},255511:function(e,r,n){n.d(r,{R:()=>a,x:()=>p});var t=n(596363);let o={},s=t.createContext(o);function a(e){let r=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function p(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(s.Provider,{value:r},e.children)}}}]);