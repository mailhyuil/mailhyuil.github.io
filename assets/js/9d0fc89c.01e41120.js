"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([["865328"],{39112:function(r,e,n){n.r(e),n.d(e,{frontMatter:()=>l,toc:()=>i,default:()=>u,metadata:()=>o,assets:()=>a,contentTitle:()=>c});var o=JSON.parse('{"id":"nestjs/nest advanced batch","title":"nest advanced batch","description":"\uB108\uBB34 \uB9CE\uC740 \uB370\uC774\uD130\uB97C \uAC00\uC838\uC624\uBA74 \uBA54\uBAA8\uB9AC \uBD80\uC871\uC774 \uBC1C\uC0DD\uD560 \uC218 \uC788\uB2E4.","source":"@site/docs/nestjs/nest advanced batch.md","sourceDirName":"nestjs","slug":"/nestjs/nest advanced batch","permalink":"/docs/nestjs/nest advanced batch","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"nest advanced SSE \uC7AC\uC5F0\uACB0 (Last-Event-Id)","permalink":"/docs/nestjs/nest advanced SSE \uC7AC\uC5F0\uACB0 - Last-Event-ID"},"next":{"title":"nest cqrs AggregateRoot","permalink":"/docs/nestjs/nest advanced cqrs AggregateRoot"}}'),t=n(447259),s=n(255511);let l={},c="nest advanced batch",a={},i=[{value:"install",id:"install",level:2},{value:"main.ts",id:"maints",level:2},{value:"app.module.ts",id:"appmodulets",level:2},{value:"batch.module.ts",id:"batchmodulets",level:2},{value:"batch.processor.ts (postgres \uB370\uC774\uD130\uB97C stream\uC73C\uB85C \uC77D\uC5B4\uC11C \uCC98\uB9AC\uD558\uAE30) (io-bound)",id:"batchprocessorts-postgres-\uB370\uC774\uD130\uB97C-stream\uC73C\uB85C-\uC77D\uC5B4\uC11C-\uCC98\uB9AC\uD558\uAE30-io-bound",level:2},{value:"batch.processor.ts (worker_threads\uB85C \uBCD1\uB82C\uCC98\uB9AC\uD558\uAE30) (cpu-bound)",id:"batchprocessorts-worker_threads\uB85C-\uBCD1\uB82C\uCC98\uB9AC\uD558\uAE30-cpu-bound",level:2},{value:"task.controller.ts",id:"taskcontrollerts",level:2}];function d(r){let e={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...r.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"nest-advanced-batch",children:"nest advanced batch"})}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsx)(e.p,{children:"\uB108\uBB34 \uB9CE\uC740 \uB370\uC774\uD130\uB97C \uAC00\uC838\uC624\uBA74 \uBA54\uBAA8\uB9AC \uBD80\uC871\uC774 \uBC1C\uC0DD\uD560 \uC218 \uC788\uB2E4."}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsx)(e.p,{children:"pg-query-stream, JSONStream\uC744 \uC0AC\uC6A9\uD558\uC5EC \uB370\uC774\uD130\uB97C \uC2A4\uD2B8\uB9BC\uC73C\uB85C \uAC00\uC838\uC640 \uBA54\uBAA8\uB9AC \uBD80\uC871\uC744 \uBC29\uC9C0\uD55C\uB2E4."}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsx)(e.p,{children:"cpu bound \uC791\uC5C5\uC77C \uACBD\uC6B0 bull \uAC19\uC740 \uD050\uB97C \uC0AC\uC6A9\uD558\uC5EC \uCC98\uB9AC\uD560 \uC218\uB3C4 \uC788\uB2E4."}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsx)(e.p,{children:'\uBC30\uCE58\uC791\uC5C5\uC758 \uC6D0\uC790\uC131\uC774 \uC911\uC694\uD558\uB2E4\uBA74 \uD558\uB098\uC758 \uD2B8\uB79C\uC7AD\uC158\uC73C\uB85C \uCC98\uB9AC\uD558\uC9C0\uB9CC "\uC77C\uBC18\uC801\uC73C\uB85C \uC5EC\uB7EC\uAC1C\uC758 \uD2B8\uB79C\uC7AD\uC158\uC73C\uB85C \uCC98\uB9AC\uD55C\uB2E4."'}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsx)(e.p,{children:"bullmq\uB294 \uBA54\uC778 \uD504\uB85C\uC138\uC2A4\uC640 \uBD84\uB9AC\uC2DC\uD0A4\uC9C0 \uC54A\uB294\uB2E4 \uB530\uB77C\uC11C \uC0C8\uB85C\uC6B4 \uC571\uC73C\uB85C \uB744\uC6CC\uC57C \uD55C\uB2E4."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"install",children:"install"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sh",children:"# \uC2A4\uCF00\uC974\uB9C1\r\nnpm i @nestjs/schedule\r\n\r\n# cpu-bound (\uBA40\uD2F0\uC4F0\uB808\uB529), \uC5D0\uB7EC \uD578\uB4E4\uB9C1\r\ndocker run --name redis -d -p 6379:6379 redis:latest\r\nnpm i @nestjs/bull\r\nnpm i bull\r\n\r\n# \uB370\uC774\uD130 \uC2A4\uD2B8\uB9BC\r\nnpm i pg\r\nnpm i pg-query-stream\n"})}),"\n",(0,t.jsx)(e.h2,{id:"maints",children:"main.ts"}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsx)(e.p,{children:"standalone"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:'import { NestFactory } from "@nestjs/core";\r\nimport { AppModule } from "./app.module";\r\n\r\nasync function bootstrap() {\r\n  const app = await NestFactory.createApplicationContext(AppModule);\r\n}\r\nbootstrap();\n'})}),"\n",(0,t.jsx)(e.h2,{id:"appmodulets",children:"app.module.ts"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:'import { BullModule } from "@nestjs/bull";\r\nimport { Module } from "@nestjs/common";\r\nimport { ScheduleModule } from "@nestjs/schedule";\r\nimport { AppController } from "./app.controller";\r\nimport { AppService } from "./app.service";\r\nimport { BatchModule } from "./batch/batch.module";\r\n\r\n@Module({\r\n  imports: [\r\n    BatchModule,\r\n    BullModule.forRoot({\r\n      redis: {\r\n        host: "localhost",\r\n        port: 6379,\r\n      },\r\n    }),\r\n    ScheduleModule.forRoot(),\r\n  ],\r\n  controllers: [AppController],\r\n  providers: [AppService],\r\n})\r\nexport class AppModule {}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"batchmodulets",children:"batch.module.ts"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:'import { BullModule } from "@nestjs/bull";\r\nimport { Module } from "@nestjs/common";\r\nimport { BatchProcessor } from "./batch.prcessor";\r\nimport { TaskController } from "./task.controller";\r\n\r\n@Module({\r\n  imports: [\r\n    BullModule.registerQueue({\r\n      name: "batch",\r\n    }),\r\n  ],\r\n  controllers: [TaskController],\r\n  providers: [BatchProcessor],\r\n})\r\nexport class BatchModule {}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"batchprocessorts-postgres-\uB370\uC774\uD130\uB97C-stream\uC73C\uB85C-\uC77D\uC5B4\uC11C-\uCC98\uB9AC\uD558\uAE30-io-bound",children:"batch.processor.ts (postgres \uB370\uC774\uD130\uB97C stream\uC73C\uB85C \uC77D\uC5B4\uC11C \uCC98\uB9AC\uD558\uAE30) (io-bound)"}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsx)(e.p,{children:"concurrency\uB97C \uB192\uC774\uBA74 job\uC744 \uB3D9\uC2DC\uCC98\uB9AC\uD560 \uC218 \uC788\uB2E4. (\uBCD1\uB82C\uCC98\uB9AC\uAC00 \uC544\uB2D8)"}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:'import { OnQueueActive, OnQueueCompleted, OnQueueFailed, Process, Processor } from "@nestjs/bull";\r\nimport { Logger, OnModuleDestroy } from "@nestjs/common";\r\nimport { Job } from "bull";\r\nimport { Pool } from "pg";\r\nimport QueryStream from "pg-query-stream";\r\n@Processor("batch")\r\nexport class BatchProcessor implements OnModuleDestroy {\r\n  private readonly logger = new Logger(BatchProcessor.name);\r\n  private readonly pgPool: Pool;\r\n\r\n  constructor() {\r\n    this.pgPool = new Pool({\r\n      host: "localhost",\r\n      user: "postgres",\r\n      password: "1234",\r\n      database: "mydb",\r\n      port: 5432,\r\n    });\r\n  }\r\n\r\n  onModuleDestroy() {\r\n    this.logger.log("Closing PostgreSQL pool...");\r\n    this.pgPool.end();\r\n  }\r\n\r\n  async queryAsStream(\r\n    query: QueryStream,\r\n    callback: (...args: any[]) => void,\r\n    error: (err: Error) => void,\r\n    complete: () => void,\r\n  ) {\r\n    this.pgPool.connect((err, client, done) => {\r\n      if (!client) {\r\n        throw new Error("DB Connection Error");\r\n      }\r\n\r\n      if (err) {\r\n        throw err;\r\n      }\r\n\r\n      const stream = client.query(query);\r\n\r\n      stream.once("error", err => {\r\n        done(); // \u2705 DB \uC5F0\uACB0 \uBC18\uD658\r\n        error(err);\r\n        stream.removeAllListeners(); // \u2705 \uC2A4\uD2B8\uB9BC \uB9AC\uC2A4\uB108 \uC81C\uAC70\r\n      });\r\n\r\n      stream.on("data", callback);\r\n\r\n      stream.once("end", () => {\r\n        done(); // \u2705 DB \uC5F0\uACB0 \uBC18\uD658\r\n        complete();\r\n        stream.removeAllListeners(); // \u2705 \uC2A4\uD2B8\uB9BC \uB9AC\uC2A4\uB108 \uC81C\uAC70\r\n      });\r\n    });\r\n  }\r\n\r\n  @Process({ concurrency: 1 })\r\n  async handleCron(job: Job) {\r\n    return new Promise<number>((resolve, reject) => {\r\n      const query = new QueryStream("SELECT * FROM generate_series(0, $1) num", [job.data.count]);\r\n      let sum = 0;\r\n      this.queryAsStream(\r\n        query,\r\n        ({ num }) => {\r\n          try {\r\n            sum += num;\r\n          } catch (error) {\r\n            this.logger.error(`Worker failed: ${error}`);\r\n            reject(error);\r\n          }\r\n        },\r\n        err => reject(err),\r\n        () => {\r\n          this.logger.debug("Stream completed");\r\n          resolve(sum);\r\n        },\r\n      );\r\n    });\r\n  }\r\n\r\n  @OnQueueActive()\r\n  onActive(job: Job) {\r\n    this.logger.debug(`\u{1F535} Job Started: ${job.id}`);\r\n    if (job.id) console.time(`Job ${job.id}`);\r\n  }\r\n\r\n  @OnQueueCompleted()\r\n  onCompleted(job: Job, result: any) {\r\n    this.logger.debug(`\u2705 Job Completed: ${job.id}, Result: ${result}`);\r\n    if (job.id) console.timeEnd(`Job ${job.id}`);\r\n  }\r\n\r\n  @OnQueueFailed()\r\n  onFailed(job: Job, err: Error) {\r\n    this.logger.error(`\u274C Job Failed: ${job.id} - ${err.message}`);\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"batchprocessorts-worker_threads\uB85C-\uBCD1\uB82C\uCC98\uB9AC\uD558\uAE30-cpu-bound",children:"batch.processor.ts (worker_threads\uB85C \uBCD1\uB82C\uCC98\uB9AC\uD558\uAE30) (cpu-bound)"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:'import { OnQueueActive, OnQueueCompleted, OnQueueFailed, Process, Processor } from "@nestjs/bull";\r\nimport { Logger, OnModuleDestroy } from "@nestjs/common";\r\nimport { Job } from "bull";\r\nimport { pool, Pool, Promise } from "workerpool";\r\n\r\n@Processor("batch")\r\nexport class BatchProcessor implements OnModuleDestroy {\r\n  private readonly logger = new Logger(BatchProcessor.name);\r\n  private readonly workerPool: Pool;\r\n\r\n  constructor() {\r\n    this.workerPool = pool();\r\n  }\r\n\r\n  onModuleDestroy() {\r\n    this.logger.log("Closing PostgreSQL pool...");\r\n    this.workerPool.terminate();\r\n  }\r\n\r\n  @Process({ concurrency: 1 })\r\n  async handleCron(job: Job) {\r\n    const count = job.data.count;\r\n    /// \uAC12\uC744 \uB098\uB220\uC11C \uB354\uD558\uAE30\r\n    const chunkSize = 100;\r\n    let sum = 0;\r\n    const promises: Promise<number, Error>[] = [];\r\n    for (let start = 0; start < count; start += chunkSize) {\r\n      const end = Math.min(i + chunkSize, count);\r\n      const promise = this.workerPool\r\n        .exec(\r\n          (start, end) => {\r\n            let sum = 0;\r\n            for (let i = start; i < end; i++) {\r\n              sum += i;\r\n            }\r\n            return sum;\r\n          },\r\n          [start, end],\r\n        )\r\n        .catch(err => {\r\n          this.logger.error(err);\r\n          throw err;\r\n        });\r\n      promises.push(promise);\r\n    }\r\n    const results = await Promise.all(promises);\r\n    for (const result of results) {\r\n      sum += result;\r\n    }\r\n    return sum;\r\n  }\r\n\r\n  @OnQueueActive()\r\n  onActive(job: Job) {\r\n    this.logger.debug(`\u{1F535} Job Started: ${job.id}`);\r\n    if (job.id) console.time(`Job ${job.id}`);\r\n  }\r\n\r\n  @OnQueueCompleted()\r\n  onCompleted(job: Job, result: any) {\r\n    this.logger.debug(`\u2705 Job Completed: ${job.id}, Result: ${result}`);\r\n    if (job.id) console.timeEnd(`Job ${job.id}`);\r\n  }\r\n\r\n  @OnQueueFailed()\r\n  onFailed(job: Job, err: Error) {\r\n    this.logger.error(`\u274C Job Failed: ${job.id} - ${err.message}`);\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(e.h2,{id:"taskcontrollerts",children:"task.controller.ts"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:'import { InjectQueue } from "@nestjs/bull";\r\nimport { Controller } from "@nestjs/common";\r\nimport { Cron } from "@nestjs/schedule";\r\nimport { Queue } from "bull";\r\n\r\n@Controller()\r\nexport class TaskController {\r\n  constructor(@InjectQueue("batch") private readonly batchQueue: Queue) {}\r\n\r\n  @Cron("*/5 * * * * *")\r\n  async handleTask() {\r\n    this.batchQueue.add({ count: 10000 });\r\n  }\r\n}\n'})})]})}function u(r={}){let{wrapper:e}={...(0,s.R)(),...r.components};return e?(0,t.jsx)(e,{...r,children:(0,t.jsx)(d,{...r})}):d(r)}},255511:function(r,e,n){n.d(e,{R:()=>l,x:()=>c});var o=n(596363);let t={},s=o.createContext(t);function l(r){let e=o.useContext(s);return o.useMemo(function(){return"function"==typeof r?r(e):{...e,...r}},[e,r])}function c(r){let e;return e=r.disableParentContext?"function"==typeof r.components?r.components(t):r.components||t:l(r.components),o.createElement(s.Provider,{value:e},r.children)}}}]);