"use strict";(globalThis.webpackChunkmy_blog=globalThis.webpackChunkmy_blog||[]).push([[72886],{529087:(e,r,t)=>{t.d(r,{R:()=>l,x:()=>s});var a=t(596363);const n={},o=a.createContext(n);function l(e){const r=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:l(e.components),a.createElement(o.Provider,{value:r},e.children)}},750889:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>d,contentTitle:()=>s,default:()=>c,frontMatter:()=>l,metadata:()=>a,toc:()=>u});const a=JSON.parse('{"id":"angular/angular route strategy PreloadStrategy","title":"angular route PreloadStrategy","description":"route\uc758 loadComponent, loadChildren\ub97c \ubbf8\ub9ac \ub85c\ub4dc\ud560\uc9c0\ub97c \uacb0\uc815","source":"@site/docs/angular/angular route strategy PreloadStrategy.md","sourceDirName":"angular","slug":"/angular/angular route strategy PreloadStrategy","permalink":"/docs/angular/angular route strategy PreloadStrategy","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"angular route routerLinkActive","permalink":"/docs/angular/angular route routerLinkActive"},"next":{"title":"ngx-quicklink","permalink":"/docs/angular/angular route strategy QuicklinkStrategy"}}');var n=t(447259),o=t(529087);const l={},s="angular route PreloadStrategy",d={},u=[{value:"built-in",id:"built-in",level:2},{value:"CustomPreloadStrategy",id:"custompreloadstrategy",level:2},{value:"custom-preload.strategy.ts",id:"custom-preloadstrategyts",level:3},{value:"app.routes.ts",id:"approutests",level:3},{value:"CustomPreloadStrategy with delay",id:"custompreloadstrategy-with-delay",level:2},{value:"app.routes.ts",id:"approutests-1",level:3}];function i(e){const r={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.header,{children:(0,n.jsx)(r.h1,{id:"angular-route-preloadstrategy",children:"angular route PreloadStrategy"})}),"\n",(0,n.jsxs)(r.blockquote,{children:["\n",(0,n.jsx)(r.p,{children:"route\uc758 loadComponent, loadChildren\ub97c \ubbf8\ub9ac \ub85c\ub4dc\ud560\uc9c0\ub97c \uacb0\uc815"}),"\n"]}),"\n",(0,n.jsx)(r.h2,{id:"built-in",children:"built-in"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:"PreloadAllModules;\r\nNoPreloading;\n"})}),"\n",(0,n.jsx)(r.h2,{id:"custompreloadstrategy",children:"CustomPreloadStrategy"}),"\n",(0,n.jsx)(r.h3,{id:"custom-preloadstrategyts",children:"custom-preload.strategy.ts"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { Injectable } from "@angular/core";\r\nimport { PreloadingStrategy, Route } from "@angular/router";\r\nimport { Observable, of } from "rxjs";\r\n\r\n@Injectable({\r\n  providedIn: "root",\r\n})\r\nexport class CustomPreloadStrategy implements PreloadingStrategy {\r\n  preload(route: Route, load: () => Observable<any>): Observable<any> {\r\n    return route.data && route.data["preload"] ? load() : of(null);\r\n  }\r\n}\n'})}),"\n",(0,n.jsx)(r.h3,{id:"approutests",children:"app.routes.ts"}),"\n",(0,n.jsxs)(r.blockquote,{children:["\n",(0,n.jsx)(r.p,{children:"loadChildren, loadComponent\uc5d0 data\ub97c \ucd94\uac00\ud558\uc5ec preload \uc5ec\ubd80\ub97c \uacb0\uc815"}),"\n"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'{\r\n  path: "",\r\n  data: { preload: true },\r\n  loadChildren: () => import("./page.routes").then((m) => m.pageRoutes),\r\n},\n'})}),"\n",(0,n.jsx)(r.h2,{id:"custompreloadstrategy-with-delay",children:"CustomPreloadStrategy with delay"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'import { Injectable } from "@angular/core";\r\nimport { PreloadingStrategy, Route } from "@angular/router";\r\nimport { mergeMap, Observable, of, timer } from "rxjs";\r\n\r\n@Injectable({\r\n  providedIn: "root",\r\n})\r\nexport class DelayPreloadingStrategy implements PreloadingStrategy {\r\n  preload(route: Route, load: () => Observable<any>): Observable<any> {\r\n    if (route.data && route.data["preload"]) {\r\n      const delay: number = route.data["delay"];\r\n      return timer(delay).pipe(\r\n        mergeMap(() => {\r\n          return load();\r\n        }),\r\n      );\r\n    } else {\r\n      return of(null);\r\n    }\r\n  }\r\n}\n'})}),"\n",(0,n.jsx)(r.h3,{id:"approutests-1",children:"app.routes.ts"}),"\n",(0,n.jsxs)(r.blockquote,{children:["\n",(0,n.jsx)(r.p,{children:"loadChildren, loadComponent\uc5d0 data\ub97c \ucd94\uac00\ud558\uc5ec preload \uc5ec\ubd80\ub97c \uacb0\uc815"}),"\n"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-ts",children:'{\r\n  path: "",\r\n  data: { preload: true, delay: 5000 },\r\n  loadChildren: () => import("./page.routes").then((m) => m.pageRoutes),\r\n},\n'})})]})}function c(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(i,{...e})}):i(e)}}}]);