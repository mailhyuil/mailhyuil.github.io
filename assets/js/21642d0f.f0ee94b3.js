"use strict";(globalThis.webpackChunkmy_blog=globalThis.webpackChunkmy_blog||[]).push([[998118],{529087:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var r=n(596363);const s={},i=r.createContext(s);function a(e){const t=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:t},e.children)}},753227:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"testing/testing nestjs pipe","title":"testing nestjs pipe","description":"","source":"@site/docs/testing/testing nestjs pipe.md","sourceDirName":"testing","slug":"/testing/testing nestjs pipe","permalink":"/docs/testing/testing nestjs pipe","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"testing nestjs middleware","permalink":"/docs/testing/testing nestjs middleware"},"next":{"title":"nestjs test","permalink":"/docs/testing/testing nestjs"}}');var s=n(447259),i=n(529087);const a={},o="testing nestjs pipe",p={},d=[];function c(e){const t={code:"code",h1:"h1",header:"header",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"testing-nestjs-pipe",children:"testing nestjs pipe"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:'import { ArgumentMetadata, BadRequestException } from "@nestjs/common";\r\nimport { Test, TestingModule } from "@nestjs/testing";\r\nimport { ExamplePipe } from "./example.pipe";\r\n\r\ndescribe("ExamplePipe", () => {\r\n  let examplePipe: ExamplePipe;\r\n\r\n  beforeEach(async () => {\r\n    const moduleRef: TestingModule = await Test.createTestingModule({\r\n      providers: [ExamplePipe],\r\n    }).compile();\r\n\r\n    examplePipe = moduleRef.get<ExamplePipe>(ExamplePipe);\r\n  });\r\n\r\n  it("should be defined", () => {\r\n    expect(examplePipe).toBeDefined();\r\n  });\r\n\r\n  describe("transform", () => {\r\n    it("should return parsed int", () => {\r\n      const metadata: ArgumentMetadata = {\r\n        type: "param",\r\n        metatype: Number,\r\n        data: "id",\r\n      };\r\n\r\n      expect(examplePipe.transform("1", metadata)).toBe(1);\r\n    });\r\n\r\n    it("should throw BadRequestException", () => {\r\n      const metadata: ArgumentMetadata = {\r\n        type: "param",\r\n        metatype: Number,\r\n        data: "id",\r\n      };\r\n\r\n      expect(() => examplePipe.transform("a", metadata)).toThrow(BadRequestException);\r\n    });\r\n  });\r\n});\n'})})]})}function m(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);