"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([["345007"],{912064:function(n,e,r){r.r(e),r.d(e,{frontMatter:()=>o,toc:()=>T,default:()=>A,metadata:()=>a,assets:()=>E,contentTitle:()=>_});var a=JSON.parse('{"id":"kafka/kafka Connect Debezium","title":"Debezium (\uB514\uBE44\uC9C0\uC6C0)","description":"CDC (Change Data Capture)\uB97C \uC704\uD55C \uC624\uD508\uC18C\uC2A4 \uD50C\uB7AB\uD3FC","source":"@site/docs/kafka/kafka Connect Debezium.md","sourceDirName":"kafka","slug":"/kafka/kafka Connect Debezium","permalink":"/docs/kafka/kafka Connect Debezium","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Kafka","permalink":"/docs/category/kafka"},"next":{"title":"kafka Connect","permalink":"/docs/kafka/kafka Connect"}}'),t=r(447259),s=r(255511);let o={},_="Debezium (\uB514\uBE44\uC9C0\uC6C0)",E={},T=[{value:"Query-based CDC",id:"query-based-cdc",level:2},{value:"Log-based CDC",id:"log-based-cdc",level:2},{value:"docker-compose.yaml",id:"docker-composeyaml",level:2},{value:"register-postgres.json",id:"register-postgresjson",level:2},{value:"HTTP Request",id:"http-request",level:3},{value:"\uC0AC\uC6A9",id:"\uC0AC\uC6A9",level:2},{value:"nestjs",id:"nestjs",level:2}];function c(n){let e={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"debezium-\uB514\uBE44\uC9C0\uC6C0",children:"Debezium (\uB514\uBE44\uC9C0\uC6C0)"})}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsx)(e.p,{children:"CDC (Change Data Capture)\uB97C \uC704\uD55C \uC624\uD508\uC18C\uC2A4 \uD50C\uB7AB\uD3FC"}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsx)(e.p,{children:"\uB370\uC774\uD130\uBCA0\uC774\uC2A4\uC758 wal(log)\uC744 \uC77D\uC5B4\uC11C \uB370\uC774\uD130\uBCA0\uC774\uC2A4\uC758 \uBCC0\uACBD \uC0AC\uD56D\uC744 \uCEA1\uCC98\uD558\uACE0 \uC774\uBCA4\uD2B8\uB85C \uC804\uB2EC"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"query-based-cdc",children:"Query-based CDC"}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsx)(e.p,{children:"\uC2E4\uD589\uB41C \uCFFC\uB9AC\uC5D0 \uBC18\uC751\uD558\uC5EC \uBCC0\uACBD \uC0AC\uD56D\uC744 \uCEA1\uCC98"}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"log-based-cdc",children:"Log-based CDC"}),"\n",(0,t.jsxs)(e.blockquote,{children:["\n",(0,t.jsx)(e.p,{children:"\uB370\uC774\uD130\uBCA0\uC774\uC2A4\uC758 \uB85C\uADF8\uB97C \uC77D\uC5B4\uC11C \uBCC0\uACBD \uC0AC\uD56D\uC744 \uCEA1\uCC98 (wal)"}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"docker-composeyaml",children:"docker-compose.yaml"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-yaml",children:'services:\r\n  ### Kafka00\r\n  kafka00:\r\n    image: bitnami/kafka:latest\r\n    restart: unless-stopped\r\n    container_name: kafka00\r\n    ports:\r\n      - "10000:9094"\r\n    environment:\r\n      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true\r\n      # KRaft settings\r\n      - KAFKA_CFG_BROKER_ID=0\r\n      - KAFKA_CFG_NODE_ID=0\r\n      - KAFKA_KRAFT_CLUSTER_ID=HsDBs9l6UUmQq7Y5E6bNlw\r\n      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka00:9093,1@kafka01:9093,2@kafka02:9093\r\n      - KAFKA_CFG_PROCESS_ROLES=controller,broker\r\n      # Listeners\r\n      - ALLOW_PLAINTEXT_LISTENER=yes\r\n      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094\r\n      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka00:9092,EXTERNAL://127.0.0.1:10000\r\n      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT\r\n      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER\r\n      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT\r\n      # Clustering\r\n      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=3\r\n      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=3\r\n      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=2\r\n    networks:\r\n      - kafka\r\n    volumes:\r\n      - "kafka00:/bitnami/kafka"\r\n  ### Kafka01\r\n  kafka01:\r\n    image: bitnami/kafka:latest\r\n    restart: unless-stopped\r\n    container_name: kafka01\r\n    ports:\r\n      - "10001:9094"\r\n    environment:\r\n      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true\r\n      # KRaft settings\r\n      - KAFKA_CFG_BROKER_ID=1\r\n      - KAFKA_CFG_NODE_ID=1\r\n      - KAFKA_KRAFT_CLUSTER_ID=HsDBs9l6UUmQq7Y5E6bNlw\r\n      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka00:9093,1@kafka01:9093,2@kafka02:9093\r\n      - KAFKA_CFG_PROCESS_ROLES=controller,broker\r\n      # Listeners\r\n      - ALLOW_PLAINTEXT_LISTENER=yes\r\n      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094\r\n      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka01:9092,EXTERNAL://127.0.0.1:10001\r\n      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT\r\n      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER\r\n      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT\r\n      # Clustering\r\n      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=3\r\n      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=3\r\n      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=2\r\n    networks:\r\n      - kafka\r\n    volumes:\r\n      - "kafka01:/bitnami/kafka"\r\n  ## Kafka02\r\n  kafka02:\r\n    image: bitnami/kafka:latest\r\n    restart: unless-stopped\r\n    container_name: kafka02\r\n    ports:\r\n      - "10002:9094"\r\n    environment:\r\n      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true\r\n      # KRaft settings\r\n      - KAFKA_CFG_BROKER_ID=2\r\n      - KAFKA_CFG_NODE_ID=2\r\n      - KAFKA_KRAFT_CLUSTER_ID=HsDBs9l6UUmQq7Y5E6bNlw\r\n      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka00:9093,1@kafka01:9093,2@kafka02:9093\r\n      - KAFKA_CFG_PROCESS_ROLES=controller,broker\r\n      # Listeners\r\n      - ALLOW_PLAINTEXT_LISTENER=yes\r\n      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094\r\n      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka02:9092,EXTERNAL://127.0.0.1:10002\r\n      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT\r\n      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER\r\n      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT\r\n      # Clustering\r\n      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=3\r\n      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=3\r\n      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=2\r\n    networks:\r\n      - kafka\r\n    volumes:\r\n      - "kafka02:/bitnami/kafka"\r\n\r\n  kafka-ui:\r\n    image: provectuslabs/kafka-ui:latest\r\n    restart: unless-stopped\r\n    container_name: kafka-ui\r\n    ports:\r\n      - "8080:8080"\r\n    environment:\r\n      - KAFKA_CLUSTERS_0_NAME=Local-Kraft-Cluster\r\n      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka00:9092,kafka01:9092,kafka02:9092\r\n      - DYNAMIC_CONFIG_ENABLED=true\r\n      - KAFKA_CLUSTERS_0_AUDIT_TOPICAUDITENABLED=true\r\n      - KAFKA_CLUSTERS_0_AUDIT_CONSOLEAUDITENABLED=true\r\n      #- KAFKA_CLUSTERS_0_METRICS_PORT=9999\r\n    depends_on:\r\n      - kafka00\r\n      - kafka01\r\n      - kafka02\r\n    networks:\r\n      - kafka\r\n\r\n  db:\r\n    image: postgres\r\n    container_name: db\r\n    networks:\r\n      - kafka\r\n    restart: unless-stopped\r\n    ports:\r\n      - "5432:5432"\r\n    environment:\r\n      - POSTGRES_PASSWORD=postgres\r\n    volumes:\r\n      - pg-data:/var/lib/postgresql/data\r\n    # it\'s important to trigger that command when we work with postgres\r\n    command: postgres -c wal_level=logical -c max_replication_slots=1 -c max_wal_senders=1\r\n\r\n  debezium:\r\n    image: debezium/connect:1.9\r\n    restart: unless-stopped\r\n    depends_on:\r\n      - kafka00\r\n      - kafka01\r\n      - kafka02\r\n      - kafka-ui\r\n      - db\r\n    ports:\r\n      - "8083:8083"\r\n    networks:\r\n      - kafka\r\n    environment:\r\n      - GROUP_ID=1\r\n      - BOOTSTRAP_SERVERS=kafka00:9092,kafka01:9092,kafka02:9092\r\n      - CONFIG_STORAGE_TOPIC=connect_configs\r\n      - OFFSET_STORAGE_TOPIC=connect_offsets\r\n      - STATUS_STORAGE_TOPIC=source_connect_statuses\r\n      - CONNECT_KEY_CONVERTER=org.apache.kafka.connect.json.JsonConverter\r\n      - CONNECT_VALUE_CONVERTER=org.apache.kafka.connect.json.JsonConverter\r\n      - CONNECT_INTERNAL_KEY_CONVERTER=org.apache.kafka.connect.json.JsonConverter\r\n      - CONNECT_INTERNAL_VALUE_CONVERTER=org.apache.kafka.connect.json.JsonConverter\r\n      - CONNECT_REST_ADVERTISED_HOST_NAME=connect # Rest API host name\r\n      - CONNECT_PLUGIN_PATH=/kafka/connect # Plugin path\r\n      - CONNECT_LOG4J_ROOT_LOGLEVEL=INFO\r\nnetworks:\r\n  kafka:\r\n\r\nvolumes:\r\n  kafka00:\r\n  kafka01:\r\n  kafka02:\r\n  pg-data:\n'})}),"\n",(0,t.jsx)(e.h2,{id:"register-postgresjson",children:"register-postgres.json"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-json",children:'{\r\n  "name": "postgres-connector",\r\n  "config": {\r\n    "connector.class": "io.debezium.connector.postgresql.PostgresConnector",\r\n    "database.hostname": "db",\r\n    "database.port": "5432",\r\n    "database.user": "postgres",\r\n    "database.password": "postgres",\r\n    "database.dbname": "mydb",\r\n    "database.server.name": "postgres_server",\r\n    "plugin.name": "pgoutput",\r\n    "slot.name": "debezium_slot",\r\n    "publication.autocreate.mode": "filtered",\r\n    "database.history.kafka.bootstrap.servers": "kafka00:9092,kafka01:9092,kafka02:9092",\r\n    "database.history.kafka.topic": "schema-changes.mydb",\r\n    "table.include.list": "public.products,public.orders",\r\n    "slot.drop.on.stop": "false",\r\n    "heartbeat.interval.ms": "10000",\r\n    "schema.include.list": "public",\r\n    "include.schema.changes": "true",\r\n    "time.precision.mode": "connect",\r\n    "decimal.handling.mode": "double"\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"http-request",children:"HTTP Request"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-sh",children:'# register\r\ncurl -i -X POST -H "Accept:application/json" -H "Content-Type:application/json" http://localhost:8083/connectors/ -d @register-postgres.json\r\n# pause\r\ncurl -X PUT http://localhost:8083/connectors/postgres-connector/pause\r\n# delete\r\ncurl -X DELETE http://localhost:8083/connectors/postgres-connector\n'})}),"\n",(0,t.jsx)(e.h2,{id:"\uC0AC\uC6A9",children:"\uC0AC\uC6A9"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-txt",children:"\uBC14\uB77C\uBCF4\uACE0 \uC788\uB294 database\uC758 table\uC5D0 \uBCC0\uACBD\uC774 \uBC1C\uC0DD\uD558\uBA74 wal\uC744 \uC77D\uC5B4\uC11C kafka\uB85C \uC804\uB2EC\r\n\r\ntopic-name : postgres_server.public.products\n"})}),"\n",(0,t.jsx)(e.h2,{id:"nestjs",children:"nestjs"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-ts",children:'import { Controller } from "@nestjs/common";\r\nimport { Client, ClientKafka, EventPattern } from "@nestjs/microservices";\r\nimport { kafkaConfig } from "./kafka.config";\r\n\r\n@Controller()\r\nexport class AppController {\r\n  @Client(kafkaConfig)\r\n  client: ClientKafka;\r\n\r\n  onModuleInit() {\r\n    const requestPatterns = ["postgres_server.public.orders"];\r\n    requestPatterns.forEach(pattern => {\r\n      this.client.subscribeToResponseOf(pattern);\r\n    });\r\n  }\r\n\r\n  @EventPattern("postgres_server.public.orders")\r\n  async transformOrders(payload: any) {\r\n    console.log(payload);\r\n  }\r\n}\n'})})]})}function A(n={}){let{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(c,{...n})}):c(n)}},255511:function(n,e,r){r.d(e,{R:()=>o,x:()=>_});var a=r(596363);let t={},s=a.createContext(t);function o(n){let e=a.useContext(s);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function _(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:o(n.components),a.createElement(s.Provider,{value:e},n.children)}}}]);