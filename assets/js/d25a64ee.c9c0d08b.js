"use strict";(globalThis.webpackChunkmy_blog=globalThis.webpackChunkmy_blog||[]).push([[250279],{529087:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>d});var s=n(596363);const t={},i=s.createContext(t);function o(e){const r=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(i.Provider,{value:r},e.children)}},802933:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>d,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"redis/node-redis script","title":"node-redis script","description":"lua script","source":"@site/docs/redis/node-redis script.md","sourceDirName":"redis","slug":"/redis/node-redis script","permalink":"/docs/redis/node-redis script","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"node-redis pipeline","permalink":"/docs/redis/node-redis pipeline"},"next":{"title":"node-redis sort","permalink":"/docs/redis/node-redis sort"}}');var t=n(447259),i=n(529087);const o={},d="node-redis script",l={},c=[{value:"lua script",id:"lua-script",level:2},{value:"usage",id:"usage",level:2}];function a(e){const r={code:"code",h1:"h1",h2:"h2",header:"header",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"node-redis-script",children:"node-redis script"})}),"\n",(0,t.jsx)(r.h2,{id:"lua-script",children:"lua script"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua"})}),"\n",(0,t.jsx)(r.h2,{id:"usage",children:"usage"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-js",children:"import redis from \"redis\";\r\n\r\nconst client = redis.createClient({\r\n  url: process.env[\"REDIS_URL\"],\r\n  scripts: {\r\n    unlock: redis.defineScript({\r\n      NUMBER_OF_KEYS: 1,\r\n      SCRIPT: `\r\n        local key = KEYS[1]\r\n        local token = ARGV[1]\r\n        \r\n        if redis.call('GET', key) == token then\r\n          return redis.call('DEL', key)\r\n        else\r\n          return 0\r\n        end\r\n      `,\r\n      transformArguments: (key, value) => {\r\n        return [key, value];\r\n      },\r\n      transformReply: (reply) => {\r\n        return reply;\r\n      },\r\n    }),\r\n    addOneAndStore: redis.defineScript({\r\n      NUMBER_OF_KEYS: 1,\r\n      SCRIPT: `\r\n        local key = KEYS[1]\r\n        local value = tonumber(ARGV[1])\r\n        \r\n        return redis.call('SET', key, value + 1)\r\n      `,\r\n      transformArguments: (key, value) => {\r\n        return [key, value.toString()];\r\n        // EVALSHA <id> 1 <key> <value>\r\n      },\r\n      transformReply: (reply) => {\r\n        return reply;\r\n      },\r\n    }),\r\n  },\r\n});\n"})})]})}function u(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}}}]);