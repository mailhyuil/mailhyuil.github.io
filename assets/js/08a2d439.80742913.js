"use strict";(globalThis.webpackChunkmy_blog=globalThis.webpackChunkmy_blog||[]).push([[4498],{522709:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"angular/angular component file-upload","title":"angular file uploader component","description":"interface","source":"@site/docs/angular/angular component file-upload.md","sourceDirName":"angular","slug":"/angular/angular component file-upload","permalink":"/docs/angular/angular component file-upload","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"angular base component editor (quill)","permalink":"/docs/angular/angular component editor - quill"},"next":{"title":"angular component more-button (cursor pagination)","permalink":"/docs/angular/angular component more-button - cursor pagination"}}');var i=r(447259),l=r(529087);const s={},a="angular file uploader component",o={},c=[{value:"interface",id:"interface",level:2},{value:"ts",id:"ts",level:2},{value:"html",id:"html",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",pre:"pre",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"angular-file-uploader-component",children:"angular file uploader component"})}),"\n",(0,i.jsx)(n.h2,{id:"interface",children:"interface"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import { InjectionToken } from "@angular/core";\r\nimport { Observable } from "rxjs";\r\n\r\nexport interface FileUploadResponse {\r\n  extension?: string;\r\n  name: string;\r\n  size: number;\r\n  type: string;\r\n  url: string;\r\n}\r\nexport interface ExistingFile {\r\n  id: string;\r\n  name: string;\r\n  url: string;\r\n  size: number;\r\n  type: string;\r\n  createdAt: Date;\r\n  deletedAt: Date;\r\n  extension?: string;\r\n}\r\nexport interface IFileUploadService {\r\n  upload(file: File): Observable<FileUploadResponse>;\r\n}\r\n\r\nexport const FILE_UPLOAD_SERVICE = new InjectionToken<IFileUploadService>("FILE_UPLOAD_SERVICE");\n'})}),"\n",(0,i.jsx)(n.h2,{id:"ts",children:"ts"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:'import { NgOptimizedImage } from "@angular/common";\r\nimport { booleanAttribute, Component, inject, input, model, output, signal } from "@angular/core";\r\nimport { FileSizePipe, ToastService, ValueAccessorDirective } from "@mailhyuil/ng-libs";\r\nimport { firstValueFrom } from "rxjs";\r\nimport { ExistingFile, FILE_UPLOAD_SERVICE, FileUploadResponse } from "../../types/file-upload.type";\r\nimport { HintComponent } from "../hint/hint.component";\r\n\r\n@Component({\r\n  selector: "mh-file-upload",\r\n  templateUrl: "./file-upload.component.html",\r\n  styleUrls: ["./file-upload.component.scss"],\r\n  standalone: true,\r\n  imports: [FileSizePipe, HintComponent, NgOptimizedImage],\r\n  hostDirectives: [ValueAccessorDirective],\r\n})\r\nexport class FileUploadComponent {\r\n  toastService = inject(ToastService);\r\n  fileUploadService = inject(FILE_UPLOAD_SERVICE);\r\n  value = signal<File[]>([]);\r\n  existingFiles = model<ExistingFile[] | undefined>(undefined);\r\n  accept = input<string[]>([]);\r\n  label = input<string>();\r\n  hints = input<string[]>([]);\r\n  maxLength = input<number>(1);\r\n  required = input(false, {\r\n    transform: booleanAttribute,\r\n  });\r\n\r\n  deleteFileChange = output<string>();\r\n\r\n  uploadingUrls: string[] = [];\r\n  isActive = false;\r\n\r\n  private readonly valueAccessor = inject(ValueAccessorDirective<File[]>);\r\n  constructor() {\r\n    this.valueAccessor.value.subscribe(value => {\r\n      if (!value) return;\r\n      this.value.set(value);\r\n      this.setObjectUrls(value);\r\n    });\r\n  }\r\n\r\n  protected onChange(event: Event) {\r\n    const target = event.target;\r\n    if (!target) return;\r\n    if (!(target instanceof HTMLInputElement)) return;\r\n\r\n    const files = target.files;\r\n    if (!files) return;\r\n\r\n    const isValidated = this.validate(files);\r\n    if (!isValidated) return;\r\n\r\n    this.value.set(Array.from([...this.value(), ...files]));\r\n    const value = this.value();\r\n    this.setObjectUrls(value);\r\n    this.valueAccessor.valueChange(value);\r\n    this.valueAccessor.touchedChange(true);\r\n    return;\r\n  }\r\n\r\n  protected onDrop(event: DragEvent) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    const dataTransfer = event.dataTransfer;\r\n    if (!dataTransfer) return;\r\n    const files = dataTransfer.files;\r\n    const isValidated = this.validate(files);\r\n    if (!isValidated) return;\r\n    this.isActive = false;\r\n\r\n    this.value.set(Array.from([...this.value(), ...files]));\r\n    const value = this.value();\r\n    this.setObjectUrls(value);\r\n    this.valueAccessor.valueChange(value);\r\n    this.valueAccessor.touchedChange(true);\r\n    return;\r\n  }\r\n\r\n  protected remove(file: File, objectUrl: string) {\r\n    URL.revokeObjectURL(objectUrl);\r\n    this.value.set(this.value().filter(f => f !== file));\r\n    const value = this.value();\r\n    this.setObjectUrls(value);\r\n    this.valueAccessor.valueChange(value);\r\n    this.valueAccessor.touchedChange(true);\r\n    return;\r\n  }\r\n\r\n  protected setObjectUrls(files: File[]) {\r\n    if (!files) {\r\n      this.uploadingUrls = [];\r\n      return;\r\n    }\r\n    this.uploadingUrls = files.map(file => URL.createObjectURL(file));\r\n  }\r\n\r\n  protected onDragOver(ev: Event) {\r\n    this.isActive = true;\r\n    ev.preventDefault();\r\n    ev.stopPropagation();\r\n  }\r\n\r\n  protected onDragLeave(ev: Event) {\r\n    ev.preventDefault();\r\n    ev.stopPropagation();\r\n    this.isActive = false;\r\n  }\r\n\r\n  private validate(files: FileList | null) {\r\n    const value = this.value();\r\n    const maxLength = this.maxLength();\r\n    const existingFileCount = this.existingFiles?.length ?? 0;\r\n    if (maxLength && files && files.length + existingFileCount + value.length > maxLength) {\r\n      this.toastService.openDanger(`\ucd5c\ub300 ${maxLength}\uac1c\uae4c\uc9c0 \uc5c5\ub85c\ub4dc \uac00\ub2a5\ud569\ub2c8\ub2e4.`);\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  protected emitDeleteFile(id: string, index?: number) {\r\n    const currentFiles = this.existingFiles();\r\n    if (!currentFiles) return;\r\n    const rest = currentFiles.filter((_, i) => i !== index);\r\n    this.existingFiles.set(rest);\r\n    this.deleteFileChange.emit(id);\r\n  }\r\n\r\n  async upload() {\r\n    const value = this.value();\r\n    if (!value) return [];\r\n    const attachmentsPromise = value.map(async file => {\r\n      const { name, size, type } = file;\r\n      const { url } = await firstValueFrom(this.fileUploadService.upload(file));\r\n      return {\r\n        name,\r\n        url,\r\n        size,\r\n        type,\r\n        extension: name.split(".").pop(),\r\n      };\r\n    });\r\n    const attachments = await Promise.all<FileUploadResponse>(attachmentsPromise);\r\n    return attachments;\r\n  }\r\n\r\n  async delete() {\r\n    const currentFiles = this.existingFiles();\r\n    if (!currentFiles) return;\r\n    const urls = currentFiles.map(file => file.url);\r\n    urls.forEach((url, index) => this.emitDeleteFile(url, index));\r\n  }\r\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"html",children:"html"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'@let maxLengthValue = maxLength(); @let valueValue = value();\r\n\r\n<div class="flex flex-col gap-2">\r\n  <div class="flex items-center gap-2">\r\n    @if (label(); as label) {\r\n    <p class="text-sm font-bold">\r\n      {{ label }} @if (required()) {\r\n      <span class="text-primary">*</span>\r\n      }\r\n    </p>\r\n    } @let hintsValue = hints(); @if (hintsValue.length > 0) { @for (hint of hintsValue; track hint) {\r\n    <mh-hint>{{ hint }}</mh-hint>\r\n    } }\r\n  </div>\r\n  <label>\r\n    <input\r\n      type="file"\r\n      [maxLength]="maxLengthValue"\r\n      [accept]="accept().join(\',\')"\r\n      [multiple]="maxLengthValue > 1"\r\n      hidden\r\n      (change)="onChange($event)"\r\n    />\r\n    <div\r\n      class="p-5 transition-all duration-300 border cursor-pointer rounded-xl hover:bg-gray-50"\r\n      (drop)="onDrop($event)"\r\n      (dragover)="onDragOver($event)"\r\n      (dragleave)="onDragLeave($event)"\r\n      [class.bg-gray-50]="isActive"\r\n    >\r\n      <div class="flex flex-col items-center gap-2">\r\n        <span class="icon-[heroicons--arrow-up-tray-16-solid] size-5 bg-primary"></span>\r\n        <p class="text-sm">\uc0ac\uc9c4 \ub610\ub294 \ud30c\uc77c\uc744 \ub4dc\ub798\uadf8\ud560 \uc218 \uc788\uc5b4\uc694</p>\r\n      </div>\r\n    </div>\r\n  </label>\r\n\r\n  @for (v of existingFiles(); track v.id) {\r\n  <div class="flex gap-5 p-5 overflow-hidden text-sm text-gray-500 border cursor-pointer rounded-xl">\r\n    @if (v.type.includes("image")) {\r\n    <div class="relative w-full h-12 overflow-hidden">\r\n      <img class="absolute object-cover" [ngSrc]="v.url" fill priority alt="" />\r\n    </div>\r\n    } @if (v.type.includes("video")) {\r\n    <video class="object-cover w-full h-12" [src]="v.url"></video>\r\n    }\r\n    <div class="grid w-full grid-cols-3 grid-rows-1 gap-1">\r\n      <div class="flex items-ceneter">\r\n        <p class="text-xs line-clamp-1">\ud30c\uc77c \uc774\ub984: {{ v.name }}</p>\r\n      </div>\r\n      <div class="flex items-ceneter">\r\n        <p class="text-xs line-clamp-1">\uc0ac\uc774\uc988: {{ v.size || 0 | fileSize }}</p>\r\n      </div>\r\n      <div class="flex items-ceneter">\r\n        <p class="text-xs line-clamp-1">\ud0c0\uc785: {{ v.type }}</p>\r\n      </div>\r\n    </div>\r\n    <div class="flex items-center justify-center ml-auto">\r\n      <span\r\n        class="icon-[heroicons--x-circle-16-solid] size-7 bg-red-500 hover:scale-110 transition-transform duration-500"\r\n        (click)="emitDeleteFile(v.url, $index)"\r\n        (keydown.enter)="emitDeleteFile(v.url, $index)"\r\n      ></span>\r\n    </div>\r\n  </div>\r\n  } @if (valueValue && uploadingUrls.length > 0) { @for (v of valueValue; track v.text) {\r\n  <div class="flex gap-5 p-5 overflow-hidden text-sm text-gray-500 border cursor-pointer rounded-xl">\r\n    @if (v.type.includes("image")) {\r\n    <img class="object-cover w-full h-12" [src]="uploadingUrls[$index]" alt="" />\r\n    } @if (v.type.includes("video")) {\r\n    <video class="object-cover w-full h-12" [src]="uploadingUrls[$index]"></video>\r\n    }\r\n    <div class="grid w-full grid-cols-3 grid-rows-1 gap-1">\r\n      <div class="flex items-ceneter">\r\n        <p class="text-xs line-clamp-1">\ud30c\uc77c \uc774\ub984: {{ v.name }}</p>\r\n      </div>\r\n      <div class="flex items-ceneter">\r\n        <p class="text-xs line-clamp-1">\uc0ac\uc774\uc988: {{ v.size || 0 | fileSize }}</p>\r\n      </div>\r\n      <div class="flex items-ceneter">\r\n        <p class="text-xs line-clamp-1">\ud0c0\uc785: {{ v.type }}</p>\r\n      </div>\r\n    </div>\r\n    <div class="flex items-center justify-center ml-auto">\r\n      <span\r\n        class="icon-[heroicons--x-circle-16-solid] size-7 bg-red-500 hover:scale-110 transition-transform duration-500"\r\n        (click)="remove(v, uploadingUrls[$index]!)"\r\n        (keydown.enter)="remove(v, uploadingUrls[$index]!)"\r\n      ></span>\r\n    </div>\r\n  </div>\r\n  } }\r\n</div>\n'})})]})}function d(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},529087:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>a});var t=r(596363);const i={},l=t.createContext(i);function s(e){const n=t.useContext(l);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);