"use strict";(globalThis.webpackChunkmy_blog=globalThis.webpackChunkmy_blog||[]).push([[809796],{529087:(e,t,s)=>{s.d(t,{R:()=>a,x:()=>i});var n=s(596363);const r={},o=n.createContext(r);function a(e){const t=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),n.createElement(o.Provider,{value:t},e.children)}},647289:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>a,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"nestjs/nest base provider async provider","title":"nestjs async provider","description":"the application start should be delayed until one or more asynchronous tasks are completed. For example, you may not want to start accepting requests until the connection with the database has been established. You can achieve this using asynchronous providers.","source":"@site/docs/nestjs/nest base provider async provider.md","sourceDirName":"nestjs","slug":"/nestjs/nest base provider async provider","permalink":"/docs/nestjs/nest base provider async provider","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"nest base provider REQUEST","permalink":"/docs/nestjs/nest base provider REQUEST"},"next":{"title":"nest base provider currentUser provider","permalink":"/docs/nestjs/nest base provider current user provider"}}');var r=s(447259),o=s(529087);const a={},i="nestjs async provider",c={},d=[];function p(e){const t={blockquote:"blockquote",h1:"h1",header:"header",p:"p",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"nestjs-async-provider",children:"nestjs async provider"})}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsx)(t.p,{children:"the application start should be delayed until one or more asynchronous tasks are completed. For example, you may not want to start accepting requests until the connection with the database has been established. You can achieve this using asynchronous providers."}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsx)(t.p,{children:"\ube44\ub3d9\uae30 \uc791\uc5c5\uc774 \uc644\ub8cc\ub420 \ub54c\uae4c\uc9c0 \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uc2dc\uc791\uc744 \uc9c0\uc5f0\uc2dc\ud0a4\uace0 \uc2f6\uc744 \ub54c, \uc608\ub97c \ub4e4\uc5b4 \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc5f0\uacb0\uc774 \uc644\ub8cc\ub420 \ub54c\uae4c\uc9c0 \uc694\uccad\uc744 \ubc1b\uc9c0 \uc54a\uace0 \uc2f6\uc744 \uc218 \uc788\ub2e4. \ube44\ub3d9\uae30 provider\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc774\ub97c \uad6c\ud604\ud560 \uc218 \uc788\ub2e4."}),"\n"]}),"\n"]})]})}function l(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}}}]);