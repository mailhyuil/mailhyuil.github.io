"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([["843195"],{622917:function(e,r,t){t.r(r),t.d(r,{frontMatter:()=>i,toc:()=>l,default:()=>p,metadata:()=>n,assets:()=>c,contentTitle:()=>o});var n=JSON.parse('{"id":"x design pattern/Behavioral strategy - nestjs","title":"nestjs strategy pattern","description":"role\uC774 MEMBER\uC778 \uACBD\uC6B0\uC640 ADMIN\uC778 \uACBD\uC6B0\uC5D0 \uB530\uB77C \uB2E4\uB978 \uB85C\uC9C1\uC744 \uC218\uD589\uD558\uB294 \uC608\uC81C","source":"@site/docs/x design pattern/Behavioral strategy - nestjs.md","sourceDirName":"x design pattern","slug":"/x design pattern/Behavioral strategy - nestjs","permalink":"/docs/x design pattern/Behavioral strategy - nestjs","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"angular strategy pattern","permalink":"/docs/x design pattern/Behavioral strategy - angular"},"next":{"title":"strategy pattern","permalink":"/docs/x design pattern/Behavioral strategy"}}'),s=t(447259),a=t(255511);let i={},o="nestjs strategy pattern",c={},l=[{value:"explorer.service.ts",id:"explorerservicets",level:2},{value:"user.controller.ts",id:"usercontrollerts",level:2},{value:"user.strategy.ts",id:"userstrategyts",level:2},{value:"admin.strategy.ts",id:"adminstrategyts",level:2},{value:"member.strategy.ts",id:"memberstrategyts",level:2},{value:"user.service.ts",id:"userservicets",level:2}];function d(e){let r={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"nestjs-strategy-pattern",children:"nestjs strategy pattern"})}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsx)(r.p,{children:"role\uC774 MEMBER\uC778 \uACBD\uC6B0\uC640 ADMIN\uC778 \uACBD\uC6B0\uC5D0 \uB530\uB77C \uB2E4\uB978 \uB85C\uC9C1\uC744 \uC218\uD589\uD558\uB294 \uC608\uC81C"}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"explorerservicets",children:"explorer.service.ts"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:'import { Injectable } from "@nestjs/common";\r\nimport { DiscoveryService, MetadataScanner, Reflector } from "@nestjs/core";\r\n\r\n@Injectable()\r\nexport class ExplorerService {\r\n  constructor(private readonly discoveryService: DiscoveryService) {}\r\n\r\n  find(metadataKey: string | symbol) {\r\n    const providers = this.discoveryService.getProviders();\r\n\r\n    return providers\r\n      .filter(wrapper => wrapper.isDependencyTreeStatic())\r\n      .filter(({ metatype, instance }) => {\r\n        if (!instance || !metatype) {\r\n          return false;\r\n        }\r\n        return Reflect.getMetadata(metadataKey, metatype);\r\n      })\r\n      .map(({ instance }) => instance);\r\n  }\r\n}\n'})}),"\n",(0,s.jsx)(r.h2,{id:"usercontrollerts",children:"user.controller.ts"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:'@Controller("user")\r\nexport class UserController {\r\n  constructor(private readonly userService: UserService) {}\r\n  @Put(":id")\r\n  update(@Body() body: UpdateUserDTO, @Query("role") role: Role) {\r\n    return this.userService.update(body, role);\r\n  }\r\n}\n'})}),"\n",(0,s.jsx)(r.h2,{id:"userstrategyts",children:"user.strategy.ts"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"export abstract class UserStrategy {\r\n  abstract update(data: UpdateUserDTO): Promise<string>;\r\n}\n"})}),"\n",(0,s.jsx)(r.h2,{id:"adminstrategyts",children:"admin.strategy.ts"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:'@Injectable()\r\n@SetMetadata("strategy:user", "ADMIN")\r\nexport class AdminStrategy implements UserStrategy {\r\n  constructor(private readonly prismService: PrismService) {}\r\n  async update(data: UpdateUserDTO) {\r\n    const updated = await this.prismService.update(data);\r\n    return plainToInstance(UserDTO, updated);\r\n  }\r\n}\n'})}),"\n",(0,s.jsx)(r.h2,{id:"memberstrategyts",children:"member.strategy.ts"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:'@Injectable()\r\n@SetMetadata("strategy:user", "MEMBER")\r\nexport class MemberStrategy implements UserStrategy {\r\n  constructor(private readonly prismService: PrismService) {}\r\n  async update(data: UpdateUserDTO) {\r\n    const updated = await this.prismService.update(data);\r\n    return plainToInstance(UserDTO, updated);\r\n  }\r\n}\n'})}),"\n",(0,s.jsx)(r.h2,{id:"userservicets",children:"user.service.ts"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:'@Injectable()\r\nexport class UserService {\r\n  private readonly userStrategy: Record<Role, UserStrategy>;\r\n\r\n  constructor(\r\n    private readonly explorerService: ExplorerService,\r\n    private readonly metadataScanner: MetadataScanner,\r\n    private readonly reflector: Reflector,\r\n  ) {\r\n    const providers = this.explorerService.find("strategy:user");\r\n    providers.forEach(provider => {\r\n      this.metadataScanner.scanFromPrototype(provider, Object.getPrototypeOf(provider), methodName => {\r\n        const role = this.reflector.get("strategy:user", provider);\r\n        this.userStrategy[role] = provider;\r\n      });\r\n    });\r\n  }\r\n\r\n  async update(data: UpdateUserDTO, role: Role = "MEMBER") {\r\n    return await this.userStrategy[role].update(data);\r\n  }\r\n}\n'})})]})}function p(e={}){let{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},255511:function(e,r,t){t.d(r,{R:()=>i,x:()=>o});var n=t(596363);let s={},a=n.createContext(s);function i(e){let r=n.useContext(a);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),n.createElement(a.Provider,{value:r},e.children)}}}]);