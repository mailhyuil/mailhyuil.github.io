"use strict";(globalThis.webpackChunkmy_blog=globalThis.webpackChunkmy_blog||[]).push([[104238],{529087:(n,r,e)=>{e.d(r,{R:()=>l,x:()=>s});var t=e(596363);const o={},i=t.createContext(o);function l(n){const r=t.useContext(i);return t.useMemo(function(){return"function"==typeof n?n(r):{...r,...n}},[r,n])}function s(n){let r;return r=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:l(n.components),t.createElement(i.Provider,{value:r},n.children)}},663149:(n,r,e)=>{e.r(r),e.d(r,{assets:()=>a,contentTitle:()=>s,default:()=>d,frontMatter:()=>l,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"angular/angular component editor - quill","title":"angular base component editor (quill)","description":"install","source":"@site/docs/angular/angular component editor - quill.md","sourceDirName":"angular","slug":"/angular/angular component editor - quill","permalink":"/docs/angular/angular component editor - quill","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"angular component checkbox","permalink":"/docs/angular/angular component checkbox"},"next":{"title":"angular file uploader component","permalink":"/docs/angular/angular component file-upload"}}');var o=e(447259),i=e(529087);const l={},s="angular base component editor (quill)",a={},u=[{value:"install",id:"install",level:2},{value:"interface",id:"interface",level:2},{value:"editor.component.ts",id:"editorcomponentts",level:2},{value:"editor.component.html",id:"editorcomponenthtml",level:2}];function c(n){const r={code:"code",h1:"h1",h2:"h2",header:"header",pre:"pre",...(0,i.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.header,{children:(0,o.jsx)(r.h1,{id:"angular-base-component-editor-quill",children:"angular base component editor (quill)"})}),"\n",(0,o.jsx)(r.h2,{id:"install",children:"install"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-sh",children:"npm i quill\r\nnpm i ngx-quill\r\nnpm i quill-image-resizor\r\nnpm i quill-mention\n"})}),"\n",(0,o.jsx)(r.h2,{id:"interface",children:"interface"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ts",children:'import { InjectionToken } from "@angular/core";\r\nimport { Observable } from "rxjs";\r\n\r\nexport interface EditorImageUploadResponse {\r\n  url: string;\r\n}\r\n\r\nexport interface IEditorImageService {\r\n  upload(file: File): Observable<EditorImageUploadResponse>;\r\n}\r\n\r\nexport const EDITOR_IMAGE_SERVICE = new InjectionToken<IEditorImageService>("EDITOR_IMAGE_SERVICE");\n'})}),"\n",(0,o.jsx)(r.h2,{id:"editorcomponentts",children:"editor.component.ts"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ts",children:'import { booleanAttribute, Component, inject, input, OnInit, output, signal } from "@angular/core";\r\nimport { AbstractControl, FormsModule, NgControl } from "@angular/forms";\r\n\r\nimport { ErrorMessageComponent, ValueAccessorDirective } from "@mailhyuil/ng-libs";\r\nimport { LabelComponent } from "@mailhyuil/ng-libs/admin";\r\nimport { CustomOption, QuillEditorComponent, QuillModules } from "ngx-quill";\r\nimport Quill from "quill";\r\nimport ImageResizor from "quill-image-resizor";\r\nimport Toolbar from "quill/modules/toolbar";\r\nimport { EDITOR_IMAGE_SERVICE } from "../../public-api";\r\n\r\nImageResizor.Quill = Quill;\r\nQuill.register("modules/imageResizor", ImageResizor);\r\n@Component({\r\n  selector: "mh-editor",\r\n  templateUrl: "./editor.component.html",\r\n  styleUrls: ["./editor.component.scss"],\r\n  standalone: true,\r\n  imports: [QuillEditorComponent, FormsModule, LabelComponent, ErrorMessageComponent],\r\n  hostDirectives: [ValueAccessorDirective],\r\n})\r\nexport class EditorComponent implements OnInit {\r\n  value = signal("");\r\n  editor?: Quill;\r\n  modules: QuillModules = {};\r\n  placeholder = input("\uae00\uc744 \uc791\uc131\ud574\uc8fc\uc138\uc694.");\r\n  label = input("");\r\n  required = input(false, {\r\n    transform: booleanAttribute,\r\n  });\r\n  hints = input<string[]>([]);\r\n  uploadImageChange = output<string>();\r\n  deleteImageChange = output<string>();\r\n  imageService = inject(EDITOR_IMAGE_SERVICE, {\r\n    optional: true,\r\n  });\r\n  ngControl = inject(NgControl, {\r\n    optional: true,\r\n    self: true,\r\n  });\r\n  control?: AbstractControl;\r\n  customOptions = input<CustomOption[]>([\r\n    {\r\n      import: "formats/font",\r\n      whitelist: ["mirza", "roboto", "aref", "serif", "sansserif", "monospace"],\r\n    },\r\n  ]);\r\n  private readonly valueAccessor = inject(ValueAccessorDirective<string>);\r\n  constructor() {\r\n    this.modules = {\r\n      imageResizor: {},\r\n    };\r\n    this.valueAccessor.value.subscribe(v => {\r\n      this.value.set(v);\r\n    });\r\n  }\r\n  ngOnInit(): void {\r\n    this.control = this.ngControl?.control || undefined;\r\n  }\r\n\r\n  private findImageUrls(content?: string) {\r\n    if (!content) return [];\r\n    const urls = content.match(/<img[^>]*src="([^"]*)"[^>]*>/g);\r\n    if (!urls) return [];\r\n    return urls.map(url => url.match(/src="([^"]*)"/)?.[1]).filter((url): url is string => !!url);\r\n  }\r\n\r\n  private findDeleteImageUrl(oldContent: string, newContent: string) {\r\n    const oldUrls = this.findImageUrls(oldContent);\r\n    const newUrls = this.findImageUrls(newContent);\r\n    const urls = oldUrls?.filter(url => !newUrls?.includes(url));\r\n    const found = urls[0];\r\n    return found ? found : undefined;\r\n  }\r\n\r\n  setValue(event: string) {\r\n    const found = this.findDeleteImageUrl(this.value(), event);\r\n    if (found) {\r\n      this.deleteImageChange.emit(found);\r\n    }\r\n    this.valueAccessor.writeValue(event);\r\n    this.valueAccessor.valueChange(event);\r\n  }\r\n\r\n  onEditorCreated(editor: Quill) {\r\n    this.editor = editor;\r\n    const toolbar = this.editor.getModule("toolbar");\r\n    if (toolbar instanceof Toolbar) {\r\n      toolbar.addHandler("image", this.imageHandler.bind(this));\r\n    }\r\n  }\r\n\r\n  imageHandler() {\r\n    const input = document.createElement("input");\r\n    input.setAttribute("type", "file");\r\n    input.setAttribute("accept", "image/*");\r\n    input.click();\r\n\r\n    input.onchange = async () => {\r\n      if (!this.imageService)\r\n        throw new Error(`EDITOR_IMAGE_SERVICE \uac00 app.config.ts\uc5d0 \ub4f1\ub85d\ub418\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4.\r\n  {\r\n        provide: EDITOR_IMAGE_SERVICE,\r\n        useClass: ImageService,\r\n  }\r\n  `);\r\n\r\n      if (!this.editor) throw new Error("editor is not defined");\r\n\r\n      const file = input.files ? input.files[0] : null;\r\n      if (!file) return;\r\n\r\n      const range = this.editor.getSelection();\r\n      if (!range) return;\r\n\r\n      this.imageService.upload(file).subscribe(({ url }) => {\r\n        if (!this.editor) throw new Error("editor is not defined");\r\n        this.editor.insertEmbed(range.index, "image", `${url}`);\r\n        this.uploadImageChange.emit(url);\r\n        this.setValue(this.editor.root.innerHTML);\r\n      });\r\n    };\r\n  }\r\n\r\n  handleBlur() {\r\n    this.valueAccessor.touchedChange(true);\r\n  }\r\n}\n'})}),"\n",(0,o.jsx)(r.h2,{id:"editorcomponenthtml",children:"editor.component.html"}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-html",children:'<div class="flex flex-col gap-2">\r\n  <mh-label [label]="label()" [required]="required()" [hints]="hints()"></mh-label>\r\n  <div class="container relative w-full">\r\n    <div\r\n      class="absolute top-0 left-0 z-10 transition-colors duration-300 pointer-events-none error-border w-full h-[calc(100%_-_5px)]"\r\n    ></div>\r\n    <quill-editor\r\n      class="size-full"\r\n      [ngModel]="value()"\r\n      (ngModelChange)="setValue($event)"\r\n      [modules]="modules"\r\n      [placeholder]="placeholder()"\r\n      (onEditorCreated)="onEditorCreated($event)"\r\n      (onBlur)="handleBlur()"\r\n    ></quill-editor>\r\n  </div>\r\n</div>\r\n<mh-error-message [control]="control" [name]="label()"></mh-error-message>\n'})})]})}function d(n={}){const{wrapper:r}={...(0,i.R)(),...n.components};return r?(0,o.jsx)(r,{...n,children:(0,o.jsx)(c,{...n})}):c(n)}}}]);