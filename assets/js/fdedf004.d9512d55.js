"use strict";(globalThis.webpackChunkmy_blog=globalThis.webpackChunkmy_blog||[]).push([[406020],{529087:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var s=t(596363);const r={},o=s.createContext(r);function a(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(o.Provider,{value:n},e.children)}},864119:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>x,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"nodejs/nodejs xlsx \uc5d1\uc140 - excel","title":"xlxs","description":"install","source":"@site/docs/nodejs/nodejs xlsx \uc5d1\uc140 - excel.md","sourceDirName":"nodejs","slug":"/nodejs/nodejs xlsx \uc5d1\uc140 - excel","permalink":"/docs/nodejs/nodejs xlsx \uc5d1\uc140 - excel","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"nodejs websocket","permalink":"/docs/nodejs/nodejs websocket"},"next":{"title":"node xstate","permalink":"/docs/nodejs/nodejs xstate - state machine"}}');var r=t(447259),o=t(529087);const a={},i="xlxs",l={},c=[{value:"install",id:"install",level:2},{value:"usage",id:"usage",level:2},{value:"xlsx to json",id:"xlsx-to-json",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"xlxs",children:"xlxs"})}),"\n",(0,r.jsx)(n.h2,{id:"install",children:"install"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sh",children:"npm i xlsx\n"})}),"\n",(0,r.jsx)(n.h2,{id:"usage",children:"usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'import { Injectable } from "@angular/core";\r\nimport { ClassRegistrationDto, PaymentDto } from "@lcrs/api";\r\nimport { PaymentStatusMap, ProductTypeMap } from "@lcrs/common";\r\nimport * as XLSX from "xlsx";\r\n\r\n@Injectable({\r\n  providedIn: "root",\r\n})\r\nexport class ExcelService {\r\n  exportPaymentsAsExcelFile(json: PaymentDto[], excelFileName: string): void {\r\n    console.log(json);\r\n    const newJson = json.map((payment) => ({\r\n      ID: payment.id,\r\n      \uad6c\ubd84: ProductTypeMap[payment.productType],\r\n      \uc0c1\ud0dc: PaymentStatusMap[payment.status],\r\n      \uc0c1\ud488\uba85: payment.registration?.class?.name,\r\n      \uad6c\ub9e4\uc790: payment.registration?.user?.name,\r\n      \uacb0\uc81c\uc77c: payment.paidAt,\r\n      \uacb0\uc81c\uae08\uc561: payment.amount,\r\n      "\uc90c\ub9c1\ud06c \ud074\ub9ad \uc5ec\ubd80": payment.registration?.isLinkClicked ? "O" : "X",\r\n      "\uacb0\uc81c\uc790 \uc774\uba54\uc77c": payment.registration?.user?.email,\r\n    }));\r\n    const worksheet: XLSX.WorkSheet = XLSX.utils.json_to_sheet(newJson);\r\n    const workbook: XLSX.WorkBook = {\r\n      SheetNames: [excelFileName],\r\n      Sheets: { [excelFileName]: worksheet },\r\n    };\r\n    XLSX.writeFile(workbook, `${excelFileName}-${new Date().toISOString()}.xlsx`);\r\n  }\r\n  exportRegistrationsAsExcelFile(json: ClassRegistrationDto[], excelFileName: string): void {\r\n    const newJson = json.map((registration) => ({\r\n      id: registration.id,\r\n      \uc774\ub984: registration.user.name,\r\n      \uc774\uba54\uc77c: registration.user.email,\r\n      \uc9c0\uc5ed: registration.user.region,\r\n      \uc9c1\uc885: registration.user.occupation,\r\n      "\uac15\uc758\uc5d0 \ubc14\ub77c\ub294 \uc810": registration.message,\r\n    }));\r\n    const worksheet: XLSX.WorkSheet = XLSX.utils.json_to_sheet(newJson);\r\n    const workbook: XLSX.WorkBook = {\r\n      SheetNames: [excelFileName],\r\n      Sheets: { [excelFileName]: worksheet },\r\n    };\r\n    XLSX.writeFile(workbook, `${excelFileName}-${new Date().toISOString()}.xlsx`);\r\n  }\r\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"xlsx-to-json",children:"xlsx to json"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"import * as XLSX from 'xlsx';\r\n\r\nasync createByExcel(userId: string, file: Express.Multer.File) {\r\n    const workbook = XLSX.read(file.buffer, { type: 'buffer', cellDates: true }); // cellDates:true DateTime format\r\n\r\n    const sheet = workbook.Sheets['\uc2dc\ud2b81']; // \uc2dc\ud2b8 \uc774\ub984\r\n\r\n    const data = XLSX.utils.sheet_to_json(sheet);\r\n}\n"})})]})}function x(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);