"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([["246313"],{955904:function(e,i,r){r.r(i),r.d(i,{frontMatter:()=>l,toc:()=>p,default:()=>c,metadata:()=>n,assets:()=>a,contentTitle:()=>f});var n=JSON.parse('{"id":"nestjs/nest base pipe file-diff","title":"nest base pipe file-diff","description":"file-diff.pipe.ts","source":"@site/docs/nestjs/nest base pipe file-diff.md","sourceDirName":"nestjs","slug":"/nestjs/nest base pipe file-diff","permalink":"/docs/nestjs/nest base pipe file-diff","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"nest pipe custom","permalink":"/docs/nestjs/nest base pipe custom"},"next":{"title":"nest base pipe file-upload","permalink":"/docs/nestjs/nest base pipe file-upload"}}'),s=r(447259),t=r(255511);let l={},f="nest base pipe file-diff",a={},p=[{value:"file-diff.pipe.ts",id:"file-diffpipets",level:2}];function o(e){let i={code:"code",h1:"h1",h2:"h2",header:"header",pre:"pre",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.header,{children:(0,s.jsx)(i.h1,{id:"nest-base-pipe-file-diff",children:"nest base pipe file-diff"})}),"\n",(0,s.jsx)(i.h2,{id:"file-diffpipets",children:"file-diff.pipe.ts"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-ts",children:'import { ArgumentMetadata, Inject, Injectable, PipeTransform } from "@nestjs/common";\r\nimport { REQUEST } from "@nestjs/core";\r\nimport { Request } from "express";\r\nimport { FileDiffResult, FileService } from "../app/file/file.service";\r\nimport { PrismaService } from "../prisma/prisma.service";\r\nexport const FileDiffPipeFn = ({ field }: { field: string }) => {\r\n  @Injectable()\r\n  class FileDiffPipe implements PipeTransform<Express.Multer.File[], Promise<FileDiffResult>> {\r\n    constructor(\r\n      private readonly fileService: FileService,\r\n      private readonly prisma: PrismaService,\r\n      @Inject(REQUEST) private readonly request: Request,\r\n    ) {}\r\n\r\n    async transform(\r\n      fileOrFiles: Express.Multer.File | Express.Multer.File[],\r\n      metadata: ArgumentMetadata,\r\n    ): Promise<FileDiffResult> {\r\n      if (!this.request.params.id) return;\r\n      if (!fileOrFiles) return;\r\n\r\n      const files = await this.prisma.file.findMany({\r\n        where: {\r\n          [field]: this.request.params.id,\r\n        },\r\n      });\r\n\r\n      let res: FileDiffResult;\r\n      if (fileOrFiles instanceof Array) {\r\n        if (!fileOrFiles.length) return;\r\n        res = await this.fileService.diff({\r\n          newMulterFiles: fileOrFiles,\r\n          oldFileDTOs: files,\r\n        });\r\n      } else {\r\n        res = await this.fileService.diff({\r\n          newMulterFiles: [fileOrFiles],\r\n          oldFileDTOs: files,\r\n        });\r\n      }\r\n      return res;\r\n    }\r\n  }\r\n  return FileDiffPipe;\r\n};\n'})})]})}function c(e={}){let{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},255511:function(e,i,r){r.d(i,{R:()=>l,x:()=>f});var n=r(596363);let s={},t=n.createContext(s);function l(e){let i=n.useContext(t);return n.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function f(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),n.createElement(t.Provider,{value:i},e.children)}}}]);