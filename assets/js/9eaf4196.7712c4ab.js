"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([["84541"],{420334:function(n,e,t){t.r(e),t.d(e,{frontMatter:()=>a,toc:()=>i,default:()=>p,metadata:()=>r,assets:()=>c,contentTitle:()=>l});var r=JSON.parse('{"id":"rust/rust http server","title":"\uB7EC\uC2A4\uD2B8 \uC6F9\uC11C\uBC84","description":"tcp \uD1B5\uC2E0\uC73C\uB85C \uC8FC\uC18C\uC5D0 \uBC14\uC778\uB529\uD574\uC11C \uB4E3\uAE30","source":"@site/docs/rust/rust http server.md","sourceDirName":"rust","slug":"/rust/rust http server","permalink":"/docs/rust/rust http server","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"\uB7EC\uC2A4\uD2B8 axum","permalink":"/docs/rust/rust http axum"},"next":{"title":"cargo","permalink":"/docs/rust/rust package cargo"}}'),s=t(447259),o=t(255511);let a={},l="\uB7EC\uC2A4\uD2B8 \uC6F9\uC11C\uBC84",c={},i=[{value:"\uBC84\uD37C \uC0AC\uC6A9",id:"\uBC84\uD37C-\uC0AC\uC6A9",level:2}];function u(n){let e={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"\uB7EC\uC2A4\uD2B8-\uC6F9\uC11C\uBC84",children:"\uB7EC\uC2A4\uD2B8 \uC6F9\uC11C\uBC84"})}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"tcp \uD1B5\uC2E0\uC73C\uB85C \uC8FC\uC18C\uC5D0 \uBC14\uC778\uB529\uD574\uC11C \uB4E3\uAE30"}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"tcp \uC5F0\uACB0\uC774 \uB418\uBA74 stream\uC774 \uB4E4\uC5B4\uC628\uB2E4"}),"\n",(0,s.jsxs)(e.blockquote,{children:["\n",(0,s.jsx)(e.p,{children:"stream\uC744 \uD1B5\uD574\uC11C HTTP \uBB38\uBC95\uC73C\uB85C \uB370\uC774\uD130 \uC804\uB2EC"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-fs",children:'use std::io::prelude::*;\r\nuse std::net::TcpListener;\r\nuse std::net::TcpStream;\r\nuse std::fs::File;\r\n\r\nfn main() {\r\n    let listener = TcpListener::bind("localhost:7878").unwrap(); // TcpListener\uB85C localhost:7878\uC758 tcp \uC5F0\uACB0 \uB4E3\uAE30\r\n\r\n    for stream in listener.incoming(){ // TcpListener\uAC00 \uB4E4\uC740 \uC5F0\uACB0\uC5D0\uC11C TcpStream\uC744 \uBF51\uB294\uB2E4\r\n        let stream = stream.unwrap();\r\n\r\n        handle_connection(stream) // TcpStream\uC744 \uD1B5\uD574\uC11C \uB370\uC774\uD130\uB97C \uC804\uB2EC\r\n    }\r\n\r\n    fn handle_connection(mut stream: TcpStream) {\r\n        let mut file = File::open("index.html").unwrap(); // index.html\uD30C\uC77C \uC5F4\uAE30\r\n\r\n        let mut contents = String::new(); // contents \uBCC0\uC218 \uC0DD\uC131 String \uD0C0\uC785\r\n        file.read_to_string(&mut contents).unwrap(); // \uC5F4\uC5B4\uB193\uC740 index.html\uC744 string\uC73C\uB85C \uC77D\uC5B4\uC11C contents\uC5D0 \uC800\uC7A5\r\n\r\n        let response = format!( // response\uB85C \uD3EC\uBA67\uD305\r\n            "HTTP/1.1 200 OK\\r\\nContent-Length: {}\\r\\n\\r\\n{}", // HTTP \uD504\uB85C\uD1A0\uCF5C \uBB38\uBC95\uC5D0 \uB9DE\uCDB0\uC11C contenst \uAE38\uC774\uC640 \uCF58\uD150\uCE20 \uBC14\uB514\uC5D0 \uB123\uAE30\r\n            contents.len(),\r\n            contents\r\n        );\r\n\r\n        stream.write(response.as_bytes()).unwrap(); // stream\uC73C\uB85C response\uB97C bytes\uB85C \uBE0C\uB77C\uC6B0\uC800\uC5D0 \uC804\uB2EC(\uC4F0\uAE30)\r\n        stream.flush().unwrap(); // \uC2A4\uD2B8\uB9BC \uC790\uC6D0 \uD574\uC81C\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(e.h2,{id:"\uBC84\uD37C-\uC0AC\uC6A9",children:"\uBC84\uD37C \uC0AC\uC6A9"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rs",children:'use std::io::prelude::*;\r\nuse std::net::TcpListener;\r\nuse std::net::TcpStream;\r\nuse std::fs::File;\r\n\r\nfn main() {\r\n    let listener = TcpListener::bind("localhost:7878").unwrap(); // TcpListener\uB85C localhost:7878\uC758 tcp \uC5F0\uACB0 \uB4E3\uAE30\r\n\r\n    for stream in listener.incoming(){ // TcpListener\uAC00 \uB4E4\uC740 \uC5F0\uACB0\uC5D0\uC11C TcpStream\uC744 \uBF51\uB294\uB2E4\r\n        let stream = stream.unwrap();\r\n\r\n        handle_connection(stream) // TcpStream\uC744 \uD1B5\uD574\uC11C \uB370\uC774\uD130\uB97C \uC804\uB2EC\r\n    }\r\n\r\nfn handle_connection(mut stream: TcpStream) {\r\n    let mut buffer = [0; 512]; // 512byte\uC758 \uBC84\uD37C \uC778\uC2A4\uD134\uC2A4\r\n    stream.read(&mut buffer).unwrap(); // \uC694\uCCAD \uB370\uC774\uD130\uB97C \uC77D\uC5B4\uC11C \uBC84\uD37C\uC5D0 \uC800\uC7A5\r\n\r\n    let get = b"GET / HTTP/1.1\\r\\n";\r\n\r\n    if buffer.starts_with(get) { // buffer\uC548\uC5D0 \uC788\uB294 \uC694\uCCAD \uB370\uC774\uD130\uAC00 get\uC73C\uB85C \uC2DC\uC791\uD558\uBA74 index.html \uC804\uC1A1\r\n        let mut file = File::open("index.html").unwrap(); // index.html\uD30C\uC77C \uC5F4\uAE30\r\n\r\n        let mut contents = String::new(); // contents \uBCC0\uC218 \uC0DD\uC131 String \uD0C0\uC785\r\n        file.read_to_string(&mut contents).unwrap(); // \uC5F4\uC5B4\uB193\uC740 index.html\uC744 string\uC73C\uB85C \uC77D\uC5B4\uC11C contents\uC5D0 \uC800\uC7A5\r\n\r\n        let response = format!( // response\uB85C \uD3EC\uBA67\uD305\r\n            "HTTP/1.1 200 OK\\r\\nContent-Length: {}\\r\\n\\r\\n{}", // HTTP \uD504\uB85C\uD1A0\uCF5C \uBB38\uBC95\uC5D0 \uB9DE\uCDB0\uC11C contenst \uAE38\uC774\uC640 \uCF58\uD150\uCE20 \uBC14\uB514\uC5D0 \uB123\uAE30\r\n            contents.len(),\r\n            contents\r\n        );\r\n\r\n        stream.write(response.as_bytes()).unwrap(); // stream\uC73C\uB85C response\uB97C bytes\uB85C \uBE0C\uB77C\uC6B0\uC800\uC5D0 \uC804\uB2EC(\uC4F0\uAE30)\r\n        stream.flush().unwrap(); // \uC2A4\uD2B8\uB9BC \uC790\uC6D0 \uD574\uC81C\r\n    } else { // /\uC694\uCCAD\uC774 \uC544\uB2D0\uC2DC 404 \uD398\uC774\uC9C0 \uC804\uB2EC\r\n        let status_line = "HTTP/1.1 404 NOT FOUND";\r\n        let mut file = File::open("404.html").unwrap();\r\n        let mut contents = String::new();\r\n\r\n        file.read_to_string(&mut contents).unwrap();\r\n\r\n        let response = format!(\r\n            "{}\\r\\nContent-Length: {}\\r\\n\\r\\n{}",\r\n            status_line,\r\n            contents.len(),\r\n            contents\r\n        );\r\n\r\n        stream.write(response.as_bytes()).unwrap();\r\n        stream.flush().unwrap();\r\n    }\r\n}\n'})})]})}function p(n={}){let{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(u,{...n})}):u(n)}},255511:function(n,e,t){t.d(e,{R:()=>a,x:()=>l});var r=t(596363);let s={},o=r.createContext(s);function a(n){let e=r.useContext(o);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:a(n.components),r.createElement(o.Provider,{value:e},n.children)}}}]);