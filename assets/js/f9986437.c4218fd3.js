"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([["364972"],{803678:function(e,n,r){r.r(n),r.d(n,{frontMatter:()=>s,toc:()=>a,default:()=>p,metadata:()=>t,assets:()=>i,contentTitle:()=>c});var t=JSON.parse('{"id":"protocol/L7 MCP sdk client","title":"MCP nodejs","description":"install","source":"@site/docs/protocol/L7 MCP sdk client.md","sourceDirName":"protocol","slug":"/protocol/L7 MCP sdk client","permalink":"/docs/protocol/L7 MCP sdk client","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"MCP postgres","permalink":"/docs/protocol/L7 MCP postgres"},"next":{"title":"MCP nodejs","permalink":"/docs/protocol/L7 MCP sdk server"}}'),o=r(447259),l=r(255511);let s={},c="MCP nodejs",i={},a=[{value:"install",id:"install",level:2},{value:"client.ts",id:"clientts",level:2}];function d(e){let n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"mcp-nodejs",children:"MCP nodejs"})}),"\n",(0,o.jsx)(n.h2,{id:"install",children:"install"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:"npm i @modelcontextprotocol/sdk # LLM, Agent, App\uC5D0\uC11C MCP Server\uC640 \uD1B5\uC2E0\uD558\uAE30 \uC704\uD55C SDK\r\nnpm i zod\n"})}),"\n",(0,o.jsx)(n.h2,{id:"clientts",children:"client.ts"}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"server\uAC00 \uC9C0\uC6D0\uD558\uB294 transport\uC5D0 \uB9DE\uB294 client\uB97C \uC0AC\uC6A9"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:'import { Client } from "@modelcontextprotocol/sdk/client/index.js";\r\nimport { StdioClientTransport } from "@modelcontextprotocol/sdk/client/stdio.js";\r\nimport z from "zod";\r\n\r\nconst client = new Client(\r\n  { name: "My MCP Client", version: "1.0.0" },\r\n  {\r\n    capabilities: {},\r\n  },\r\n);\r\n\r\nawait client.connect(\r\n  new StdioClientTransport({\r\n    command: "node",\r\n    args: ["../server/index.js"],\r\n  }),\r\n);\r\n\r\n// resource request\r\nconst resourceResult = await client.readResource({\r\n  uri: "my-resource://hello-world",\r\n});\r\nconsole.log(resourceResult);\r\n// {\r\n//   contents: [\r\n//     {\r\n//       uri: "my-resource://hello-world",\r\n//       text: "Resource echo: hello-world",\r\n//     },\r\n//   ];\r\n// }\r\n\r\n// tool request\r\nconst toolResult = await client.callTool(\r\n  {\r\n    name: "my-tool",\r\n    _meta: {},\r\n    arguments: {\r\n      message: "Hello World!",\r\n    },\r\n  },\r\n  z.object({\r\n    content: z.array(\r\n      z.object({\r\n        text: z.string(),\r\n        type: z.enum(["text", "image"]),\r\n      }),\r\n    ),\r\n  }), // responseSchema is optional, or you can define a Zod schema here\r\n  {},\r\n);\r\nconsole.log(toolResult); // { content: [ { text: \'Tool echo: Hello World!\', type: \'text\' } ] }\r\n\r\n// prompt request\r\nconst promptResult = await client.getPrompt(\r\n  {\r\n    name: "my-prompt",\r\n    arguments: {\r\n      message: "Hello World!",\r\n    },\r\n  },\r\n  {},\r\n);\r\nconsole.log(promptResult); // { messages: [ { role: \'user\', content: { type: \'text\', text: \'Please process this message: Hello World!\' } } ] }\n'})})]})}function p(e={}){let{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},255511:function(e,n,r){r.d(n,{R:()=>s,x:()=>c});var t=r(596363);let o={},l=t.createContext(o);function s(e){let n=t.useContext(l);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);