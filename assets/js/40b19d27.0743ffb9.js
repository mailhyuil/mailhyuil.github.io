"use strict";(globalThis.webpackChunkmy_blog=globalThis.webpackChunkmy_blog||[]).push([[212762],{529087:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var r=t(596363);const s={},c=r.createContext(s);function a(e){const n=r.useContext(c);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(c.Provider,{value:n},e.children)}},736184:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>r,toc:()=>p});const r=JSON.parse('{"id":"c++/c++ base template","title":"c++ generic template class","description":"c++\uc5d0\uc11c \uc81c\ub124\ub9ad\uc744 \uad6c\ud604\ud558\ub294 \ubc29\ubc95","source":"@site/docs/c++/c++ base template.md","sourceDirName":"c++","slug":"/c++/c++ base template","permalink":"/docs/c++/c++ base template","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"c++ base template variadic template fold expression","permalink":"/docs/c++/c++ base template variadic template fold expression"},"next":{"title":"c++ enum","permalink":"/docs/c++/c++ base type enum"}}');var s=t(447259),c=t(529087);const a={},o="c++ generic template class",l={},p=[];function i(e){const n={blockquote:"blockquote",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"c-generic-template-class",children:"c++ generic template class"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"c++\uc5d0\uc11c \uc81c\ub124\ub9ad\uc744 \uad6c\ud604\ud558\ub294 \ubc29\ubc95"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"\ucef4\ud30c\uc77c \uc2dc\uac04\uc5d0 \ud0c0\uc785\uc774 \uacb0\uc815\ub41c\ub2e4 (typescript\ub294 \ub7f0\ud0c0\uc784\uc5d0 \uacb0\uc815\ub41c\ub2e4)"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"<class myType>"}),"\ub294 \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\uac83 (c++11\ubd80\ud130\ub294 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 \uac83\uc774 \uc88b\ub2e4)"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-cpp",children:'// \ud558\ub098\uc758 \ud0c0\uc785\ub9cc \ubc1b\uc744 \uc218 \uc788\ub294 \ud568\uc218\r\ntemplate <typename T>\r\nT const &min(T const &x, T const &y) {\r\n  return (x >= y) ? y : x;\r\n}\r\n\r\n// \ud15c\ud50c\ub9bf \ud2b9\uc218\ud654 : T\uac00 char\uc778 \uacbd\uc6b0\uc5d0\ub294 \uc774\ub807\uac8c \ucc98\ub9ac\ud574\ub77c\r\ntemplate <>\r\nchar const &min(char const &x, char const &y) {\r\n  return "type char is not supported";\r\n}\r\n\r\n// \uc5ec\ub7ec \ud0c0\uc785\uc744 \ubc1b\uc744 \uc218 \uc788\ub294 \ud074\ub798\uc2a4\r\ntemplate <typename T, typename U>\r\nclass myClass {\r\n  T x;\r\n  U y;\r\n  // ...\r\n};\r\n\r\n// \uac00\ubcc0 \uae38\uc774 \ud15c\ud50c\ub9bf\r\ntemplate <typename T, typename... Types>\r\nvoid print(T arg, Types... args) {\r\n  std::cout << arg << ", ";\r\n  print(args...);\r\n}\r\n\r\n// \uac00\ubcc0 \uae38\uc774 \ud15c\ud50c\ub9bf Fold expression\r\ntemplate <typename... Ints>\r\nint sum_all(Ints... nums) {\r\n  return (... + nums);\r\n}\n'})})]})}function m(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}}}]);