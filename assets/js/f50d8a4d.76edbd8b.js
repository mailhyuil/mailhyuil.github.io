"use strict";(globalThis.webpackChunkmy_blog=globalThis.webpackChunkmy_blog||[]).push([[900713],{423048:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"nestjs/nest base mixin","title":"nest base mixin","description":"controller","source":"@site/docs/nestjs/nest base mixin.md","sourceDirName":"nestjs","slug":"/nestjs/nest base mixin","permalink":"/docs/nestjs/nest base mixin","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"nest middleware","permalink":"/docs/nestjs/nest base middleware"},"next":{"title":"nest base DI sub-trees","permalink":"/docs/nestjs/nest base module DI & DI sub-trees"}}');var s=n(447259),i=n(529087);const a={},o="nest base mixin",d={},c=[{value:"controller",id:"controller",level:2},{value:"service",id:"service",level:2}];function l(e){const r={code:"code",h1:"h1",h2:"h2",header:"header",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"nest-base-mixin",children:"nest base mixin"})}),"\n",(0,s.jsx)(r.h2,{id:"controller",children:"controller"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:'import { Body, Controller, Delete, Get, Inject, Param, Post, Put, Type } from "@nestjs/common";\r\nimport { ApiTags } from "@nestjs/swagger";\r\nimport { TestService } from "./test.service";\r\nexport interface ICrudController<T = any> {\r\n  get(id: number): Promise<T>;\r\n  list(): Promise<T[]>;\r\n  create(data: T): Promise<T>;\r\n  update(id: number, data: T): Promise<T>;\r\n  delete(id: number): Promise<T>;\r\n}\r\n\r\nexport function CrudControllerMixin(service: Symbol | string | Type<ICrudController<any>>): Type<ICrudController<any>> {\r\n  class CrudControllerHost {\r\n    @Inject(service) private readonly crudService;\r\n\r\n    @Get(":id")\r\n    async get(@Param("id") id: number) {\r\n      return await this.crudService.get(id);\r\n    }\r\n    @Get()\r\n    async list() {\r\n      return await this.crudService.list();\r\n    }\r\n    @Post()\r\n    async create(@Body() data: any) {\r\n      return await this.crudService.create(data);\r\n    }\r\n    @Put(":id")\r\n    async update(@Param("id") id: number, @Body() data: any) {\r\n      return await this.crudService.update(id, data);\r\n    }\r\n    @Delete(":id")\r\n    async delete(@Param("id") id: number) {\r\n      return await this.crudService.delete(id);\r\n    }\r\n  }\r\n  return CrudControllerHost;\r\n}\r\n\r\n@Controller()\r\n@ApiTags("test")\r\nexport class TestController extends CrudControllerMixin(TestService) {}\n'})}),"\n",(0,s.jsx)(r.h2,{id:"service",children:"service"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:'import { Injectable } from "@nestjs/common";\r\n\r\nexport interface ICrudService<T = any> {\r\n  get(id: number): Promise<T>;\r\n  list(): Promise<T[]>;\r\n  create(data: T): Promise<T>;\r\n  update(id: number, data: T): Promise<T>;\r\n  delete(id: number): Promise<T>;\r\n}\r\n\r\n@Injectable()\r\nexport class TestService implements ICrudService<any> {\r\n  get(id: number): Promise<any> {\r\n    return new Promise((res) => res(""));\r\n  }\r\n  list(): Promise<any[]> {\r\n    return new Promise((res) => res([""]));\r\n  }\r\n  create(data: any): Promise<any> {\r\n    return new Promise((res) => res(""));\r\n  }\r\n  update(id: number, data: any): Promise<any> {\r\n    return new Promise((res) => res(""));\r\n  }\r\n  delete(id: number): Promise<any> {\r\n    return new Promise((res) => res(""));\r\n  }\r\n}\n'})})]})}function m(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},529087:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>o});var t=n(596363);const s={},i=t.createContext(s);function a(e){const r=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);