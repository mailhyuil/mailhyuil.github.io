"use strict";(globalThis.webpackChunkmy_blog=globalThis.webpackChunkmy_blog||[]).push([[311793],{529087:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var o=t(596363);const r={},i=o.createContext(r);function s(e){const n=o.useContext(i);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),o.createElement(i.Provider,{value:n},e.children)}},629378:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"ai/github copilot","title":"github copilot","description":".github/copilot-instructions.md","source":"@site/docs/ai/github copilot.md","sourceDirName":"ai","slug":"/ai/github copilot","permalink":"/docs/ai/github copilot","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"crewAI","permalink":"/docs/ai/crewAI"},"next":{"title":"hugging face","permalink":"/docs/ai/hugging face Inference API"}}');var r=t(447259),i=t(529087);const s={},c="github copilot",a={},l=[{value:".github/copilot-instructions.md",id:"githubcopilot-instructionsmd",level:2}];function u(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"github-copilot",children:"github copilot"})}),"\n",(0,r.jsx)(n.h2,{id:"githubcopilot-instructionsmd",children:".github/copilot-instructions.md"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"copilot-instruction\uc744 \ud1b5\ud574 \ubbf8\ub9ac \uc815\uc758\ub41c \uc9c0\uce68\uc744 \uc81c\uacf5\ud558\uc5ec \uc77c\uad00\ub41c \ucf54\ub4dc \uc791\uc131\uc744 \uc9c0\uc6d0\ud569\ub2c8\ub2e4."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-txt",children:"# Repository-wide Instructions for GitHub Copilot\r\n\r\n## General Conventions\r\n\r\n- **Indentation:** Use 2 spaces for indentation in all code files.\r\n- **Naming Conventions:** Follow camelCase for JavaScript variables and functions, and PascalCase for React components.\r\n- **Error Handling:** Always include try-catch blocks for asynchronous operations and handle potential errors gracefully.\r\n- **Logging:** Use the `console.log` for debugging purposes only; for production logging, use a dedicated logging library like Winston or Pino.\r\n\r\n## Technology-Specific Guidelines\r\n\r\n### JavaScript/TypeScript\r\n\r\n- **Quotes:** Use double quotes for all string literals.\r\n- **Imports:** Prefer named imports over default imports when possible.\r\n- **React Components:** Use functional components with hooks instead of class components.\r\n\r\n### Java\r\n\r\n- **Dependency Management:** Use Bazel for managing Java dependencies, not Maven.\r\n- **Return Types:** Return `Optional` instead of `null` for methods that might not return a value.\r\n- **Logging:** Integrate SLF4J for all logging within Java services.\r\n\r\n## Architectural and Security Guidelines\r\n\r\n- **Secrets Management:** Never hardcode secrets or sensitive values; always reference them from secure sources like Azure Key Vault or GitHub Secrets.\r\n- **Resource Deployment (Terraform/Infrastructure as Code):** Prefer `for_each` over `count` for deploying multiple similar resources.\r\n- **Code Reviews:** When reviewing pull requests, ensure adherence to the above conventions and security best practices.\n"})})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);