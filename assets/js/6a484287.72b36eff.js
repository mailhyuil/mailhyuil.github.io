"use strict";(globalThis.webpackChunkmy_blog=globalThis.webpackChunkmy_blog||[]).push([[275381],{509979:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"aws/aws CDN cloudfront image-resize","title":"aws cloudfront image-resize","description":"cloudfront\uc5d0 \uc694\uccad\uc774 \uc62c \ub54c \uc774\ubbf8\uc9c0\ub97c \ub9ac\uc0ac\uc774\uc9d5\ud558\ub294 \ubc29\uc2dd","source":"@site/docs/aws/aws CDN cloudfront image-resize.md","sourceDirName":"aws","slug":"/aws/aws CDN cloudfront image-resize","permalink":"/docs/aws/aws CDN cloudfront image-resize","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"aws CDN cloudfront geographic restrictions","permalink":"/docs/aws/aws CDN cloudfront geographic restrictions"},"next":{"title":"aws cloudfront","permalink":"/docs/aws/aws CDN cloudfront"}}');var t=r(447259),a=r(529087);const s={},o="aws cloudfront image-resize",c={},d=[{value:"image-resize lambda function",id:"image-resize-lambda-function",level:2}];function l(e){const n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"aws-cloudfront-image-resize",children:"aws cloudfront image-resize"})}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"cloudfront\uc5d0 \uc694\uccad\uc774 \uc62c \ub54c \uc774\ubbf8\uc9c0\ub97c \ub9ac\uc0ac\uc774\uc9d5\ud558\ub294 \ubc29\uc2dd"}),"\n",(0,t.jsx)(n.p,{children:"\uc694\uccad\uc774 \ud55c\ubc88\uc774\ub77c\ub3c4 \uc640\uc57c resize\ub97c \ud558\ub294 \uac83\uc774\ubbc0\ub85c \ucc98\uc74c \uc694\uccad\uc77c \ub54c\ub294 \uc2dc\uac04\uc774 \uac78\ub9bc"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"upload \uc2dc \ub9ac\uc0ac\uc774\uc9d5\uc744 \ud558\uae30 \uc704\ud574\uc11c\ub294 s3\uc758 event notification\uc744 \uc0ac\uc6a9\ud574\uc57c \ud568"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"image-resize-lambda-function",children:"image-resize lambda function"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'"use strict";\r\n\r\nconst querystring = require("querystring");\r\n\r\n// defines the allowed dimensions, default dimensions and how much variance from allowed\r\n// dimension is allowed.\r\n\r\nconst variables = {\r\n  allowedDimension: [\r\n    { w: 100, h: 100 },\r\n    { w: 200, h: 200 },\r\n    { w: 300, h: 300 },\r\n    { w: 400, h: 400 },\r\n  ],\r\n  defaultDimension: { w: 200, h: 200 },\r\n  variance: 20,\r\n  webpExtension: "webp",\r\n};\r\n\r\nexports.handler = (event, context, callback) => {\r\n  const request = event.Records[0].cf.request;\r\n  const headers = request.headers;\r\n\r\n  // parse the querystrings key-value pairs. In our case it would be d=100x100\r\n  const params = querystring.parse(request.querystring);\r\n\r\n  // fetch the uri of original image\r\n  let fwdUri = request.uri;\r\n\r\n  // if there is no dimension attribute, just pass the request\r\n  if (!params.d) {\r\n    callback(null, request);\r\n    return;\r\n  }\r\n  // read the dimension parameter value = width x height and split it by \'x\'\r\n  const dimensionMatch = params.d.split("x");\r\n\r\n  // set the width and height parameters\r\n  let width = dimensionMatch[0];\r\n  let height = dimensionMatch[1];\r\n\r\n  // parse the prefix, image name and extension from the uri.\r\n  // In our case /images/image.jpg\r\n\r\n  const match = fwdUri.match(/(.*)\\/(.*)\\.(.*)/);\r\n\r\n  let prefix = match[1];\r\n  let imageName = match[2];\r\n  let extension = match[3];\r\n\r\n  // define variable to be set to true if requested dimension is allowed.\r\n  let matchFound = false;\r\n\r\n  // calculate the acceptable variance. If image dimension is 105 and is within acceptable\r\n  // range, then in our case, the dimension would be corrected to 100.\r\n  let variancePercent = variables.variance / 100;\r\n\r\n  for (let dimension of variables.allowedDimension) {\r\n    let minWidth = dimension.w - dimension.w * variancePercent;\r\n    let maxWidth = dimension.w + dimension.w * variancePercent;\r\n    if (width >= minWidth && width <= maxWidth) {\r\n      width = dimension.w;\r\n      height = dimension.h;\r\n      matchFound = true;\r\n      break;\r\n    }\r\n  }\r\n  // if no match is found from allowed dimension with variance then set to default\r\n  //dimensions.\r\n  if (!matchFound) {\r\n    width = variables.defaultDimension.w;\r\n    height = variables.defaultDimension.h;\r\n  }\r\n\r\n  // read the accept header to determine if webP is supported.\r\n  let accept = headers["accept"] ? headers["accept"][0].value : "";\r\n\r\n  let url = [];\r\n  // build the new uri to be forwarded upstream\r\n  url.push(prefix);\r\n  url.push(width + "x" + height);\r\n\r\n  // check support for webp\r\n  if (accept.includes(variables.webpExtension)) {\r\n    url.push(variables.webpExtension);\r\n  } else {\r\n    url.push(extension);\r\n  }\r\n  url.push(imageName + "." + extension);\r\n\r\n  fwdUri = url.join("/");\r\n\r\n  // final modified url is of format /images/200x200/webp/image.jpg\r\n  request.uri = fwdUri;\r\n  callback(null, request);\r\n};\n'})})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},529087:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>o});var i=r(596363);const t={},a=i.createContext(t);function s(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);