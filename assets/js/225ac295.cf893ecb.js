"use strict";(globalThis.webpackChunkmy_blog=globalThis.webpackChunkmy_blog||[]).push([[106808],{529087:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var r=t(596363);const s={},a=r.createContext(s);function o(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(a.Provider,{value:n},e.children)}},736383:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>m,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"nestjs/nest config aws","title":"nestjs config aws","description":"","source":"@site/docs/nestjs/nest config aws.md","sourceDirName":"nestjs","slug":"/nestjs/nest config aws","permalink":"/docs/nestjs/nest config aws","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"nest compression","permalink":"/docs/nestjs/nest compression"},"next":{"title":"nestjs config","permalink":"/docs/nestjs/nest config"}}');var s=t(447259),a=t(529087);const o={},c="nestjs config aws",i={},d=[];function l(e){const n={code:"code",h1:"h1",header:"header",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"nestjs-config-aws",children:"nestjs config aws"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"// config/secrets.config.ts\r\nimport { SecretsManagerClient, GetSecretValueCommand } from '@aws-sdk/client-secrets-manager';\r\n\r\nexport default async () => {\r\n  const secretsManager = new SecretsManagerClient({ region: 'ap-northeast-2' });\r\n  const ssm = new SSMClient({ region: 'ap-northeast-2' });\r\n  // secrets\r\n  const dbSecrets = await secretsManager.send(\r\n    new GetSecretValueCommand({ SecretId: 'prod/database' })\r\n  );\r\n  const apiSecrets = await secretsManager.send(\r\n    new GetSecretValueCommand({ SecretId: 'prod/api-keys' })\r\n  );\r\n  // system parameters (e.g. arn, url, etc.)\r\n  const param = await ssm.send(new GetParameterCommand({ Name: '/prod/some-param', WithDecryption: true }));\r\n  console.log('SSM Parameter:', param.Parameter?.Value);\r\n\r\n  return {\r\n    database: JSON.parse(dbSecrets.SecretString),\r\n    apiKeys: JSON.parse(apiSecrets.SecretString),\r\n\r\n  };\r\n};\r\n\r\n// app.module.ts\r\n@Module({\r\n  imports: [\r\n    ConfigModule.forRoot({\r\n      load: [secretsConfig], // Secrets Manager \ud1b5\ud569\r\n      cache: true,\r\n    }),\r\n  ],\r\n})\n"})})]})}function m(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);