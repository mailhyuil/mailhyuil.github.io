"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([["714988"],{375456:function(e,r,t){t.r(r),t.d(r,{frontMatter:()=>a,toc:()=>p,default:()=>m,metadata:()=>n,assets:()=>c,contentTitle:()=>i});var n=JSON.parse('{"id":"nestjs/nest base decorator toss nestjs-aop example","title":"nest decorator toss nestjs-aop example","description":"","source":"@site/docs/nestjs/nest base decorator toss nestjs-aop example.md","sourceDirName":"nestjs","slug":"/nestjs/nest base decorator toss nestjs-aop example","permalink":"/docs/nestjs/nest base decorator toss nestjs-aop example","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"GetUser decorator","permalink":"/docs/nestjs/nest base decorator createParamDecorator"},"next":{"title":"nest decorator toss AOP","permalink":"/docs/nestjs/nest base decorator toss nestjs-aop"}}'),s=t(447259),o=t(255511);let a={},i="nest decorator toss nestjs-aop example",c={},p=[];function d(e){let r={code:"code",h1:"h1",header:"header",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"nest-decorator-toss-nestjs-aop-example",children:"nest decorator toss nestjs-aop example"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:'import { Inject } from "@nestjs/common";\r\nimport { RedisClientType } from "@redis/client";\r\nimport { Aspect, LazyDecorator, WrapParams, createDecorator } from "@toss/nestjs-aop";\r\nimport { MAX_POINT_ID } from "../app/max-point/max-point.service";\r\nimport { PrismaService } from "../prisma/prisma.service";\r\nimport { REDIS_CLIENT } from "../redis/redis.provider";\r\n\r\nexport const ADD_POINT = Symbol("ADD_POINT");\r\n\r\nconst createPointId = (userId: number) => `point:${userId}`;\r\n\r\n@Aspect(ADD_POINT)\r\nexport class AddPointDecorator implements LazyDecorator<any, number> {\r\n  constructor(private readonly prisma: PrismaService, @Inject(REDIS_CLIENT) private readonly redis: RedisClientType) {}\r\n  wrap(params: WrapParams<any, number>) {\r\n    const point = params.metadata;\r\n    return async (...args: any) => {\r\n      const res = await params.method(...args);\r\n      // add point\r\n      setTimeout(async () => {\r\n        const totalPoint = await this.redis.get(createPointId(res.userId));\r\n        const maxPoint = await this.redis.get(MAX_POINT_ID);\r\n        if (!maxPoint) {\r\n          throw new Error("Max Point is not set");\r\n        }\r\n\r\n        if (!totalPoint) {\r\n          await this.prisma.user.update({\r\n            where: {\r\n              id: res.userId,\r\n            },\r\n            data: {\r\n              point: {\r\n                increment: point,\r\n              },\r\n            },\r\n          });\r\n          await this.redis.set(createPointId(res.userId), point);\r\n          return;\r\n        }\r\n\r\n        if (+totalPoint <= +maxPoint) {\r\n          await this.prisma.user.update({\r\n            where: {\r\n              id: res.userId,\r\n            },\r\n            data: {\r\n              point: {\r\n                increment: point,\r\n              },\r\n            },\r\n          });\r\n          await this.redis.incrBy(createPointId(res.userId), point);\r\n          return;\r\n        }\r\n      });\r\n      return res;\r\n    };\r\n  }\r\n}\r\n\r\nexport const AddPoint = (point: number) => createDecorator(ADD_POINT, point);\n'})})]})}function m(e={}){let{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},255511:function(e,r,t){t.d(r,{R:()=>a,x:()=>i});var n=t(596363);let s={},o=n.createContext(s);function a(e){let r=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),n.createElement(o.Provider,{value:r},e.children)}}}]);