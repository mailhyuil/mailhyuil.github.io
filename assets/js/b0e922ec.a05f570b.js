"use strict";(globalThis.webpackChunkmy_blog=globalThis.webpackChunkmy_blog||[]).push([[211563],{137805:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>m,contentTitle:()=>s,default:()=>g,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"aws/aws Lambda Image Resize on Demand","title":"Lambda layer Image Resize on Demand","description":"1. S3 \ubc84\ud0b7 \uc0dd\uc131","source":"@site/docs/aws/aws Lambda Image Resize on Demand.md","sourceDirName":"aws","slug":"/aws/aws Lambda Image Resize on Demand","permalink":"/docs/aws/aws Lambda Image Resize on Demand","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Lambda Function URL","permalink":"/docs/aws/aws Lambda Function URL"},"next":{"title":"Lambda layer Image Resize","permalink":"/docs/aws/aws Lambda Image Resize"}}');var a=n(447259),i=n(529087);const o={},s="Lambda layer Image Resize on Demand",m={},l=[];function d(e){const r={blockquote:"blockquote",code:"code",h1:"h1",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.header,{children:(0,a.jsx)(r.h1,{id:"lambda-layer-image-resize-on-demand",children:"Lambda layer Image Resize on Demand"})}),"\n",(0,a.jsxs)(r.ol,{children:["\n",(0,a.jsxs)(r.li,{children:["\n",(0,a.jsx)(r.p,{children:"S3 \ubc84\ud0b7 \uc0dd\uc131"}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsx)(r.li,{children:"original bucket (original \uc774\ubbf8\uc9c0\ub97c \ub2f4\uc744 \ubc84\ud0b7) (block all public access) (cors \uc124\uc815 \ud544\uc694)"}),"\n"]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-json",children:'{\r\n  "Version": "2012-10-17",\r\n  "Statement": [\r\n    {\r\n      "Sid": "AllowLambdaAccessOnly",\r\n      "Effect": "Allow",\r\n      "Principal": {\r\n        "AWS": "arn:aws:iam::xxxxxxxxxxxx:role/service-role/image-resize-role-xxxxxxxx"\r\n      },\r\n      "Action": ["s3:GetObject", "s3:PutObject"],\r\n      "Resource": "arn:aws:s3:::hyuil-images-original/*"\r\n    }\r\n  ]\r\n}\n'})}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsx)(r.li,{children:"transformed (image-resized) bucket (\ubcc0\ud658\ub41c \uc774\ubbf8\uc9c0\ub97c \ub2f4\uc744 \ubc84\ud0b7) (public access all) (cors \uc124\uc815 \ud544\uc694)"}),"\n"]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-json",children:'{\r\n  "Version": "2012-10-17",\r\n  "Statement": [\r\n    {\r\n      "Sid": "AllowAllExceptResourcesFolder",\r\n      "Effect": "Allow",\r\n      "Principal": "*",\r\n      "Action": "s3:*",\r\n      "Resource": ["arn:aws:s3:::hyuil-images-resized", "arn:aws:s3:::hyuil-images-resized/*"]\r\n    }\r\n  ]\r\n}\n'})}),"\n"]}),"\n",(0,a.jsxs)(r.li,{children:["\n",(0,a.jsx)(r.p,{children:"Lambda \uc0dd\uc131"}),"\n",(0,a.jsxs)(r.blockquote,{children:["\n",(0,a.jsx)(r.p,{children:"Funtion URL \uc0dd\uc131 (Auth None)"}),"\n",(0,a.jsxs)(r.blockquote,{children:["\n",(0,a.jsx)(r.p,{children:"memory 512MB, timeout 5s ~ 10s"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-js",children:'// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n// SPDX-License-Identifier: MIT-0\r\n\r\nimport { GetObjectCommand, PutObjectCommand, S3Client } from "@aws-sdk/client-s3";\r\nimport Sharp from "sharp";\r\n\r\nconst s3Client = new S3Client();\r\nconst S3_ORIGINAL_IMAGE_BUCKET = "image-original";\r\nconst S3_TRANSFORMED_IMAGE_BUCKET = "image-resized";\r\nconst TRANSFORMED_IMAGE_CACHE_TTL = "public, max-age=31536000, immutable";\r\nconst MAX_IMAGE_SIZE = 2_097_152; // 2MB\r\n\r\nexport const handler = async event => {\r\n  // Validate if this is a GET request\r\n  if (!event.requestContext || !event.requestContext.http || !(event.requestContext.http.method === "GET"))\r\n    return sendError(400, "Only GET method is supported", event);\r\n  // An example of expected path is /images/rio/1.jpeg/format=auto,width=100 or /images/rio/1.jpeg/original where /images/rio/1.jpeg is the path of the original image\r\n  var imagePathArray = event.requestContext.http.path.split("/");\r\n  // get the requested image operations\r\n  var operationsPrefix = imagePathArray.pop();\r\n  // get the original image path images/rio/1.jpg\r\n  imagePathArray.shift();\r\n  var originalImagePath = imagePathArray.join("/");\r\n\r\n  var startTime = performance.now();\r\n  // Downloading original image\r\n  let originalImageBody;\r\n  let contentType;\r\n  try {\r\n    const getOriginalImageCommand = new GetObjectCommand({ Bucket: S3_ORIGINAL_IMAGE_BUCKET, Key: originalImagePath });\r\n    const getOriginalImageCommandOutput = await s3Client.send(getOriginalImageCommand);\r\n    console.log(`Got response from S3 for ${originalImagePath}`);\r\n\r\n    originalImageBody = getOriginalImageCommandOutput.Body.transformToByteArray();\r\n    contentType = getOriginalImageCommandOutput.ContentType;\r\n  } catch (error) {\r\n    if (error.name === "NoSuchKey") {\r\n      return sendError(404, "The requested image does not exist", error);\r\n    }\r\n    return sendError(500, "Error downloading original image", error);\r\n  }\r\n  let transformedImage = Sharp(await originalImageBody, { failOn: "none", animated: true });\r\n  // Get image orientation to rotate if needed\r\n  const imageMetadata = await transformedImage.metadata();\r\n  // execute the requested operations\r\n  const operationsJSON = Object.fromEntries(operationsPrefix.split(",").map(operation => operation.split("=")));\r\n  // variable holding the server timing header value\r\n  var timingLog = "img-download;dur=" + parseInt(performance.now() - startTime);\r\n  startTime = performance.now();\r\n  try {\r\n    // check if resizing is requested\r\n    var resizingOptions = {};\r\n    if (operationsJSON["width"]) resizingOptions.width = parseInt(operationsJSON["width"]);\r\n    if (operationsJSON["height"]) resizingOptions.height = parseInt(operationsJSON["height"]);\r\n    if (resizingOptions) transformedImage = transformedImage.resize(resizingOptions);\r\n    // check if rotation is needed\r\n    if (imageMetadata.orientation) transformedImage = transformedImage.rotate();\r\n    // check if formatting is requested\r\n    if (operationsJSON["format"]) {\r\n      var isLossy = false;\r\n      switch (operationsJSON["format"]) {\r\n        case "jpeg":\r\n          contentType = "image/jpeg";\r\n          isLossy = true;\r\n          break;\r\n        case "gif":\r\n          contentType = "image/gif";\r\n          break;\r\n        case "webp":\r\n          contentType = "image/webp";\r\n          isLossy = true;\r\n          break;\r\n        case "png":\r\n          contentType = "image/png";\r\n          break;\r\n        case "avif":\r\n          contentType = "image/avif";\r\n          isLossy = true;\r\n          break;\r\n        default:\r\n          contentType = "image/jpeg";\r\n          isLossy = true;\r\n      }\r\n      if (operationsJSON["quality"] && isLossy) {\r\n        transformedImage = transformedImage.toFormat(operationsJSON["format"], {\r\n          quality: parseInt(operationsJSON["quality"]),\r\n        });\r\n      } else transformedImage = transformedImage.toFormat(operationsJSON["format"]);\r\n    } else {\r\n      /// If not format is precised, Sharp converts svg to png by default https://github.com/aws-samples/image-optimization/issues/48\r\n      if (contentType === "image/svg+xml") contentType = "image/png";\r\n    }\r\n    transformedImage = await transformedImage.toBuffer();\r\n  } catch (error) {\r\n    return sendError(500, "error transforming image", error);\r\n  }\r\n  timingLog = timingLog + ",img-transform;dur=" + parseInt(performance.now() - startTime);\r\n\r\n  // handle gracefully generated images bigger than a specified limit (e.g. Lambda output object limit)\r\n  const imageTooBig = Buffer.byteLength(transformedImage) > MAX_IMAGE_SIZE;\r\n\r\n  // upload transformed image back to S3 if required in the architecture\r\n  if (S3_TRANSFORMED_IMAGE_BUCKET) {\r\n    startTime = performance.now();\r\n    try {\r\n      const putImageCommand = new PutObjectCommand({\r\n        Body: transformedImage,\r\n        Bucket: S3_TRANSFORMED_IMAGE_BUCKET,\r\n        Key: originalImagePath + "/" + operationsPrefix,\r\n        ContentType: contentType,\r\n        CacheControl: TRANSFORMED_IMAGE_CACHE_TTL,\r\n      });\r\n      await s3Client.send(putImageCommand);\r\n      timingLog = timingLog + ",img-upload;dur=" + parseInt(performance.now() - startTime);\r\n      // If the generated image file is too big, send a redirection to the generated image on S3, instead of serving it synchronously from Lambda.\r\n      if (imageTooBig) {\r\n        return {\r\n          statusCode: 302,\r\n          headers: {\r\n            Location: "/" + originalImagePath + "?" + operationsPrefix.replace(/,/g, "&"),\r\n            "Cache-Control": "private,no-store",\r\n            "Server-Timing": timingLog,\r\n          },\r\n        };\r\n      }\r\n    } catch (error) {\r\n      logError("Could not upload transformed image to S3", error);\r\n    }\r\n  }\r\n\r\n  // Return error if the image is too big and a redirection to the generated image was not possible, else return transformed image\r\n  if (imageTooBig) {\r\n    return sendError(403, "Requested transformed image is too big", "");\r\n  } else\r\n    return {\r\n      statusCode: 200,\r\n      body: transformedImage.toString("base64"),\r\n      isBase64Encoded: true,\r\n      headers: {\r\n        "Content-Type": contentType,\r\n        "Cache-Control": TRANSFORMED_IMAGE_CACHE_TTL,\r\n        "Server-Timing": timingLog,\r\n      },\r\n    };\r\n};\r\n\r\nfunction sendError(statusCode, body, error) {\r\n  logError(body, error);\r\n  return { statusCode, body };\r\n}\r\n\r\nfunction logError(body, error) {\r\n  console.log("APPLICATION ERROR", body);\r\n  console.log(error);\r\n}\n'})}),"\n",(0,a.jsxs)(r.ol,{start:"3",children:["\n",(0,a.jsx)(r.li,{children:"Cloudfront Function \uc0dd\uc131"}),"\n"]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-js",children:'// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\r\n// SPDX-License-Identifier: MIT-0\r\n\r\nfunction handler(event) {\r\n  var request = event.request;\r\n  var originalImagePath = request.uri;\r\n  //  validate, process and normalize the requested operations in query parameters\r\n  var normalizedOperations = {};\r\n  if (request.querystring) {\r\n    Object.keys(request.querystring).forEach(operation => {\r\n      switch (operation.toLowerCase()) {\r\n        case "format":\r\n          var SUPPORTED_FORMATS = ["auto", "jpeg", "webp", "avif", "png", "svg", "gif"];\r\n          if (\r\n            request.querystring[operation]["value"] &&\r\n            SUPPORTED_FORMATS.includes(request.querystring[operation]["value"].toLowerCase())\r\n          ) {\r\n            var format = request.querystring[operation]["value"].toLowerCase(); // normalize to lowercase\r\n            if (format === "auto") {\r\n              format = "jpeg";\r\n              if (request.headers["accept"]) {\r\n                if (request.headers["accept"].value.includes("avif")) {\r\n                  format = "avif";\r\n                } else if (request.headers["accept"].value.includes("webp")) {\r\n                  format = "webp";\r\n                }\r\n              }\r\n            }\r\n            normalizedOperations["format"] = format;\r\n          }\r\n          break;\r\n        case "width":\r\n          if (request.querystring[operation]["value"]) {\r\n            var width = parseInt(request.querystring[operation]["value"]);\r\n            if (!isNaN(width) && width > 0) {\r\n              // you can protect the Lambda function by setting a max value, e.g. if (width > 4000) width = 4000;\r\n              normalizedOperations["width"] = width.toString();\r\n            }\r\n          }\r\n          break;\r\n        case "height":\r\n          if (request.querystring[operation]["value"]) {\r\n            var height = parseInt(request.querystring[operation]["value"]);\r\n            if (!isNaN(height) && height > 0) {\r\n              // you can protect the Lambda function by setting a max value, e.g. if (height > 4000) height = 4000;\r\n              normalizedOperations["height"] = height.toString();\r\n            }\r\n          }\r\n          break;\r\n        case "quality":\r\n          if (request.querystring[operation]["value"]) {\r\n            var quality = parseInt(request.querystring[operation]["value"]);\r\n            if (!isNaN(quality) && quality > 0) {\r\n              if (quality > 100) quality = 100;\r\n              normalizedOperations["quality"] = quality.toString();\r\n            }\r\n          }\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n    //rewrite the path to normalized version if valid operations are found\r\n    if (Object.keys(normalizedOperations).length > 0) {\r\n      // put them in order\r\n      var normalizedOperationsArray = [];\r\n      if (normalizedOperations.format) normalizedOperationsArray.push("format=" + normalizedOperations.format);\r\n      if (normalizedOperations.quality) normalizedOperationsArray.push("quality=" + normalizedOperations.quality);\r\n      if (normalizedOperations.width) normalizedOperationsArray.push("width=" + normalizedOperations.width);\r\n      if (normalizedOperations.height) normalizedOperationsArray.push("height=" + normalizedOperations.height);\r\n      request.uri = originalImagePath + "/" + normalizedOperationsArray.join(",");\r\n    } else {\r\n      // If no valid operation is found, flag the request with /original path suffix\r\n      request.uri = originalImagePath + "/original";\r\n    }\r\n  } else {\r\n    // If no query strings are found, flag the request with /original path suffix\r\n    request.uri = originalImagePath + "/original";\r\n  }\r\n  // remove query strings\r\n  request["querystring"] = {};\r\n  return request;\r\n}\n'})}),"\n",(0,a.jsxs)(r.ol,{start:"4",children:["\n",(0,a.jsx)(r.li,{children:"Cloudfront\uc5d0 S3_Image_Resized_Bucket, Lambda_Function_URL Origin \ucd94\uac00 \ud6c4 Origin Group\uc73c\ub85c \ubb36\uae30"}),"\n"]}),"\n",(0,a.jsxs)(r.ul,{children:["\n",(0,a.jsx)(r.li,{children:"image-resized-bucket: 1\uc21c\uc704"}),"\n",(0,a.jsx)(r.li,{children:"lambda-function-url: 2\uc21c\uc704"}),"\n"]}),"\n",(0,a.jsxs)(r.ol,{start:"5",children:["\n",(0,a.jsx)(r.li,{children:"/path\uc5d0 Origin Group \ucd94\uac00"}),"\n"]})]})}function g(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},529087:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>s});var t=n(596363);const a={},i=t.createContext(a);function o(e){const r=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);