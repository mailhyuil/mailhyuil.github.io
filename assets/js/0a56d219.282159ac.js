"use strict";(globalThis.webpackChunkmy_blog=globalThis.webpackChunkmy_blog||[]).push([[753395],{529087:(n,a,e)=>{e.d(a,{R:()=>o,x:()=>c});var l=e(596363);const r={},t=l.createContext(r);function o(n){const a=l.useContext(t);return l.useMemo(function(){return"function"==typeof n?n(a):{...a,...n}},[a,n])}function c(n){let a;return a=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:o(n.components),l.createElement(t.Provider,{value:a},n.children)}},744058:(n,a,e)=>{e.r(a),e.d(a,{assets:()=>i,contentTitle:()=>c,default:()=>b,frontMatter:()=>o,metadata:()=>l,toc:()=>s});const l=JSON.parse('{"id":"ai langchain/langchain LCEL RunnableParallel - RunnableMap","title":"RunnableParallel","description":"\uc5ec\ub7ec Runnable\uc744 \ubcd1\ub82c \uc2e4\ud589","source":"@site/docs/ai langchain/langchain LCEL RunnableParallel - RunnableMap.md","sourceDirName":"ai langchain","slug":"/ai langchain/langchain LCEL RunnableParallel - RunnableMap","permalink":"/docs/ai langchain/langchain LCEL RunnableParallel - RunnableMap","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"RunnableLambda","permalink":"/docs/ai langchain/langchain LCEL RunnableLamda"},"next":{"title":"RunnablePassthrough","permalink":"/docs/ai langchain/langchain LCEL RunnablePassthrough"}}');var r=e(447259),t=e(529087);const o={},c="RunnableParallel",i={},s=[];function u(n){const a={blockquote:"blockquote",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,t.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.header,{children:(0,r.jsx)(a.h1,{id:"runnableparallel",children:"RunnableParallel"})}),"\n",(0,r.jsxs)(a.blockquote,{children:["\n",(0,r.jsx)(a.p,{children:"\uc5ec\ub7ec Runnable\uc744 \ubcd1\ub82c \uc2e4\ud589"}),"\n",(0,r.jsxs)(a.blockquote,{children:["\n",(0,r.jsx)(a.p,{children:"Promise.all, forkJoin\uacfc \ube44\uc2b7"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-ts",children:'import { RunnableLambda, RunnableParallel } from "@langchain/core/runnables";\r\n\r\nconst runnable1 = RunnableLambda.from((x: any) => {\r\n  return { foo: x };\r\n});\r\n\r\nconst runnable2 = RunnableLambda.from((x: any) => [x].concat([x]));\r\n\r\n// \ubcd1\ub82c \uc2e4\ud589\r\nconst chain = RunnableParallel.from({\r\n  first: runnable1,\r\n  second: runnable2,\r\n});\r\n\r\nawait chain.invoke(2);\n'})})]})}function b(n={}){const{wrapper:a}={...(0,t.R)(),...n.components};return a?(0,r.jsx)(a,{...n,children:(0,r.jsx)(u,{...n})}):u(n)}}}]);