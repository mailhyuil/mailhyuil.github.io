"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([["569980"],{987054:function(r,e,n){n.r(e),n.d(e,{frontMatter:()=>a,toc:()=>i,default:()=>u,metadata:()=>s,assets:()=>c,contentTitle:()=>d});var s=JSON.parse('{"id":"nodejs/nodejs module multicore worker_threads SharedArrayBuffer & Atomics","title":"node worker_threads SharedArrayBuffer & Atomics","description":"SharedArrayBuffer\uC640 Atomics API\uB97C \uC0AC\uC6A9\uD558\uBA74 \uC5EC\uB7EC \uC2A4\uB808\uB4DC\uAC04 \uC548\uC804\uD558\uAC8C \uB370\uC774\uD130\uB97C \uACF5\uC720\uD560 \uC218 \uC788\uC2B5\uB2C8\uB2E4.","source":"@site/docs/nodejs/nodejs module multicore worker_threads SharedArrayBuffer & Atomics.md","sourceDirName":"nodejs","slug":"/nodejs/nodejs module multicore worker_threads SharedArrayBuffer & Atomics","permalink":"/docs/nodejs/nodejs module multicore worker_threads SharedArrayBuffer & Atomics","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"nodejs cluster","permalink":"/docs/nodejs/nodejs module multicore cluster"},"next":{"title":"node worker_threads in child_process (\uC790\uC2DD \uD504\uB85C\uC138\uC2A4\uC5D0\uC11C \uBA40\uD2F0 \uC2A4\uB808\uB529)","permalink":"/docs/nodejs/nodejs module multicore worker_threads in child_process - \uC790\uC2DD \uD504\uB85C\uC138\uC2A4\uC5D0\uC11C \uBA40\uD2F0 \uC2A4\uB808\uB529"}}'),o=n(447259),t=n(255511);let a={},d="node worker_threads SharedArrayBuffer & Atomics",c={},i=[{value:"main.js",id:"mainjs",level:2},{value:"child.js",id:"childjs",level:2},{value:"worker.js",id:"workerjs",level:2}];function l(r){let e={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,t.R)(),...r.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"node-worker_threads-sharedarraybuffer--atomics",children:"node worker_threads SharedArrayBuffer & Atomics"})}),"\n",(0,o.jsxs)(e.blockquote,{children:["\n",(0,o.jsx)(e.p,{children:"SharedArrayBuffer\uC640 Atomics API\uB97C \uC0AC\uC6A9\uD558\uBA74 \uC5EC\uB7EC \uC2A4\uB808\uB4DC\uAC04 \uC548\uC804\uD558\uAC8C \uB370\uC774\uD130\uB97C \uACF5\uC720\uD560 \uC218 \uC788\uC2B5\uB2C8\uB2E4."}),"\n",(0,o.jsxs)(e.blockquote,{children:["\n",(0,o.jsx)(e.p,{children:"postMessage\uB97C \uC0AC\uC6A9\uC2DC \uB370\uC774\uD130\uB97C \uBCF5\uC0AC\uD574\uC11C \uC804\uB2EC\uD558\uAC8C \uB418\uC5B4 \uC624\uBC84\uD5E4\uB4DC\uAC00 \uBC1C\uC0DD"}),"\n",(0,o.jsx)(e.p,{children:"SharedArrayBuffer\uB97C \uC0AC\uC6A9\uD558\uBA74 \uB370\uC774\uD130\uB97C \uBCF5\uC0AC\uD558\uC9C0 \uC54A\uACE0 \uACF5\uC720\uD560 \uC218 \uC788\uC74C"}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"mainjs",children:"main.js"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",children:'const { fork } = require("child_process");\r\n\r\n// \uC790\uC2DD \uD504\uB85C\uC138\uC2A4 \uC2E4\uD589\r\nconst child = fork("./child.js");\r\n\r\nchild.on("message", message => {\r\n  console.log("main got message:", message);\r\n});\r\n\r\n// \uC790\uC2DD \uD504\uB85C\uC138\uC2A4\uC5D0 \uC791\uC5C5 \uC694\uCCAD (num \uAC12 \uC124\uC815)\r\nchild.send({ num: 10000 });\n'})}),"\n",(0,o.jsx)(e.h2,{id:"childjs",children:"child.js"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",children:'const { Worker } = require("worker_threads");\r\nconst os = require("os");\r\n\r\nprocess.on("message", async message => {\r\n  const { num } = message;\r\n  const workers = os.cpus().length;\r\n\r\n  if (num) {\r\n    // \u{1F680} SharedArrayBuffer \uC0DD\uC131 (Int32Array \uAE30\uC900 workers \uAC1C\uC218 + \uC644\uB8CC \uD50C\uB798\uADF8 \uCD94\uAC00)\r\n    const sharedBuffer = new SharedArrayBuffer(Int32Array.BYTES_PER_ELEMENT * (workers + 1));\r\n    const sharedArray = new Int32Array(sharedBuffer);\r\n\r\n    const workerPromises = [];\r\n    for (let i = 0; i < workers; i++) {\r\n      const start = Math.floor((num / workers) * i);\r\n      const end = Math.floor((num / workers) * (i + 1));\r\n\r\n      workerPromises.push(\r\n        new Promise(resolve => {\r\n          const worker = new Worker("./worker.js", {\r\n            workerData: { start, end, index: i, sharedBuffer },\r\n          });\r\n          worker.once("exit", resolve);\r\n        }),\r\n      );\r\n    }\r\n\r\n    // \uBAA8\uB4E0 \uC6CC\uCEE4 \uC644\uB8CC \uB300\uAE30\r\n    await Promise.all(workerPromises);\r\n\r\n    // \u{1F680} \uBAA8\uB4E0 \uC6CC\uCEE4\uAC00 \uB05D\uB0AC\uC74C\uC744 \uC54C\uB9BC (Atomics.notify \uC0AC\uC6A9)\r\n    Atomics.notify(sharedArray, workers, workers);\r\n\r\n    // \uCD5C\uC885 \uD569\uC0B0 \uD6C4 \uBD80\uBAA8 \uD504\uB85C\uC138\uC2A4\uC5D0 \uC804\uC1A1\r\n    const totalSum = sharedArray.reduce((acc, cur) => acc + cur, 0);\r\n    process.send(totalSum);\r\n  }\r\n  process.exit(0);\r\n});\n'})}),"\n",(0,o.jsx)(e.h2,{id:"workerjs",children:"worker.js"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",children:'const { workerData } = require("worker_threads");\r\n\r\nconst { start, end, index, sharedBuffer } = workerData;\r\n\r\n// \u{1F680} SharedArrayBuffer\uC5D0\uC11C \uACF5\uC720\uB41C \uBA54\uBAA8\uB9AC \uAC00\uC838\uC624\uAE30\r\nconst sharedArray = new Int32Array(sharedBuffer);\r\n\r\n// \u{1F680} \uBD80\uBD84 \uD569 \uACC4\uC0B0\r\nlet sum = 0;\r\nfor (let i = start; i < end; i++) {\r\n  sum += i;\r\n}\r\n\r\n// \u{1F680} Atomics\uB97C \uC0AC\uC6A9\uD558\uC5EC \uC548\uC804\uD558\uAC8C \uACF5\uC720 \uBC30\uC5F4\uC5D0 \uACB0\uACFC \uC800\uC7A5\r\nAtomics.store(sharedArray, index, sum);\r\n\r\n// \uC6CC\uCEE4 \uC885\uB8CC\r\nprocess.exit(0);\n'})})]})}function u(r={}){let{wrapper:e}={...(0,t.R)(),...r.components};return e?(0,o.jsx)(e,{...r,children:(0,o.jsx)(l,{...r})}):l(r)}},255511:function(r,e,n){n.d(e,{R:()=>a,x:()=>d});var s=n(596363);let o={},t=s.createContext(o);function a(r){let e=s.useContext(t);return s.useMemo(function(){return"function"==typeof r?r(e):{...e,...r}},[e,r])}function d(r){let e;return e=r.disableParentContext?"function"==typeof r.components?r.components(o):r.components||o:a(r.components),s.createElement(t.Provider,{value:e},r.children)}}}]);