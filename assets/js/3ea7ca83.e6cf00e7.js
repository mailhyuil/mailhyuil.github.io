"use strict";(globalThis.webpackChunkmy_blog=globalThis.webpackChunkmy_blog||[]).push([[258116],{529087:(e,r,n)=>{n.d(r,{R:()=>c,x:()=>i});var t=n(596363);const s={},a=t.createContext(s);function c(e){const r=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),t.createElement(a.Provider,{value:r},e.children)}},692939:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>c,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"db-postgres/postgres event sourcing","title":"postgres event sourcing","description":"user table\uacfc user_event table\uc744 \ub9cc\ub4e4\uc5b4\uc11c event sourcing\uc744 \uad6c\ud604","source":"@site/docs/db-postgres/postgres event sourcing.md","sourceDirName":"db-postgres","slug":"/db-postgres/postgres event sourcing","permalink":"/docs/db-postgres/postgres event sourcing","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"postgres column \\\\\\\\\\"\\\\\\\\\\" cannot be cast automatically to type \\\\\\\\\\"\\\\\\\\\\"","permalink":"/docs/db-postgres/postgres error cannot be cast automatically to type"},"next":{"title":"postgres extension TDE","permalink":"/docs/db-postgres/postgres extension TDE"}}');var s=n(447259),a=n(529087);const c={},i="postgres event sourcing",u={},o=[{value:"user table",id:"user-table",level:2},{value:"user_event table",id:"user_event-table",level:2},{value:"prisma",id:"prisma",level:2}];function l(e){const r={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"postgres-event-sourcing",children:"postgres event sourcing"})}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsx)(r.p,{children:"user table\uacfc user_event table\uc744 \ub9cc\ub4e4\uc5b4\uc11c event sourcing\uc744 \uad6c\ud604"}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"user-table",children:"user table"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-sql",children:"create table user (\r\n  id serial primary key,\r\n  name varchar(255) not null,\r\n  email varchar(255) not null,\r\n  password varchar(255) not null,\r\n  created_at timestamp not null default now(),\r\n  updated_at timestamp not null default now()\r\n);\n"})}),"\n",(0,s.jsx)(r.h2,{id:"user_event-table",children:"user_event table"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-sql",children:"create table user_event (\r\n  id serial primary key,\r\n  user_id int not null,\r\n  event_type varchar(255) not null,\r\n  event_data jsonb not null,\r\n  created_at timestamp not null default now()\r\n);\n"})}),"\n",(0,s.jsx)(r.h2,{id:"prisma",children:"prisma"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:'@Injectable()\r\nexport class UserService {\r\n  constructor(private readonly prisma: PrismaService) {}\r\n  async findById(id: string) {\r\n    const events = await this.prisma.userEvent.findMany({\r\n      where: {\r\n        userId: id,\r\n      },\r\n    });\r\n    const user = events.reduce((acc, cur) => {\r\n      switch (cur.eventType) {\r\n        case "user_create":\r\n        case "user_update":\r\n          return cur.eventData;\r\n        case "user_delete":\r\n          return null;\r\n      }\r\n    }, null);\r\n    return user;\r\n  }\r\n\r\n  async create(user: Prisma.UserCreateInput) {\r\n    const created = await this.prisma.user.create({\r\n      data: user,\r\n    });\r\n    await this.prisma.userEvent.create({\r\n      data: {\r\n        userId: created.id,\r\n        eventType: "user_create",\r\n        eventData: created,\r\n      },\r\n    });\r\n  }\r\n\r\n  async update(id: string, data: Prisma.UserUpdateInput) {\r\n    await this.prisma.userEvent.create({\r\n      data: {\r\n        userId: id,\r\n        eventType: "user_update",\r\n        eventData: data,\r\n      },\r\n    });\r\n  }\r\n\r\n  async delete(id: string) {\r\n    await this.prisma.userEvent.create({\r\n      data: {\r\n        userId: id,\r\n        eventType: "user_delete",\r\n        eventData: {},\r\n      },\r\n    });\r\n  }\r\n\r\n  async snapshot(id: string) {\r\n    await this.prisma.$transaction(async (tx) => {\r\n      const events = await tx.userEvent.findMany({\r\n        where: {\r\n          userId: id,\r\n        },\r\n      });\r\n\r\n      const user = events.reduce((acc, cur) => {\r\n        switch (cur.eventType) {\r\n          case "user_create":\r\n          case "user_update":\r\n            return cur.eventData;\r\n          case "user_delete":\r\n            return null;\r\n        }\r\n      }, null);\r\n\r\n      await tx.user.update({\r\n        where: {\r\n          id,\r\n        },\r\n        data: user,\r\n      });\r\n\r\n      await tx.userEvent.deleteMany({\r\n        where: {\r\n          userId: id,\r\n        },\r\n      });\r\n    });\r\n  }\r\n}\n'})})]})}function d(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);