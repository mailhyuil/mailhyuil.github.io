"use strict";(self.webpackChunkmy_blog=self.webpackChunkmy_blog||[]).push([["459947"],{657650:function(r,a,e){e.r(a),e.d(a,{frontMatter:()=>i,toc:()=>p,default:()=>l,metadata:()=>n,assets:()=>m,contentTitle:()=>d});var n=JSON.parse('{"id":"db-prisma/prisma middleware","title":"prisma middleware","description":"prisma.middleware.ts","source":"@site/docs/db-prisma/prisma middleware.md","sourceDirName":"db-prisma","slug":"/db-prisma/prisma middleware","permalink":"/docs/db-prisma/prisma middleware","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"prisma middleware soft delete","permalink":"/docs/db-prisma/prisma middleware soft delete"},"next":{"title":"prisma migrate .env \uD30C\uC77C \uC77D\uAE30","permalink":"/docs/db-prisma/prisma migrate .env \uD30C\uC77C \uC77D\uAE30"}}'),s=e(447259),t=e(255511);let i={},d="prisma middleware",m={},p=[{value:"prisma.middleware.ts",id:"prismamiddlewarets",level:2},{value:"prisma.service.ts",id:"prismaservicets",level:2}];function o(r){let a={code:"code",h1:"h1",h2:"h2",header:"header",pre:"pre",...(0,t.R)(),...r.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(a.header,{children:(0,s.jsx)(a.h1,{id:"prisma-middleware",children:"prisma middleware"})}),"\n",(0,s.jsx)(a.h2,{id:"prismamiddlewarets",children:"prisma.middleware.ts"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-ts",children:'import { Prisma } from "@prisma/client";\r\nimport { PrismaService } from "./prisma.service";\r\n\r\nexport const classMiddlewareFn = (prisma: PrismaService) => {\r\n  const classMiddleware: Prisma.Middleware<any> = async (params, next) => {\r\n    if (params.model === "Class") {\r\n      if (params.action == "delete") {\r\n        const count = await prisma.classRegistration.count({\r\n          where: {\r\n            classId: params.args.where.id,\r\n            status: "ACTIVE",\r\n          },\r\n        });\r\n\r\n        if (count < 1) {\r\n          return next(params);\r\n        }\r\n\r\n        params.action = "update";\r\n        params.args["data"] = { deletedAt: new Date(), status: "DELETED" };\r\n      }\r\n      if (params.action == "deleteMany") {\r\n        params.action = "updateMany";\r\n        if (params.args.data != undefined) {\r\n          params.args.data["deletedAt"] = new Date();\r\n          params.args.data["status"] = "DELETED";\r\n        } else {\r\n          params.args["data"] = {\r\n            deletedAt: new Date(),\r\n            status: "DELETED",\r\n          };\r\n        }\r\n      }\r\n      if (\r\n        params.action == "findUnique" ||\r\n        params.action == "findMany" ||\r\n        params.action == "findFirst" ||\r\n        params.action === "findFirstOrThrow" ||\r\n        params.action === "findUniqueOrThrow" ||\r\n        params.action === "findRaw" ||\r\n        params.action === "executeRaw" ||\r\n        params.action === "queryRaw" ||\r\n        params.action == "count" ||\r\n        params.action == "aggregate" ||\r\n        params.action === "groupBy"\r\n      ) {\r\n        params.args["where"]["deletedAt"] = null;\r\n      }\r\n    }\r\n    return next(params);\r\n  };\r\n  return classMiddleware;\r\n};\r\n\r\nexport const userMiddleware: Prisma.Middleware<any> = async (params, next) => {\r\n  if (params.model === "User") {\r\n    if (params.action == "delete") {\r\n      params.action = "update";\r\n      params.args["data"] = { deletedAt: new Date(), status: "INACTIVE" };\r\n    }\r\n    if (params.action == "deleteMany") {\r\n      params.action = "updateMany";\r\n      if (params.args.data != undefined) {\r\n        params.args.data["deletedAt"] = new Date();\r\n        params.args.data["status"] = "INACTIVE";\r\n      } else {\r\n        params.args["data"] = {\r\n          deletedAt: new Date(),\r\n          status: "INACTIVE",\r\n        };\r\n      }\r\n    }\r\n    if (\r\n      params.action == "findUnique" ||\r\n      params.action == "findMany" ||\r\n      params.action == "findFirst" ||\r\n      params.action === "findFirstOrThrow" ||\r\n      params.action === "findUniqueOrThrow" ||\r\n      params.action === "findRaw" ||\r\n      params.action === "executeRaw" ||\r\n      params.action === "queryRaw" ||\r\n      params.action == "count" ||\r\n      params.action == "aggregate" ||\r\n      params.action === "groupBy"\r\n    ) {\r\n      params.args["where"]["deletedAt"] = null;\r\n    }\r\n  }\r\n  return next(params);\r\n};\n'})}),"\n",(0,s.jsx)(a.h2,{id:"prismaservicets",children:"prisma.service.ts"}),"\n",(0,s.jsx)(a.pre,{children:(0,s.jsx)(a.code,{className:"language-ts",children:'import { Injectable, OnModuleInit } from "@nestjs/common";\r\nimport { PrismaClient } from "@prisma/client";\r\nimport { classMiddlewareFn, userMiddleware } from "./prisma.middleware";\r\n\r\n@Injectable()\r\nexport class PrismaService extends PrismaClient implements OnModuleInit {\r\n  async onModuleInit() {\r\n    // soft delete\r\n    this.$use(userMiddleware);\r\n    this.$use(classMiddlewareFn(this));\r\n    await this.$connect();\r\n  }\r\n}\n'})})]})}function l(r={}){let{wrapper:a}={...(0,t.R)(),...r.components};return a?(0,s.jsx)(a,{...r,children:(0,s.jsx)(o,{...r})}):o(r)}},255511:function(r,a,e){e.d(a,{R:()=>i,x:()=>d});var n=e(596363);let s={},t=n.createContext(s);function i(r){let a=n.useContext(t);return n.useMemo(function(){return"function"==typeof r?r(a):{...a,...r}},[a,r])}function d(r){let a;return a=r.disableParentContext?"function"==typeof r.components?r.components(s):r.components||s:i(r.components),n.createElement(t.Provider,{value:a},r.children)}}}]);