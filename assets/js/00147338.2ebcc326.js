"use strict";(globalThis.webpackChunkmy_blog=globalThis.webpackChunkmy_blog||[]).push([[190451],{397210:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>c,frontMatter:()=>l,metadata:()=>r,toc:()=>p});const r=JSON.parse('{"id":"nestjs/nest base pipe file-upload","title":"nest base pipe file-upload","description":"file-upload.pipe.ts","source":"@site/docs/nestjs/nest base pipe file-upload.md","sourceDirName":"nestjs","slug":"/nestjs/nest base pipe file-upload","permalink":"/docs/nestjs/nest base pipe file-upload","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"nest base pipe file-diff","permalink":"/docs/nestjs/nest base pipe file-diff"},"next":{"title":"nest file validation","permalink":"/docs/nestjs/nest base pipe file-validation"}}');var t=i(447259),s=i(529087);const l={},a="nest base pipe file-upload",o={},p=[{value:"file-upload.pipe.ts",id:"file-uploadpipets",level:2}];function f(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"nest-base-pipe-file-upload",children:"nest base pipe file-upload"})}),"\n",(0,t.jsx)(n.h2,{id:"file-uploadpipets",children:"file-upload.pipe.ts"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'import { Injectable, PipeTransform } from "@nestjs/common";\r\nimport { CreateFileDTO } from "../app/file/file.dto";\r\nimport { FileService } from "../app/file/file.service";\r\n\r\n@Injectable()\r\nexport class FileUploadPipe\r\n  implements PipeTransform<Express.Multer.File, Promise<CreateFileDTO | CreateFileDTO[] | undefined>>\r\n{\r\n  constructor(private readonly fileService: FileService) {}\r\n  async transform(\r\n    fileOrFiles: Express.Multer.File | Express.Multer.File[],\r\n  ): Promise<CreateFileDTO | CreateFileDTO[] | undefined> {\r\n    if (!fileOrFiles) return undefined;\r\n    if (fileOrFiles instanceof Array) {\r\n      const fileInfos = await Promise.all(\r\n        fileOrFiles.map(async f => {\r\n          return await this.fileService.upload(f);\r\n        }),\r\n      );\r\n      return fileInfos;\r\n    }\r\n    const fileInfo = await this.fileService.upload(fileOrFiles);\r\n    return fileInfo;\r\n  }\r\n}\n'})})]})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(f,{...e})}):f(e)}},529087:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>a});var r=i(596363);const t={},s=r.createContext(t);function l(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);