"use strict";(globalThis.webpackChunkmy_blog=globalThis.webpackChunkmy_blog||[]).push([[121933],{529087:(e,r,n)=>{n.d(r,{R:()=>c,x:()=>l});var s=n(596363);const t={},o=s.createContext(t);function c(e){const r=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),s.createElement(o.Provider,{value:r},e.children)}},926727:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>c,metadata:()=>s,toc:()=>i});const s=JSON.parse('{"id":"protocol/L7 MCP sdk server","title":"MCP nodejs","description":"install","source":"@site/docs/protocol/L7 MCP sdk server.md","sourceDirName":"protocol","slug":"/protocol/L7 MCP sdk server","permalink":"/docs/protocol/L7 MCP sdk server","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"MCP nodejs","permalink":"/docs/protocol/L7 MCP sdk client"},"next":{"title":"MCP mcp-remote (stdio)","permalink":"/docs/protocol/L7 MCP transport mcp-remote"}}');var t=n(447259),o=n(529087);const c={},l="MCP nodejs",a={},i=[{value:"install",id:"install",level:2},{value:"server.ts",id:"serverts",level:2}];function d(e){const r={code:"code",h1:"h1",h2:"h2",header:"header",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"mcp-nodejs",children:"MCP nodejs"})}),"\n",(0,t.jsx)(r.h2,{id:"install",children:"install"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-sh",children:"npm i @modelcontextprotocol/sdk\r\nnpm i zod\r\n\r\n# test\r\nnpx @modelcontextprotocol/inspector node ./dist/index.js # MCP Server\uc758 \uc0c1\ud0dc\ub97c \uc2dc\uac01\ud654\ud558\uae30 \uc704\ud55c Inspector\n"})}),"\n",(0,t.jsx)(r.h2,{id:"serverts",children:"server.ts"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'import { McpServer, ResourceTemplate } from "@modelcontextprotocol/sdk/server/mcp.js";\r\nimport { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";\r\nimport { z } from "zod";\r\n\r\nconst server = new McpServer({\r\n  name: "My MCP Server",\r\n  version: "1.0.0",\r\n});\r\n\r\n// server\uc5d0\uc11c \uc9c0\uc6d0\ud558\ub294 resource\ub97c \uc815\uc758\ud569\ub2c8\ub2e4.\r\nserver.resource(\r\n  "my-resource",\r\n  new ResourceTemplate("echo://{message}", { list: undefined }),\r\n  async (uri, { message }) => ({\r\n    contents: [\r\n      {\r\n        uri: uri.href,\r\n        text: `Resource echo: ${message}`,\r\n      },\r\n    ],\r\n  }),\r\n);\r\n\r\n// server\uc5d0\uc11c \uc9c0\uc6d0\ud558\ub294 tool\uc744 \uc815\uc758\ud569\ub2c8\ub2e4.\r\nserver.tool("my-tool", { message: z.string() }, async ({ message }) => ({\r\n  content: [{ type: "text", text: `Tool echo: ${message}` }],\r\n}));\r\n\r\n// server\uc5d0\uc11c \uc9c0\uc6d0\ud558\ub294 prompt\ub97c \uc815\uc758\ud569\ub2c8\ub2e4.\r\nserver.prompt("my-prompt", { message: z.string() }, ({ message }) => ({\r\n  messages: [\r\n    {\r\n      role: "user",\r\n      content: {\r\n        type: "text",\r\n        text: `Please process this message: ${message}`,\r\n      },\r\n    },\r\n  ],\r\n}));\r\n\r\nconst transport = new StdioServerTransport();\r\nawait server.connect(transport);\r\nconsole.log("Server started and listening for requests...");\n'})})]})}function p(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);