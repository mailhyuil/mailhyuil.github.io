"use strict";(globalThis.webpackChunkmy_blog=globalThis.webpackChunkmy_blog||[]).push([[611459],{529087:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>c});var r=n(596363);const s={},o=r.createContext(s);function i(e){const t=r.useContext(o);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:t},e.children)}},570065:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>p});const r=JSON.parse('{"id":"testing/testing nestjs Service PrismaService","title":"nest testing prisma","description":"install","source":"@site/docs/testing/testing nestjs Service PrismaService.md","sourceDirName":"testing","slug":"/testing/testing nestjs Service PrismaService","permalink":"/docs/testing/testing nestjs Service PrismaService","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"testing nestjs HttpService","permalink":"/docs/testing/testing nestjs Service HttpService"},"next":{"title":"nest testing service","permalink":"/docs/testing/testing nestjs Service"}}');var s=n(447259),o=n(529087);const i={},c="nest testing prisma",a={},p=[{value:"install",id:"install",level:2},{value:"post.service.spec.ts",id:"postservicespects",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"nest-testing-prisma",children:"nest testing prisma"})}),"\n",(0,s.jsx)(t.h2,{id:"install",children:"install"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"npm i -D jest-mock-extended@2.0.4\n"})}),"\n",(0,s.jsx)(t.h2,{id:"postservicespects",children:"post.service.spec.ts"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:'import { NotFoundException } from "@nestjs/common";\r\nimport { Test, TestingModule } from "@nestjs/testing";\r\nimport { Post, PostSnapshot, Prisma, PrismaClient } from "@prisma/client";\r\nimport { plainToInstance } from "class-transformer";\r\nimport { DeepMockProxy, mock, mockDeep } from "jest-mock-extended";\r\nimport { PrismaService } from "./../../prisma/prisma.service";\r\nimport { CreatePostDto, PostDto } from "./post.dto";\r\nimport { PostService } from "./post.service";\r\nconst snapshotSelect = {\r\n  postId: true,\r\n  title: true,\r\n  content: true,\r\n  createdAt: true,\r\n  attachments: {\r\n    select: {\r\n      id: true,\r\n      url: true,\r\n    },\r\n  },\r\n};\r\n\r\ntype PostEntityType = Prisma.PostGetPayload<{\r\n  orderBy: {\r\n    createdAt: "desc";\r\n  };\r\n  select: {\r\n    snapshots: {\r\n      take: 1;\r\n      orderBy: {\r\n        createdAt: "desc";\r\n      };\r\n      select: typeof snapshotSelect;\r\n    };\r\n  };\r\n}>;\r\n\r\ntype PostSnapshotEntityType = Prisma.PostSnapshotGetPayload<{\r\n  select: typeof snapshotSelect;\r\n}>;\r\n\r\nconst postSnapshotEntity: PostSnapshotEntityType = mock<PostSnapshotEntityType>();\r\nconst postEntity: PostEntityType = mock<PostEntityType>({\r\n  snapshots: [postSnapshotEntity],\r\n});\r\nconst postDto = plainToInstance(PostDto, postEntity.snapshots[0]);\r\n\r\ndescribe("PostService", () => {\r\n  let service: PostService;\r\n  let prismaMock: DeepMockProxy<PrismaClient>;\r\n\r\n  beforeEach(async () => {\r\n    prismaMock = mockDeep<PrismaClient>();\r\n\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        PostService,\r\n        {\r\n          provide: PrismaService,\r\n          useValue: prismaMock,\r\n        },\r\n      ],\r\n    }).compile();\r\n\r\n    service = module.get<PostService>(PostService);\r\n  });\r\n\r\n  it("service should be defined", () => {\r\n    expect(service).toBeDefined();\r\n  });\r\n\r\n  describe("findAll", () => {\r\n    it("should return an array of posts", async () => {\r\n      prismaMock.post.findMany.mockResolvedValueOnce([postEntity] as unknown as Post[]);\r\n      const found = await service.findAll();\r\n      expect(found).toEqual([postDto]);\r\n      expect(found[0]).toBeInstanceOf(PostDto);\r\n    });\r\n    it("should return an empty array", async () => {\r\n      prismaMock.post.findMany.mockResolvedValueOnce([]);\r\n      expect(service.findAll()).resolves.toEqual([]);\r\n    });\r\n  });\r\n\r\n  describe("findById", () => {\r\n    it("should return a post", async () => {\r\n      prismaMock.post.findUniqueOrThrow.mockImplementationOnce(\r\n        () =>\r\n          ({\r\n            snapshots: jest.fn(async () => [postSnapshotEntity]),\r\n          } as unknown as Prisma.Prisma__PostClient<Post>)\r\n      );\r\n      const found = await service.findById("good-id");\r\n      expect(found).toEqual(postDto);\r\n    });\r\n  });\r\n\r\n  describe("create", () => {\r\n    it("should create a post", async () => {\r\n      const createDto = mock<CreatePostDto>({\r\n        ...postDto,\r\n      });\r\n      prismaMock.postSnapshot.create.mockResolvedValueOnce(postSnapshotEntity as unknown as PostSnapshot);\r\n      const created = await service.create(createDto);\r\n      expect(created).toEqual(postDto);\r\n    });\r\n  });\r\n\r\n  describe("remove", () => {\r\n    it("should remove a post", async () => {\r\n      prismaMock.post.delete.mockResolvedValueOnce(postEntity as unknown as Post);\r\n      expect(service.remove("good-id")).resolves.not.toThrow(new NotFoundException());\r\n    });\r\n  });\r\n});\n'})})]})}function d(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);