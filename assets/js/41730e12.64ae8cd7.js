"use strict";(globalThis.webpackChunkmy_blog=globalThis.webpackChunkmy_blog||[]).push([[223224],{213670:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>l,frontMatter:()=>i,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"testing/testing nestjs Service","title":"nest testing service","description":"prisma\uc758 now() \uc0ac\uc6a9 \uc2dc createdAt\uc744 [Function: mockConstructor]\ub85c \ub300\uccb4\ud574\ubc84\ub9ac\uae30 \ub54c\ubb38\uc5d0 \uba85\uc2dc\uc801\uc73c\ub85c new Date()\ub85c \ub300\uccb4\ud574\uc918\uc57c \ud55c\ub2e4.","source":"@site/docs/testing/testing nestjs Service.md","sourceDirName":"testing","slug":"/testing/testing nestjs Service","permalink":"/docs/testing/testing nestjs Service","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"nest testing prisma","permalink":"/docs/testing/testing nestjs Service PrismaService"},"next":{"title":"nest testing TestBed","permalink":"/docs/testing/testing nestjs TestBed"}}');var o=t(447259),s=t(529087);const i={},c="nest testing service",a={},d=[];function p(e){const n={blockquote:"blockquote",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"nest-testing-service",children:"nest testing service"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"prisma\uc758 now() \uc0ac\uc6a9 \uc2dc createdAt\uc744 [Function: mockConstructor]\ub85c \ub300\uccb4\ud574\ubc84\ub9ac\uae30 \ub54c\ubb38\uc5d0 \uba85\uc2dc\uc801\uc73c\ub85c new Date()\ub85c \ub300\uccb4\ud574\uc918\uc57c \ud55c\ub2e4."}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"$transaction\uc744 \uc0ac\uc6a9\ud558\uae30 \uc704\ud574 prismaMock.$transaction.mockImplementation(cb => cb(prismaMock));\ub97c \ucd94\uac00\ud574\uc900\ub2e4."}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:'import { NotFoundException } from "@nestjs/common";\r\nimport { Test, TestingModule } from "@nestjs/testing";\r\nimport { Prisma, PrismaClient, User } from "@prisma/client";\r\nimport { plainToInstance } from "class-transformer";\r\nimport { DeepMockProxy, mock, mockDeep } from "jest-mock-extended";\r\nimport { PrismaService } from "../../prisma/prisma.service";\r\nimport { CreateExampleDTO, ExampleDTO, ResponseExampleDTO, UpdateExampleDTO } from "./example.dto";\r\nimport { ExampleService } from "./example.service";\r\nconst user = mock<User>({});\r\n\r\ntype ExampleEntityType = Prisma.ExampleGetPayload<{\r\n  include: {};\r\n}>;\r\nconst entity = mock<ExampleEntityType>({\r\n  createdAt: new Date(),\r\n});\r\n\r\ndescribe("ExampleService", () => {\r\n  let prismaMock: DeepMockProxy<PrismaClient>;\r\n  let service: ExampleService;\r\n\r\n  beforeEach(async () => {\r\n    prismaMock = mockDeep<PrismaClient>();\r\n    prismaMock.$transaction.mockImplementation(cb => cb(prismaMock));\r\n\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [\r\n        ExampleService,\r\n        {\r\n          provide: PrismaService,\r\n          useValue: prismaMock,\r\n        },\r\n      ],\r\n    }).compile();\r\n\r\n    service = module.get<ExampleService>(ExampleService);\r\n  });\r\n\r\n  it("should be defined", () => {\r\n    expect(service).toBeDefined();\r\n    expect(prismaMock).toBeDefined();\r\n  });\r\n\r\n  describe("findAll", () => {\r\n    it("should return an array of examples", async () => {\r\n      const dto = plainToInstance(ExampleDTO, entity);\r\n      prismaMock.example.findMany.mockResolvedValue([entity]);\r\n      const found = await service.findAll();\r\n      expect(found).toEqual([dto]);\r\n    });\r\n  });\r\n\r\n  describe("findById", () => {\r\n    it("should return ResponseExampleDTO", async () => {\r\n      const dto = plainToInstance(ResponseExampleDTO, {\r\n        data: entity,\r\n        metadata: {\r\n          prev: undefined,\r\n          next: undefined,\r\n        },\r\n      } as ResponseExampleDTO);\r\n\r\n      prismaMock.example.findUniqueOrThrow.mockResolvedValue(entity);\r\n      prismaMock.example.findFirst.mockResolvedValueOnce(undefined);\r\n\r\n      const found = await service.findById("good-id");\r\n      expect(found).toEqual(dto);\r\n    });\r\n\r\n    it("should throw NotFoundException", async () => {\r\n      prismaMock.example.findUniqueOrThrow.mockRejectedValueOnce(new NotFoundException());\r\n      expect(service.findById("bad-id")).rejects.toThrow(NotFoundException);\r\n    });\r\n  });\r\n\r\n  describe("create", () => {\r\n    const createDto = mock<CreateExampleDTO>({});\r\n    it("should return an example", async () => {\r\n      const dto = plainToInstance(ExampleDTO, entity);\r\n      prismaMock.example.create.mockResolvedValue(entity);\r\n      const created = await service.create(createDto);\r\n      expect(created).toEqual(dto);\r\n    });\r\n  });\r\n\r\n  describe("update", () => {\r\n    const updateDto = mock<UpdateExampleDTO>({});\r\n    it("should return an example", async () => {\r\n      const dto = plainToInstance(ExampleDTO, entity);\r\n      prismaMock.example.update.mockResolvedValue(entity);\r\n      const updated = await service.update("good-id", updateDto);\r\n      expect(updated).toEqual(dto);\r\n    });\r\n  });\r\n\r\n  describe("delete", () => {\r\n    it("should return an example", async () => {\r\n      prismaMock.example.delete.mockResolvedValueOnce(entity);\r\n      expect(service.delete("good-id")).resolves.not.toThrow(new NotFoundException());\r\n    });\r\n  });\r\n});\n'})})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},529087:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var r=t(596363);const o={},s=r.createContext(o);function i(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);