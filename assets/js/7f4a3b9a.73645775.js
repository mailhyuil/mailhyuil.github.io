"use strict";(globalThis.webpackChunkmy_blog=globalThis.webpackChunkmy_blog||[]).push([[776856],{187985:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>m,frontMatter:()=>o,metadata:()=>n,toc:()=>i});const n=JSON.parse('{"id":"x design pattern/Behavioral strategy - angular","title":"angular strategy pattern","description":"payment.service.ts","source":"@site/docs/x design pattern/Behavioral strategy - angular.md","sourceDirName":"x design pattern","slug":"/x design pattern/Behavioral strategy - angular","permalink":"/docs/x design pattern/Behavioral strategy - angular","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"angular strategy pattern","permalink":"/docs/x design pattern/Behavioral strategy - angular Injector \uc0ac\uc6a9"},"next":{"title":"nestjs strategy pattern","permalink":"/docs/x design pattern/Behavioral strategy - nestjs"}}');var a=r(447259),s=r(529087);const o={},c="angular strategy pattern",p={},i=[{value:"payment.service.ts",id:"paymentservicets",level:2},{value:"payment.service.ts (reflect-metadata \uc0ac\uc6a9)",id:"paymentservicets-reflect-metadata-\uc0ac\uc6a9",level:2},{value:"payment-button.component.ts",id:"payment-buttoncomponentts",level:2}];function y(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"angular-strategy-pattern",children:"angular strategy pattern"})}),"\n",(0,a.jsx)(t.h2,{id:"paymentservicets",children:"payment.service.ts"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'import { Injectable } from "@angular/core";\r\n\r\nexport type Lecture = {\r\n  id: number;\r\n  title: string;\r\n  type: "free" | "paid";\r\n  price: number;\r\n};\r\n\r\n@Injectable({\r\n  providedIn: "root",\r\n})\r\nexport class PaymentService {\r\n  paymentStrategy: Record<Lecture["type"], PaymentStrategy>;\r\n\r\n  constructor() {\r\n    const strategies = PaymentStrategy.getImplementations();\r\n    this.paymentStrategy = strategies.reduce((acc, cur) => {\r\n      const instance = new cur();\r\n      acc[instance.type] = instance;\r\n      return acc;\r\n    }, {} as typeof this.paymentStrategy);\r\n  }\r\n\r\n  payment(lecture: Lecture) {\r\n    this.paymentStrategy[lecture.type].payment(lecture);\r\n  }\r\n}\r\n\r\nexport interface PaymentStrategy {\r\n  readonly type: Lecture["type"];\r\n  payment(lecture: Lecture): void;\r\n}\r\n\r\nexport namespace PaymentStrategy {\r\n  type Constructor<T> = {\r\n    new (...args: any[]): T;\r\n    readonly prototype: T;\r\n  };\r\n\r\n  const implementations: Constructor<PaymentStrategy>[] = [];\r\n\r\n  export function getImplementations(): Constructor<PaymentStrategy>[] {\r\n    return implementations;\r\n  }\r\n\r\n  export function register<T extends Constructor<PaymentStrategy>>(constructor: T) {\r\n    implementations.push(constructor);\r\n  }\r\n}\r\n\r\n@PaymentStrategy.register\r\nexport class FreePayment implements PaymentStrategy {\r\n  type: Lecture["type"] = "free";\r\n  constructor() {\r\n    console.log("FreePayment init");\r\n  }\r\n  payment(lecture: Lecture) {\r\n    console.log("FreePayment.payment", lecture);\r\n  }\r\n}\r\n\r\n@PaymentStrategy.register\r\nexport class PaidPayment implements PaymentStrategy {\r\n  type: Lecture["type"] = "paid";\r\n  constructor() {\r\n    console.log("PaidPayment init");\r\n  }\r\n  payment(lecture: Lecture) {\r\n    console.log("PaidPayment.payment", lecture);\r\n  }\r\n}\n'})}),"\n",(0,a.jsx)(t.h2,{id:"paymentservicets-reflect-metadata-\uc0ac\uc6a9",children:"payment.service.ts (reflect-metadata \uc0ac\uc6a9)"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'import { Injectable } from "@angular/core";\r\nimport "reflect-metadata";\r\n\r\nexport type Lecture = {\r\n  id: number;\r\n  title: string;\r\n  type: "free" | "paid";\r\n  price: number;\r\n};\r\n\r\n@Injectable({\r\n  providedIn: "root",\r\n})\r\nexport class PaymentService {\r\n  paymentStrategy: Record<Lecture["type"], PaymentStrategy>;\r\n\r\n  constructor() {\r\n    const strategies = PaymentStrategy.getStrategies();\r\n    this.paymentStrategy = strategies.reduce((acc, cur) => {\r\n      const instance = new cur();\r\n      const type = Reflect.getMetadata("strategy:payment", cur) as Lecture["type"];\r\n      acc[type] = instance;\r\n      return acc;\r\n    }, {} as typeof this.paymentStrategy);\r\n  }\r\n\r\n  payment(lecture: Lecture) {\r\n    this.paymentStrategy[lecture.type].payment(lecture);\r\n  }\r\n}\r\n\r\nnamespace PaymentStrategy {\r\n  type Constructor<T> = {\r\n    new (...args: any[]): T;\r\n    readonly prototype: T;\r\n  };\r\n\r\n  const strategyRegistry: Constructor<PaymentStrategy>[] = [];\r\n  export function getStrategies() {\r\n    return strategyRegistry;\r\n  }\r\n\r\n  export function register(type: Lecture["type"]): ClassDecorator {\r\n    return (target: any) => {\r\n      Reflect.defineMetadata("strategy:payment", type, target);\r\n      strategyRegistry.push(target);\r\n    };\r\n  }\r\n}\r\n\r\nexport interface PaymentStrategy {\r\n  payment(lecture: Lecture): void;\r\n}\r\n\r\n@PaymentStrategy.register("free")\r\nexport class FreePayment implements PaymentStrategy {\r\n  constructor() {\r\n    console.log("FreePayment init");\r\n  }\r\n  payment(lecture: Lecture) {\r\n    console.log("FreePayment.payment", lecture);\r\n  }\r\n}\r\n\r\n@PaymentStrategy.register("paid")\r\nexport class PaidPayment implements PaymentStrategy {\r\n  constructor() {\r\n    console.log("PaidPayment init");\r\n  }\r\n  payment(lecture: Lecture) {\r\n    console.log("PaidPayment.payment", lecture);\r\n  }\r\n}\n'})}),"\n",(0,a.jsx)(t.h2,{id:"payment-buttoncomponentts",children:"payment-button.component.ts"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-ts",children:'import { CommonModule } from "@angular/common";\r\nimport { Component, Input, inject } from "@angular/core";\r\nimport { PaymentService } from "../../pages/home/payment.service";\r\n\r\n@Component({\r\n  selector: "app-payment-button",\r\n  templateUrl: "./payment-button.component.html",\r\n  styleUrls: ["./payment-button.component.scss"],\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n})\r\nexport default class PaymentButtonComponent {\r\n  @Input() lecture: Lecture;\r\n  paymentService = inject(PaymentService);\r\n  submit() {\r\n    this.paymentService.payment(this.lecture);\r\n  }\r\n}\n'})})]})}function m(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(y,{...e})}):y(e)}},529087:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>c});var n=r(596363);const a={},s=n.createContext(a);function o(e){const t=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);