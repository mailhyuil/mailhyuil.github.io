"use strict";(globalThis.webpackChunkmy_blog=globalThis.webpackChunkmy_blog||[]).push([[291022],{298253:(t,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>g,frontMatter:()=>i,metadata:()=>e,toc:()=>c});const e=JSON.parse('{"id":"go/go http2","title":"go http2","description":"","source":"@site/docs/go/go http2.md","sourceDirName":"go","slug":"/go/go http2","permalink":"/docs/go/go http2","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"go http","permalink":"/docs/go/go http"},"next":{"title":"go http3 quic-go","permalink":"/docs/go/go http3 quic-go"}}');var o=n(447259),s=n(529087);const i={},a="go http2",l={},c=[];function p(t){const r={code:"code",h1:"h1",header:"header",pre:"pre",...(0,s.R)(),...t.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.header,{children:(0,o.jsx)(r.h1,{id:"go-http2",children:"go http2"})}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-go",children:'package main\r\n\r\nimport (\r\n\t"crypto/tls"\r\n\t"crypto/x509"\r\n\t"flag"\r\n\t"fmt"\r\n\t"io/ioutil"\r\n\t"log"\r\n\t"net/http"\r\n\r\n\t"golang.org/x/net/http2"\r\n)\r\n\r\nconst url = "https://localhost:8000"\r\n\r\nvar httpVersion = flag.Int("version", 2, "HTTP version")\r\n\r\nfunc main() {\r\n\tflag.Parse()\r\n\tclient := &http.Client{}\r\n\r\n\t// Create a pool with the server certificate since it is not signed\r\n\t// by a known CA\r\n\tcaCert, err := ioutil.ReadFile("server.crt")\r\n\tif err != nil {\r\n\t\tlog.Fatalf("Reading server certificate: %s", err)\r\n\t}\r\n\tcaCertPool := x509.NewCertPool()\r\n\tcaCertPool.AppendCertsFromPEM(caCert)\r\n\r\n\t// Create TLS configuration with the certificate of the server\r\n\ttlsConfig := &tls.Config{\r\n\t\tRootCAs: caCertPool,\r\n\t}\r\n\r\n\t// Use the proper transport in the client\r\n\tswitch *httpVersion {\r\n\tcase 1:\r\n\t\tclient.Transport = &http.Transport{\r\n\t\t\tTLSClientConfig: tlsConfig,\r\n\t\t}\r\n\tcase 2:\r\n\t\tclient.Transport = &http2.Transport{\r\n\t\t\tTLSClientConfig: tlsConfig,\r\n\t\t}\r\n\t}\r\n\r\n\t// Perform the request\r\n\tresp, err := client.Get(url)\r\n\tif err != nil {\r\n\t\tlog.Fatalf("Failed get: %s", err)\r\n\t}\r\n\tdefer resp.Body.Close()\r\n\tbody, err := ioutil.ReadAll(resp.Body)\r\n\tif err != nil {\r\n\t\tlog.Fatalf("Failed reading response body: %s", err)\r\n\t}\r\n\tfmt.Printf(\r\n\t\t"Got response %d: %s %s\\n",\r\n\t\tresp.StatusCode, resp.Proto, string(body))\r\n}\n'})})]})}function g(t={}){const{wrapper:r}={...(0,s.R)(),...t.components};return r?(0,o.jsx)(r,{...t,children:(0,o.jsx)(p,{...t})}):p(t)}},529087:(t,r,n)=>{n.d(r,{R:()=>i,x:()=>a});var e=n(596363);const o={},s=e.createContext(o);function i(t){const r=e.useContext(s);return e.useMemo(function(){return"function"==typeof t?t(r):{...r,...t}},[r,t])}function a(t){let r;return r=t.disableParentContext?"function"==typeof t.components?t.components(o):t.components||o:i(t.components),e.createElement(s.Provider,{value:r},t.children)}}}]);