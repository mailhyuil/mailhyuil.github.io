"use strict";(globalThis.webpackChunkmy_blog=globalThis.webpackChunkmy_blog||[]).push([[808087],{111194:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>o,contentTitle:()=>i,default:()=>p,frontMatter:()=>c,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"rxjs/rxjs multicasting shareReplay - cache - auto-refresh","title":"rxjs shareReplay cache","description":"timer\ub97c \uc0ac\uc6a9","source":"@site/docs/rxjs/rxjs multicasting shareReplay - cache - auto-refresh.md","sourceDirName":"rxjs","slug":"/rxjs/rxjs multicasting shareReplay - cache - auto-refresh","permalink":"/docs/rxjs/rxjs multicasting shareReplay - cache - auto-refresh","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"rxjs share","permalink":"/docs/rxjs/rxjs multicasting share"},"next":{"title":"rxjs shareReplay cache","permalink":"/docs/rxjs/rxjs multicasting shareReplay - cache"}}');var s=n(447259),a=n(529087);const c={},i="rxjs shareReplay cache",o={},l=[];function h(e){const r={blockquote:"blockquote",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"rxjs-sharereplay-cache",children:"rxjs shareReplay cache"})}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsx)(r.p,{children:"timer\ub97c \uc0ac\uc6a9"}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",children:"import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { shareReplay } from 'rxjs/operators';\r\n\r\nconst REFRESH_INTERVAL = 1000 * 60 * 5; // 5\ubd84\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class HomeService implements OnDestroy {\r\n  private readonly http = inject(HttpClient);\r\n  private readonly cache$: Observable<any>;\r\n  private readonly refresh$ = new Subject<void>();\r\n\r\n  ngOnDestroy (){\r\n    this.refresh$.next();\r\n    this.refresh$.complete();\r\n  }\r\n\r\n  findAll(): Observable<any> {\r\n    if (!this.cache$) {\r\n      const timer$ = timer(0, REFRESH_INTERVAL);\r\n      this.cache$ = timer$.pipe(\r\n        switchMap(() => this.http.get<any>('https://api.example.com/data')),\r\n        shareReplay(1),\r\n        takeUntil(this.refresh$)\r\n      );\r\n    }\r\n    return this.cache$;\r\n  }\r\n\r\n  refresh(){\r\n    this.cache$ = null;\r\n    this.refresh$.next();\r\n  }\r\n\r\n  refreshAndFindAll(){\r\n    this.refresh();\r\n    return this.findAll();\r\n  }\r\n}\n"})})]})}function p(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},529087:(e,r,n)=>{n.d(r,{R:()=>c,x:()=>i});var t=n(596363);const s={},a=t.createContext(s);function c(e){const r=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),t.createElement(a.Provider,{value:r},e.children)}}}]);